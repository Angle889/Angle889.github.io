<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>xshell 6 连接</title>
      <link href="/2020/05/01/xshell-6-lian-jie/"/>
      <url>/2020/05/01/xshell-6-lian-jie/</url>
      
        <content type="html"><![CDATA[<h4 id="第一章：连接服务器的两种工具"><a href="#第一章：连接服务器的两种工具" class="headerlink" title="第一章：连接服务器的两种工具"></a>第一章：连接服务器的两种工具</h4><p>​    1）使用Xshell连接</p><p>​    2）使用crt远程连接工具</p><p>​    3）（cmd可以连接，但有些功能不能使用）</p><h4 id="第二章：Xshell整体优化"><a href="#第二章：Xshell整体优化" class="headerlink" title="第二章：Xshell整体优化"></a>第二章：Xshell整体优化</h4><p>1）打开Xshell软件，点击“新建，会话”，输入名称和主机IP，选择端口</p><p><img src="/medias/54.png" alt></p><p>2）输入你的用户名和密码</p><p><img src="/medias/55.png" alt></p><p>3）选择终端类型和修改缓冲区大小</p><p><img src="/medias/56.png" alt></p><p><img src="/medias/57.png" alt></p><p><img src="/medias/58.png" alt></p><p><img src="/medias/59.png" alt></p><p><img src="/medias/60.png" alt></p><p><img src="/medias/61.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令提示符与格式、命令快捷键</title>
      <link href="/2020/05/01/ming-ling-ti-shi-fu-yu-ge-shi-ming-ling-kuai-jie-jian/"/>
      <url>/2020/05/01/ming-ling-ti-shi-fu-yu-ge-shi-ming-ling-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h4 id="1-命令提示符"><a href="#1-命令提示符" class="headerlink" title="1 .命令提示符"></a>1 .命令提示符</h4><p>[root@oldboyedu ~]#为例</p><table><thead><tr><th>提示符</th><th>表示</th></tr></thead><tbody><tr><td>Root</td><td>用户名(谁登录的这台服务器)或者当前用户</td></tr><tr><td>@</td><td>分割线</td></tr><tr><td>Oldboyedu</td><td>主机名称</td></tr><tr><td>~</td><td>代表了当前的路径 家目录</td></tr><tr><td>#</td><td>代表了管理员用户 root</td></tr><tr><td>$</td><td>普通用户的提示符</td></tr></tbody></table><h4 id="2-命令格式"><a href="#2-命令格式" class="headerlink" title="2 .命令格式"></a>2 .命令格式</h4><table><thead><tr><th>命令</th><th>[参数选项]</th><th>文件/目录</th></tr></thead><tbody><tr><td>rm</td><td>-f</td><td>/tmp/oldboy.txt</td></tr></tbody></table><p>命令分为：</p><table><thead><tr><th>内置命令</th><th>man cd</th></tr></thead><tbody><tr><td>外部命令</td><td>通过软件安装 第三方安装</td></tr><tr><td>外部命令帮助</td><td>Man</td></tr><tr><td>内置命令帮助</td><td>help  help  cd</td></tr></tbody></table><h4 id="3-命令快捷键使用"><a href="#3-命令快捷键使用" class="headerlink" title="3 .命令快捷键使用"></a>3 .命令快捷键使用</h4><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>ctrl + l</th><th>(小写的L) 清屏</th></tr></thead><tbody><tr><td>ctrl + c</td><td>终止退出当前的操作</td></tr><tr><td>ctrl + a、Home</td><td>快速移动光标到行首</td></tr><tr><td>ctrl + e</td><td>快速移动光标到行尾 End</td></tr><tr><td>ctrl + u</td><td>剪切光标所在到行首</td></tr><tr><td>ctrl + y</td><td>粘贴 ctrl+u剪切的内容</td></tr><tr><td>ctrl + k</td><td>剪切光标所在到行尾</td></tr><tr><td>ctrl + ←</td><td>快速向左移动一个单词</td></tr><tr><td>ctrl + →</td><td>快速向右移动一个单词</td></tr><tr><td>ctrl + s</td><td>锁屏（不禁止输入内容）</td></tr><tr><td>ctrl + q</td><td>解锁</td></tr><tr><td>ctrl + r</td><td>搜索使用过的命令 history 查看历史</td></tr><tr><td>ctrl + d</td><td>退出当前登录</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无法连接虚拟机、上网排错</title>
      <link href="/2020/05/01/wu-fa-lian-jie-xu-ni-ji-shang-wang-pai-cuo/"/>
      <url>/2020/05/01/wu-fa-lian-jie-xu-ni-ji-shang-wang-pai-cuo/</url>
      
        <content type="html"><![CDATA[<h4 id="第1章：无法连接虚拟机排错"><a href="#第1章：无法连接虚拟机排错" class="headerlink" title="第1章：无法连接虚拟机排错"></a>第1章：无法连接虚拟机排错</h4><p>1）查看虚拟机的IP地址是否正常，10.0.1.200 /24 是否为24位</p><p>2）是否能够ping通虚拟机IP地址。</p><p>  1.如果不通，则在虚拟机内ping和自己能互联相同网段的物理机VMNET8的IP地址，如果还不通则把vmnet8IP地址更改为相同网段即可。</p><p>  2.如果相同网段通的话，打开自己电脑的网络和共享中心看vmnet8-编辑-虚拟网络编辑器-vmnet8 DHCP，如果是开的状态，则网段更改为和虚拟机IP相同的网段，如果禁止DHCP 则手动把物理机vmnet8IP地址更改为同一个网段。</p><p>3）如果ping不通IP地址则检查windows的mv服务，mv服务必须要正在运行中。</p><p>4）就是两个centos网络服务，第一个是network要使用，第二个是NetworkManager，其中NetworkManager要关闭，输入命令systemctl stop  NetworkManager，并且禁止开机启动systemctl disable NetworkManager。</p><p>5）检查是否开启了wifi共享。</p><p>6）检查端口是否正常，输入命令telnet 10.0.1.200 22,而22择是端口服务称为SSH服务。</p><h4 id="第2章：无法上网排错"><a href="#第2章：无法上网排错" class="headerlink" title="第2章：无法上网排错"></a>第2章：无法上网排错</h4><p>1）ping网关,必须要通。</p><p>2）ping公网IP地址。</p><p>  DNS是负责把域名解析成IP地址，DNS的网关其中有10.0.1.254。公用DNS（阿里云）223.5.5.5 223.6.6.6。谷歌是8.8.8.8。电信是114.114.114.114。看DNS解析输入命令：cat /etc/resolv.conf 其中nameserver 223.6.6.6就是DNS。</p><p>3）查看网关</p><p>  输入命令route -n查看，其中route -n 这个操作系统没有，需要安装软件包 （yum -y install net-tools），输入命令cat /etc/sysconfig/network-scripts/ifcfg-eth0也可以查看网关。</p><p>4）不兼容性</p><p>  配置了网关10.0.1.254 但是ping不通，则需要重启网卡，命令systemctl restart network</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建新的虚拟机及CentOS7.5安装过程</title>
      <link href="/2020/05/01/chuang-jian-xin-de-xu-ni-ji-ji-centos7.5-an-zhuang-guo-cheng/"/>
      <url>/2020/05/01/chuang-jian-xin-de-xu-ni-ji-ji-centos7.5-an-zhuang-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="1-创建新的虚拟机"><a href="#1-创建新的虚拟机" class="headerlink" title="1 .创建新的虚拟机"></a>1 .创建新的虚拟机</h4><p>​    打开下载好的VMware,点击创建新的虚拟机，镜像Centos7.5下载:centos.org</p><p>CentOS-7-x86_64-DVD-1810.iso     2018-11-25 23:55 4.3G</p><p>CentOS-7-x86_64-DVD-1810.torrent   2018-12-03 15:03 86K   （种子下载 速度快）</p><p>CentOS-7-x86_64-Everything-1810.iso  2018-11-26 14:28 10G  </p><p>CentOS-7-x86_64-Everything-1810.torrent  2018-12-03 15:03 101K    </p><p>CentOS-7-x86_64-LiveGNOME-1810.iso 2018-11-24 17:41 1.4G  </p><p>CentOS-7-x86_64-LiveGNOME-1810.torrent 2018-12-03 15:03 28K  </p><p>CentOS-7-x86_64-LiveKDE-1810.iso 2018-11-24 17:53 1.8G  </p><p>CentOS-7-x86_64-LiveKDE-1810.torrent 2018-12-03 15:03 37K  </p><p>CentOS-7-x86_64-Minimal-1810.iso 2018-11-25 21:25 918M    </p><p>CentOS-7-x86_64-Minimal-1810.torrent 2018-12-03 15:03 36K  （最小化）</p><p>CentOS-7-x86_64-NetInstall-1810.iso   2018-11-25 16:21 507M    （网络安装）</p><p>CentOS-7-x86_64-NetInstall-1810.torrent</p><p>英语词汇:minimal(最小化)  install(安装) Everything（所有） torrent(种子)</p><p><img src="/medias/6.png" alt></p><p><img src="/medias/7.png" alt></p><p><img src="/medias/8.png" alt></p><p><img src="/medias/9.png" alt></p><p><img src="/medias/10.png" alt></p><p><img src="/medias/11.png" alt></p><p><img src="/medias/12.png" alt></p><p><img src="/medias/13.png" alt></p><p><img src="/medias/14.png" alt></p><p><img src="/medias/15.png" alt></p><p><img src="/medias/16.png" alt></p><p><img src="/medias/17.png" alt></p><p><img src="/medias/18.png" alt></p><p><img src="/medias/19.png" alt></p><p><img src="/medias/20.png" alt></p><p><img src="/medias/21.png" alt></p><p><img src="/medias/22.png" alt></p><p><img src="/medias/23.png" alt></p><p><img src="/medias/24.png" alt></p><p>1.开启配置好的虚拟机到如下界面</p><p><img src="/medias/25.png" alt></p><p>英语词汇：test（测试）  troubleshooting（故障排除）</p><p>1.选择Install CentOS 7，按Tab键输入net.ifnames=0 biosdevname=0然后按Enter键启动系统安装。net.ifnames=0修改网卡配置文件名称为eth0 eth1，biosdevname=0是修改网卡的设备名称。其中centos6.X 网卡名称默认 eth0 eth1 eth2 eth3。centos7.X 网卡名称默认 ens33 ens34 更改为eth0，方便管理 方便自动化。两种方法可以改：</p><p>1)   安装操作系统时可以更改 install centos7-&gt;tab键 空格后输入 net.ifnames=0 biosdevname=0</p><p>2)   安装完操作系统更改  以后再说</p><p><img src="/medias/26.png" alt></p><p>3 .设置安装过程中的语言，默认即可，点击Continue继续下一步。</p><p><img src="/medias/27.png" alt></p><p>英语词汇：quit（退出）  continue（继续） commit（提交）</p><p>4 .本地化设置系统日期、时间和CentOS7.5的语言支持（英文+简体中文）</p><p><img src="/medias/28.png" alt></p><p><img src="/medias/29.png" alt></p><p><img src="/medias/30.png" alt></p><p>5 .安装软件，安装位置默认是添加的磁盘，软件选择最小化安装以及相关组件</p><p><img src="/medias/31.png" alt></p><p><img src="/medias/32.png" alt></p><p>6 .在系统设置界面关闭KDUMP和安全，然后设置自定义分区和网络</p><p><img src="/medias/33.png" alt></p><p><img src="/medias/34.png" alt></p><p><img src="/medias/35.png" alt></p><p>7.选择自定义分区–标准分区，/boot-200M,swap-1500M,其余的全部给/分区，然后点击Done进行下一步</p><p><img src="/medias/36.png" alt></p><p><img src="/medias/37.png" alt></p><p><img src="/medias/38.png" alt></p><table><thead><tr><th>分区</th><th></th><th></th></tr></thead><tbody><tr><td>/boot</td><td>系统的文件（内核）</td><td>引导程序的地方</td></tr><tr><td>swap</td><td>交换分区</td><td>当系统内存不够用了 临时充当内存使用 在系统中可以临时创建</td></tr><tr><td>/</td><td>根分区</td><td>存放目录文件</td></tr></tbody></table><p>中小型互联网企业硬盘分区方案：1快盘 （ /boot  /）  其他所有硬盘（挂载）</p><p><img src="/medias/39.png" alt></p><p><img src="/medias/40.png" alt></p><p><img src="/medias/41.png" alt></p><p><img src="/medias/42.png" alt></p><p>8．设置网卡IP，点击configure进行配置，DNS可不设置。</p><p><img src="/medias/43.png" alt></p><p><img src="/medias/44.png" alt></p><p><img src="/medias/45.png" alt></p><p>9.全部设置完成之后点击开始安装并设置root用户密码，安装完成后点击Reboot重启系统。</p><p><img src="/medias/46.png" alt></p><p><img src="/medias/47.png" alt></p><p><img src="/medias/48.png" alt></p><p>10.配置VMware整个网络</p><p> 打开VMware,点击“编辑”，在下拉菜单中点击“虚拟网络编辑器”。</p><p><img src="/medias/49.png" alt></p><p>11.点击更改设置开启管理员权限</p><p><img src="/medias/50.png" alt></p><p>12.点击NAT模式，修改子网ip,子网掩码，点开NAT设置修改网关ip。</p><p><img src="/medias/51.png" alt></p><p><img src="/medias/52.png" alt></p><p>13.修改好全部了，点击确定</p><p><img src="/medias/53.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统介绍</title>
      <link href="/2020/05/01/linux-xi-tong-jie-shao/"/>
      <url>/2020/05/01/linux-xi-tong-jie-shao/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Linux简介-什么是操作系统"><a href="#1-Linux简介-什么是操作系统" class="headerlink" title="1 .Linux简介 什么是操作系统"></a>1 .Linux简介 什么是操作系统</h4><p>是一个人与计算机硬件的中介，操作系统简称OS，是计算机中必不可少的基础系统软件，是应用程序运行以及用户操作必备的基础环境支撑，是计算机系统的核心。操作系统就是处于用户与计算机系统硬件之间用于传递信息的系统程序软件。</p><h4 id="2-什么是Linux"><a href="#2-什么是Linux" class="headerlink" title="2 .什么是Linux?"></a>2 .什么是Linux?</h4><p>类似windows,Linux也是一个操作系统软件，Linux是一套开放源代码程序的、并可以自由传播的类Unix操作系统软件，多用户、多任务并且支持多线程多CPU的操作系统。</p><p>Linux系统主要被应用于服务端、嵌入式开发和个人PC桌面3大领域，其中服务器端领域是重中之重。</p><h4 id="3-Linux起源"><a href="#3-Linux起源" class="headerlink" title="3 .Linux起源"></a>3 .Linux起源</h4><p><img src="/medias/2.png" alt></p><p><img src="/medias/3.png" alt></p><p><img src="/medias/4.png" alt></p><p>一个蛋三个人，1869年贝尔实验室Unix诞生，谭宁邦写了minix,斯托曼写了自由软件(FSF)，并成立了自由软件基金会，而Linux系统诞生开始于名字：Linus Torvalds，1991年底他公开了Linux内核。</p><p>1）自由软件基金会FSF</p><p>FSF的主要项目是GNU项目，GNU全称为：GNU’s not unix,意思是‘‘GNU不是UNIX’’。GNU项目本身产生的主要软件包括：Emacs编辑软件、gcc编译软件、bash命令解释程序和编辑语言，以及gawk(GNU;s awk)等</p><p>2）GPL的知识</p><p>   GPL全称为General Public License,中文名为通用公共许可。</p><h4 id="4-Linux发行版本介绍"><a href="#4-Linux发行版本介绍" class="headerlink" title="4 .Linux发行版本介绍"></a>4 .Linux发行版本介绍</h4><p>Linuxd的发行商包括Slackware、Redhat、Debian、Fedora、TurboLinux、Mandrake、SUSE、Centos、Ubuntu、红旗、麒麟…….</p><p>1）Linux发行版本应用场景</p><p><img src="/medias/5.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机硬件与组成原理</title>
      <link href="/2020/05/01/ji-suan-ji-ying-jian-yu-zu-cheng-yuan-li/"/>
      <url>/2020/05/01/ji-suan-ji-ying-jian-yu-zu-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章：服务器硬件"><a href="#第一章：服务器硬件" class="headerlink" title="第一章：服务器硬件"></a>第一章：服务器硬件</h2><p>1.1服务器种类</p><p>  1）硬件服务器</p><p>  2）云服务器</p><p>1.2服务器外观分类</p><p>  1）机架式服务器</p><p>  2）塔式服务器(台式机差不多)</p><p>  3）刀片式服务器</p><p>1.3服务器品牌厂商</p><p>  笔记本: 联想 DELL HP 华硕 小米 华为</p><p>  互联网公司常用服务器品牌 DELL</p><p>1.4服务器的尺寸</p><p>服务器尺寸是按U计算的（U表示服务器的高度），1U服务器表示服务器的高度是4.45cm（1.75英寸）</p><p>1.5 DELL服务器的型号</p><table><thead><tr><th>主流应用时间段</th><th>1U的主流型号</th><th>2U的主流型号</th></tr></thead><tbody><tr><td>2010年以前</td><td>1850/1905</td><td>2580/2950</td></tr><tr><td>2010年～2013年</td><td>R410/R610</td><td>R710（11代服务器）</td></tr><tr><td>2014年～至今</td><td>R420/R430/R620/R630</td><td>R720/R730</td></tr></tbody></table><p>阿里巴巴：去IOE运维</p><p>BAT公司：百度 阿里巴巴 腾讯（Linux）</p><h2 id="第二章：服务器核心零部件"><a href="#第二章：服务器核心零部件" class="headerlink" title="第二章：服务器核心零部件"></a>第二章：服务器核心零部件</h2><p>服务器的硬件组成：硬盘 内存 电源 主板 散热风扇 光驱 独立显卡 独立声卡</p><h4 id="2-1电源"><a href="#2-1电源" class="headerlink" title="2.1电源"></a>2.1电源</h4><p>​    一个服务器可以插两个电源（主备，排除单点）</p><p>​    供电分为：AB双路供电 柴油发电机（电费贵）</p><h4 id="2-2处理器（CPU）"><a href="#2-2处理器（CPU）" class="headerlink" title="2.2处理器（CPU）"></a>2.2处理器（CPU）</h4><p>1）CPU处理器相当于人体的大脑，负责整个计算机的运算和控制，是服务器性能效率的最核心部件。</p><p>2）CPU可以按颗数、个数和路 来说</p><p>   服务器的CPU的个数一般为2～4颗，单个CPU是4核</p><p>   笔记本CPU：I3、I5和I7</p><p>   服务器CPU至强系列:E3、E5和E7     以上的叫 ：金牌、银牌和铜牌，其次金牌价格最贵</p><h4 id="2-3内存"><a href="#2-3内存" class="headerlink" title="2.3内存"></a>2.3内存</h4><p> 1）内存：临时存储数据的地方介于CPU和硬盘之间，运行的所有程序都会在内存中运行。</p><p> 2）程序：静态的内容 文档  视频  可执行的程序称为程序</p><p>​    进程：把静态的内容运行起来，系统的程序放在内存中运行称为进程</p><p>​    守护进程：持续不断的运行称为守护进程</p><p>3）什么情况内存数据会丢失？</p><p>   重启服务器、断电、程序问题和内存问题16G＞8G 内存不够用</p><p>4）面试题:</p><p>​     buffer 写入数据到内存中，这个数据的内存空间称为缓冲区，写缓冲。</p><p>​     cache 从内存读取数据，这个数据的内存空间称为缓存区，读缓存。</p><p>工作中案例：内存很少坏，接触不好时用橡皮把内存条擦一擦。</p><h4 id="2-4硬盘"><a href="#2-4硬盘" class="headerlink" title="2.4硬盘"></a>2.4硬盘</h4><table><thead><tr><th>分类</th><th>大小（R740）</th></tr></thead><tbody><tr><td>3.5英寸</td><td>服务器块数少 8块</td></tr><tr><td>2.5英寸</td><td>服务器块数多 16块</td></tr></tbody></table><p>磁盘接口分类：固态 机械 其中IDE、SCSI已经提出舞台。SATA(串口) SAS(SATA+SCSI结合) SSD，公司常用服务器：SAS、SATA</p><p>磁盘性能与价格：速度慢～快：SATA-SAS-SSD 价格便宜～贵：SATA-SAS-SSD</p><table><thead><tr><th></th><th>容量</th><th>转速</th></tr></thead><tbody><tr><td>SATA</td><td>1T、2T、4T</td><td>7.2K、10K</td></tr><tr><td>SAS</td><td>300G、600G、900G</td><td>7.2K、10K、15K</td></tr></tbody></table><p>其中SAS 900G容量（2.5英寸15K转速）</p><p>1）单位：1Byte=8bit，1KB=1024B，1MB=1024KB, 1GB=1024MB，1TB=1024GB, 1PB=1024TB, 1EB=1024PB, 1ZB=1024EB,公司常用的是GB和TB</p><p> 磁盘小结:接口分类 速度 公司常用的硬盘为：SAS 300G和600G转速为15K</p><p>IO：输入输出 IOPS：每秒的输入输出 1S=1000ms(毫秒)=1000000us（微妙）=1000000000ns(纳秒)</p><h4 id="2-5-raid卡（阵列卡）"><a href="#2-5-raid卡（阵列卡）" class="headerlink" title="2.5 raid卡（阵列卡）"></a>2.5 raid卡（阵列卡）</h4><p>1）阵列卡的磁盘组合方式很多种，每种组合方式的作用不同。</p><p>   raido方法1：两块600G硬盘组合1.2T 800G的文件损坏？彻底损坏，无法恢复</p><p>   raid1方法2：两块600G组合只能使用600G 备份 同时写两份数据 1份损坏了另一块正常使用。</p><p>服务器阵列卡磁盘安装步骤：硬盘→raid组合→服务器→装系统</p><h4 id="2-6-光驱："><a href="#2-6-光驱：" class="headerlink" title="2.6 光驱："></a>2.6 光驱：</h4><p>   建议淘汰光驱 给公司省钱，不过服务器一般都是网络安装，U盘安装，批量化自动化安装操作系统kickstart cobbler。光驱分别有哪几种，以下：</p><table><thead><tr><th>种类</th><th>大小</th></tr></thead><tbody><tr><td>CD光盘</td><td>750M（盘片寿命无限）</td></tr><tr><td>DVD光盘</td><td>4.7G</td></tr><tr><td>蓝光光盘</td><td>50G左右</td></tr></tbody></table><h4 id="2-7-远程管理卡"><a href="#2-7-远程管理卡" class="headerlink" title="2.7 远程管理卡"></a>2.7 远程管理卡</h4><p>远程管理卡有服务器自带的，也有独立的。</p><p>服务器自带的远程管理卡，可以关机、开机，但是看不到开关的显示过程。有了管理卡就可以快速恢复服务。大客户有KVM远程管理，特大客户会有自己的人员驻扎机房。</p><h4 id="2-8-主板"><a href="#2-8-主板" class="headerlink" title="2.8 主板"></a>2.8 主板</h4><p><img src="/medias/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务</title>
      <link href="/2020/05/01/ding-shi-ren-wu/"/>
      <url>/2020/05/01/ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-定时任务：某个时间做某件事情"><a href="#1-定时任务：某个时间做某件事情" class="headerlink" title="1  .定时任务：某个时间做某件事情"></a>1  .定时任务：某个时间做某件事情</h4><p>​    Linux中定时任务：</p><p>​      1）备份</p><p>​      2）tar  打包-发送到备份服务器</p><p>​      3）统计数据</p><h4 id="2-什么时间使用定时任务打包"><a href="#2-什么时间使用定时任务打包" class="headerlink" title="2  .什么时间使用定时任务打包?"></a>2  .什么时间使用定时任务打包?</h4><p>​      业务低谷期</p><h4 id="3-系统定时任务-针对所有用户"><a href="#3-系统定时任务-针对所有用户" class="headerlink" title="3  .系统定时任务 针对所有用户"></a>3  .系统定时任务 针对所有用户</h4><p>​     /etc/crontab      # 公司常用</p><p>用户定时任务</p><p>​     crontab -l   列出定时任务</p><p>​      crontab -e   编辑定时任务</p><p>   crontab -e /var/spool/cron/用户名 用户名：当前登录系统的用户</p><p>   crontab 类似visudo 语法检测的功能</p><h4 id="4-公司常用的定时任务配置文件"><a href="#4-公司常用的定时任务配置文件" class="headerlink" title="4  .公司常用的定时任务配置文件"></a>4  .公司常用的定时任务配置文件</h4><p>/etc/crontab</p><p>crontab -e = /var/spool/cron/用户名</p><p>日志文件</p><p>/var/log/cron</p><p>查看服务</p><p>centos6.x</p><p>/etc/init.d/crond status</p><p>/etc/init.d/crond stop 或者 start restart</p><p>centos7.x</p><p>systemctl status crond</p><h4 id="5-怎样设置定时任务"><a href="#5-怎样设置定时任务" class="headerlink" title="5  .怎样设置定时任务"></a>5  .怎样设置定时任务</h4><table><thead><tr><th>*</th><th>*</th><th>*</th><th>*</th><th>*</th></tr></thead><tbody><tr><td>分钟0-59</td><td>小时0-23</td><td>天 1-31</td><td>月 1-12</td><td>周 0-6 or 1-7</td></tr></tbody></table><p>口诀：什么时间做什么，然后再想下一次什么时候执行 什么时间，做什么事情 </p><p>例子1：每天的上午8点30分，来学校上车(go to school)</p><p>*  <em>   </em>  <em>   </em></p><p>分  时  日  月  周</p><p>格式：<em> </em> <em> </em> * 执行的命令</p><p>30 8 <em> </em> <em> go to school或者30 08 </em> <em> </em> go to school</p><p>例子2：每天晚上12点准时，回家自己开车（go to bed）</p><p>0 0 <em> </em> <em>     go to bed或者00 00 </em> <em> </em>    go to bed</p><p>* 代表：每     注意：<em> 中间必须有空格 </em> 和命令中间必须有空格</p><p>注意:星期几和日期不要同时加上 2020年2月29日 星期六 </p><p>* 12 <em> </em> *  # 12点的每分钟执行任务 12.01 12.02 12.03 12.04… 12.59</p><p>/n     每隔n分钟执行定时任务</p><p>每5分钟执行时间同步任务 须安装ntpdate</p><p><em>/5 </em> <em> </em> ntpdate ntp1.aliyun.com</p><p>13分钟 5分钟执行 15分钟执行定时任务</p><p>[root@alexlnb ~]#echo hostname &gt;&gt;<code>date +%F</code>.log</p><p>[root@alexlnb ~]#ll</p><p>-rw-r–r– 1 root root  9 Jan 2 11:58 2020-01-02.log</p><p>​    例子3：每5分钟执行一次时间同步 （重要 搭建时间服务器）</p><p>​       <em>/5 </em> <em> </em> * /usr/sbin/ntpdate ntp1.aliyun.com</p><p>   例子4：每天的上午7点到上午11点 每一个小时运行CMD命令</p><p>​     00 7-11 <em> </em> * cmd</p><p>​     （- 区间 从几点到几点）</p><p>   定时任务：备份、shell脚本</p><p>   例子5：7点半-8点25执行的话，要写两条</p><p>​     30 7 <em> </em> *</p><p>​     25 8 <em> </em> *</p><p>   例子6：7点 10点-12点的每小时执行cmd命令</p><p>00 7,10-12 <em> </em> * cmd</p><p>   例子7：每分钟 晚上11点,凌晨12点到早上7点 </p><p>*   23,00-07/1 <em> </em> * /application/nginx/sbin/nginx -s reload </p><h4 id="练习题：每分钟把自己的名字-追加到-oldboy-oldboy-txt"><a href="#练习题：每分钟把自己的名字-追加到-oldboy-oldboy-txt" class="headerlink" title="练习题：每分钟把自己的名字 追加到 /oldboy/oldboy.txt"></a>练习题：每分钟把自己的名字 追加到 /oldboy/oldboy.txt</h4><p>第一个里程碑-如何显示自己的名字 并放入文件中 用什么命令 </p><p>第二个里程碑-定时任务如何写 </p><p>第三个里程碑-测试-看看结果   tailf /oldboy/oldboy.txt</p><p>第四个里程碑-排错-遇到错误了</p><h4 id="6-什么是脚本？"><a href="#6-什么是脚本？" class="headerlink" title="6  .什么是脚本？"></a>6  .什么是脚本？</h4><p>  把可执行命令放入普通文本中就是脚本 使用 bash或sh执行运行此文本</p><p>  [root@alexlnb ~]#sh 1.sh</p><p>   /root</p><p>   [root@alexlnb ~]#bash 1.sh</p><p>   /root</p><p>例子1：以时间形式创建文件</p><p> [root@alexlnb ~]#echo <code>date +%F-%H-%M-%S</code>.txt</p><p>2020-01-03-10-34-52.txt</p><p>例子2：每天凌晨12点把1.sh的行注释</p><p>00 00 <em> </em> * sed -i ‘/1.sh/s/^/#/g’</p><p>定时任务中的命令 使用全路径执行</p><p>先which ntpdate命令是否在/usr/bin或/bin下</p><p>echo <code>which ntpdate</code> ntp1.aliyun.com</p><h4 id="7-定时任务中-命令或脚本结果-正确及错误-定向到黑洞-gt-dev-null-2-gt-amp-1-或追加到文件中-gt-gt-tmp-oldboy-txt-2-gt-amp-1"><a href="#7-定时任务中-命令或脚本结果-正确及错误-定向到黑洞-gt-dev-null-2-gt-amp-1-或追加到文件中-gt-gt-tmp-oldboy-txt-2-gt-amp-1" class="headerlink" title="7  .定时任务中-命令或脚本结果(正确及错误)定向到黑洞(&gt;/dev/null 2&gt;&amp;1)或追加到文件中 &gt;&gt;/tmp/oldboy.txt 2&gt;&amp;1"></a>7  .定时任务中-命令或脚本结果(正确及错误)定向到黑洞(&gt;/dev/null 2&gt;&amp;1)或追加到文件中 &gt;&gt;/tmp/oldboy.txt 2&gt;&amp;1</h4><p>1）如果定时任务没有定向到文件中或者空则会发送邮件给root</p><p>2）可发送邮件必须保证系统邮件服务开启状态（/var/spool/mail/root）</p><p>3）公司中邮件大部分服务器是关闭状态</p><p>4）发不出邮件憋得上 会产生临时小文件 每执行一次定时任务就会产生一个新的小文件</p><p>5）每个新的文件都会占用系统的inode号，如果inode满则硬盘无法存储新的内容</p><p>6）查看inode   命令：df -i</p><h4 id="8-如何解决定时任务的产生的小文件-postfix没有开启"><a href="#8-如何解决定时任务的产生的小文件-postfix没有开启" class="headerlink" title="8  .如何解决定时任务的产生的小文件 (postfix没有开启)"></a>8  .如何解决定时任务的产生的小文件 (postfix没有开启)</h4><p>1）开启邮件服务 (工作中很多服务器都是关闭状态)</p><p>2）把所有的定时任务的结果定向到空 或者定向到文件中</p><p>3）定时任务清空小文件</p><p>邮件的服务：systemctl stop postfix</p><p>root邮件的地址：/var/spool/mail/root</p><p>小文件的目录：/var/spool/postfix/maildrop/</p><h4 id="练习题：每天凌晨1点把-etc-目录-打包备份-tmp下目录并且要求每天的备份名字不同。"><a href="#练习题：每天凌晨1点把-etc-目录-打包备份-tmp下目录并且要求每天的备份名字不同。" class="headerlink" title="练习题：每天凌晨1点把/etc/目录 打包备份/tmp下目录并且要求每天的备份名字不同。"></a>练习题：每天凌晨1点把/etc/目录 打包备份/tmp下目录并且要求每天的备份名字不同。</h4><p>1.如何打包/etc目录</p><p>2.如何放在/tmp下</p><p>3.文件的名字要求不同 每天日期不同</p><p>4.在命令行测试 </p><p>5.写入脚本 并执行脚本测试 目录/server/scripts</p><p>6.把脚本写入定时任务 每分钟执行一次进行测试</p><p>7.OK后然后时间改为凌晨1点</p><p>1) cd /server/scripts/</p><p>2) vim tar_etc.sh</p><p>3)cd /</p><p>tar zcf /tmp/<code>date +%F</code> .tar.gz etc</p><p>4）sh tar_etc.sh</p><p>5) crontab -e</p><p>6) <em> </em> <em> </em> * sh /server/scripts/tar_etc.sh &amp;&gt;/dev/null</p><p>定时任务默认不指定文件的目录 在家目录中创建</p><h4 id="9-执行命令的过程"><a href="#9-执行命令的过程" class="headerlink" title="9  .执行命令的过程"></a>9  .执行命令的过程</h4><p>1）执行命令</p><p>2）查找命令的全路径 ls pwd</p><p>3）PATH 存放命令的路径，只有PATH变量中有的，才可在任意的路径执行命令</p><p>永久的要写入 /etc/profile</p><p>例子：PATH=’/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/oldboy:’</p><p>普通用户定时任务运行脚本的时候可以识别的PATH只有 /usr/bin和/bin</p><p>[root@alexlnb ~]#which ntpdate</p><p>/usr/sbin/ntpdate</p><p>[root@alexlnb ~]#which ifconfig</p><p>/usr/sbin/ifconfig</p><h3 id="第二章：定时任务的注意事项"><a href="#第二章：定时任务的注意事项" class="headerlink" title="第二章：定时任务的注意事项"></a>第二章：定时任务的注意事项</h3><p>  1）定时任务规则前面加注释，是给我们自己看</p><p>   2）使用脚本替代命令 （超过两条以上要写入脚本） ntpdate ntp1.aliyun.com &amp;&gt;/dev/null </p><p>   3）定时任务配置文件中不要出现% 比如时间 （date +%F） 写入脚本或转义</p><p>   4）运行脚本的时候使用/bin/sh或/bin/bash （如果没有则全路径直接写脚本， 脚本必须有执行权限）</p><p>   5）定时任务的结果必须输出到文件或者黑洞</p><p>   如果没有输出到文件或黑洞则 a. 邮件开启下 会发邮件</p><p>​                                                         b. 邮件关闭下 会生成小文件，占inode号</p><p>   6）避免不必要的程序命令输出 tar 相对路径</p><p>   7）定时任务中输出的文件必须是全路径 默认是在家目录</p><p>   8）定时任务只识别的变量是/usr/bin和/bin 使用全路径执行</p><p>​      a. PATH变量放了命令路径 </p><p>​      b. 可执行命令如何放入PATH</p><p>​         PATH=’/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</p><p>​      :/usr/local/test/bin’</p><p>​      所有的命令都是放在了程序目录的bin或者sbin目录下</p><p>​      c. java的服务全部使用全路径或者写入PATH</p><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><p>   创建一个以IP地址命名的目录 把IP目录放在/tmp下</p><p>   1）如何取IP地址</p><p>​     ifconfig eth0 </p><p>​         如何取第二行   </p><p>​      ifconfig eth0|awk ‘NR==2’</p><p>​      ifconfig eth0|sed -n ‘2p’</p><p>​         取IP地址</p><p>​      ifconfig eth0|sed -n ‘2p’|awk ‘{print $2}’</p><p>​      ifconfig eth0|sed -n ‘2p’|sed -r ‘s#^.<em>inet (.</em>) net.*$#\1#g’</p><p>   2）如何创建以IP命名的目录</p><p>​      a. mkdir /tmp/<code>ifconfig eth0|sed -n &#39;2p&#39;|awk &#39;{print $2}&#39;</code></p><p>​      b. 变量</p><p>​        IP=<code>ifconfig eth0|sed -n &#39;2p&#39;|awk &#39;{print $2}&#39;</code></p><p>​        mkdir /tmp/$IP</p><p>   3) 打包etc放入IP目录下</p><p>​      a. tar zcf /tmp/$IP/etc.tar.gz etc</p><p>​      b. tar zcf /tmp/<code>ifconfig eth0|sed -n &#39;2p&#39;|awk &#39;{print $2}&#39;</code>/etc.tar.gz etc</p><p>   4) 每天的名称不同</p><p>​     按照每天的时间格式</p><p>​     a.tar zcf /tmp/$IP/<code>date +%F</code>-etc.tar.gz etc</p><p>​     b.TIME=<code>date +%F</code></p><p>​       tar zcf /tmp/$IP/$TIME-etc.tar.gz etc</p><p>   5) 写入脚本 并测试脚本</p><p>​      [root@alexlnb /server/scripts]#cat etc.sh </p><p>​      IP=<code>ifconfig eth0|sed -n &#39;2p&#39;|awk &#39;{print $2}&#39;</code></p><p>​      TIME=<code>date +%F</code></p><p>​      mkdir -p /tmp/$IP</p><p>​      cd /</p><p>​      tar zcf /tmp/$IP/$TIME-etc.tar.gz etc</p><p>   6） 写入定时任务</p><p>​      * <em> </em> <em> </em> sh /server/scripts/etc.sh &amp;&gt;/dev/null 按照每分钟测试</p><p>​      00 00 <em> </em> * sh /server/scripts/etc.sh &amp;&gt;/dev/null  按照晚上12点</p><p>   7） 如何解决路径问题</p><p>​      a. 命令写全路径 /usr/sbin/ifconfig</p><p>​      b. PATH变量写入脚本</p><p>​         PATH=’/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin’</p><p>​         IP=<code>ifconfig eth0|sed -n &#39;2p&#39;|awk &#39;{print $2}&#39;</code></p><p>​      c. . /etc/profile</p><p>   8）定时任务书写规范</p><p>​      a. 先在命令行测试</p><p>​      b. 把正确的命令写入脚本</p><p>​        脚本中命令使用全路径 或者使用环境变量 PATH</p><p>​        脚本固定一个目录</p><p>​        不要输出不必要的信息 输入到文件或者空</p><p>​        tar打包到相对路径</p><p>​      c. 测试脚本</p><p>​        sh test.sh</p><p>​        -x 脚本的执行过程</p><p>​      d. 写入定时任务</p><p>​        crontab -e 编辑定时任务 语法检测功能</p><p>​         不要求结果的定向到空</p><p>​         命令使用绝对路径 脚本中可以使用PATH变量</p><p>​      e. 工作中定时任务使用的配置文件</p><p>​         1）crontab -e    /var/spool/cron/root</p><p>​         2）/etc/crontab</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>find 查找文件、打包压缩</title>
      <link href="/2020/05/01/find-cha-zhao-wen-jian-da-bao-ya-suo/"/>
      <url>/2020/05/01/find-cha-zhao-wen-jian-da-bao-ya-suo/</url>
      
        <content type="html"><![CDATA[<h4 id="1-find的格式："><a href="#1-find的格式：" class="headerlink" title="1 .find的格式："></a>1 .find的格式：</h4><p>​         find 在哪里找 -类型 f -名字 “国产”</p><p>​         find /tmp -type f  -name “test.txt”</p><p>​         -类型 -type</p><p>​          f   普通文件</p><p>​          d   目录</p><p>​          l   软链接</p><p>​          c   字符文件</p><p>​          s   套接文件</p><p>​          p   管道文件</p><p>​        find          查找方式 默认并集 默认 -and</p><p>​        find /tmp/ -type f    # 查找/tmp下所有的普通文件</p><p>​        find /tmp/ -type d    # 查找/tmp下所有的目录文件</p><p>find </p><p>​    -name            # 按名称查找 test.txt <em>.txt test.</em></p><p>​    -iname          # 查找到的内容不区分大小写 <em>.TXT </em>.txt “test.txt” “TEST.TXT”</p><p>​    -size              # 按照大小查找 -b -k -M -G +1M 大于1M -1G 小于1G的文件 并且关系 默认and</p><p>​    -maxdepth   # 按最大的深度等级查找 find ./ -maxdepth 1 -type f</p><p>​    -mtime          # 按照文件的修改时间查找modify</p><p>​    -mtime +n    （n是整数）</p><h4 id="2-5种查找方式："><a href="#2-5种查找方式：" class="headerlink" title="2 .  5种查找方式："></a>2 .  5种查找方式：</h4><p>​      1)按名称查找</p><p>​       find /tmp/ -type f -name “test.txt”</p><p>​      2)按文件的后缀查找 所有.txt结尾的文件</p><p>​       find /tmp/ -type f -name “*.txt”</p><p>​      3)不区分大小写搜索</p><p>​       find /tmp/ -type f -iname “*.txt” </p><p>​      4)按照大小查找 -size    单位：c b k M G</p><p>​      find ./ -type f -size +100k         # 查找当前目录 大小100k的文件</p><p>​      find ./ -type f -size -2M            # 查找当前目录 小于2M的文件</p><p>​      find -type f -size 2M                 # 查找1.xM - 2M 不包含1M</p><p>​      find -type f -size 5M                 # 查找4.xM - 5M 不包含4M</p><p>​      find ./ -type f -size +1M -size -3M  # 查找 大于1M 并且小于3M的文件 默认就是并集</p><p>​      find ./ -type f -size +1M -size -15M # </p><p>​      find / -type f -size +50M -size -100M</p><p>​      5)按时间查找</p><p>​      注意(find命令中不支持别名)</p><p>​      xargs     把前面的命令输出 甩到命令的最后面</p><p>​         -n       显示多少列</p><p>​      [root@alexlnb ~]#cat 2.txt|xargs -n2</p><p>​       1 2</p><p>​      3 4</p><p>​     5 6</p><p>​     7 8</p><h4 id="3-如何对批量查找到的文件进行操作"><a href="#3-如何对批量查找到的文件进行操作" class="headerlink" title="3 .  如何对批量查找到的文件进行操作"></a>3 .  如何对批量查找到的文件进行操作</h4><p>​      如何批量查看文件</p><p>​      find ./ -type f -size +1M|xargs ls -lh</p><p>​      1）如何移动</p><p>​      方法1</p><p>​      find ./ -type f -size +1M|xargs -i mv {} /tmp</p><p>​      方法2</p><p>​      mv <code>find /tmp/ -type f -name &quot;7.txt&quot;</code> .</p><p>​      方法3</p><p>​      find /tmp/ -type f -name 8.txt -exec mv {} /opt \;</p><p>​      2）如何删除</p><p>​      方法1：find /tmp/ -type f -name “5.txt”|xargs rm</p><p>​      方法2：\rm <code>find ./ -type f -name 7.txt</code></p><p>​      方法3：find ./ -type f -name “3.txt” -exec rm {} \;</p><p>​      3）如何复制</p><p>​      方法1：find /tmp/ -type f -name “6.txt”|xargs -i cp {} .</p><p>​      方法2：cp <code>find /tmp/ -type f -name 8.txt</code> .    </p><p>​      方法3：find ./ -type f -name “4.txt” -exec cp {} /tmp \;</p><p>​      4）序列匹配</p><p>​      find /tmp -type f -name ‘[1-8].txt’    # 匹配1-8以.txt结尾的文件 不能使用{}</p><p>面试题：</p><p>   find ./ -type f -mtime +7              # 查找修改时间为7天前的文件</p><p>   find ./ -type f -mtime -7              # 查找修改时间为7天内的文件</p><p>   find ./ -type f -mtime 0                # 查找修改时间为1天内的文件 当前时间算 24小时内</p><p>   find ./ -type f -mtime 1               # 查找修改时间为2天内的文件 48小时内</p><p>   find ./ -type f -mtime +7 -mtime -30 # 查找 7天前 30天内修改过的文件</p><h3 id="第二章：打包压缩"><a href="#第二章：打包压缩" class="headerlink" title="第二章：打包压缩"></a>第二章：打包压缩</h3><p>​    tar      筐子                     香蕉   苹果       梨</p><p>​    tar   -zcvf all.tar.gz    all.txt   1.txt   test.txt</p><p>​     z                      使用gzip压缩</p><p>​     c （create） 创建</p><p>​    v                      显示过程（verbose）</p><p>​    f                        指定压缩文件</p><p>​     简写 -zcf</p><p>解压：tar xf 解包名</p><p>​            tar xf 解包名 -C  指定解压到哪里</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum 源、selinux 防火墙、firewalld 防火墙、字符集</title>
      <link href="/2020/05/01/yum-yuan-selinux-fang-huo-qiang-firewalld-fang-huo-qiang-zi-fu-ji/"/>
      <url>/2020/05/01/yum-yuan-selinux-fang-huo-qiang-firewalld-fang-huo-qiang-zi-fu-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：yum-源"><a href="#第一章：yum-源" class="headerlink" title="第一章：yum 源"></a>第一章：yum 源</h3><h4 id="1-yum源-如何安装软件-yum-y-install-package-name"><a href="#1-yum源-如何安装软件-yum-y-install-package-name" class="headerlink" title="1 .yum源 如何安装软件 yum -y install package.name"></a>1 .yum源 如何安装软件 yum -y install package.name</h4><p>  默认的yum仓库</p><p>windows安装软件的方法?</p><p>  1)下载.exe安装程序</p><p>  2)用360软件仓库安装</p><p>centos的安装软件的方法</p><p>  1)yum 直接通过软件仓库进行查找并下载安装</p><p>  2)rpm 先下载.rpm结尾的软件包后 使用rpm -ivh进行安装</p><p>如何查看当前默认的软件仓库?</p><p>  centos默认的仓库是系统随机生成的</p><p>  仓库有很多 阿里云 清华云 百度云 163 jd云 腾讯云 每所大学都有自己的仓库 等</p><p>  yum repolist          # 查看当前使用的软件仓库</p><p>  * base: mirrors.cn99.com      # 网易</p><p>  * extras: mirror.jdcloud.com</p><p>  * updates: mirrors.cn99.com</p><p>  repolist: 11,399           # 当前仓库中有多少个可用的软件包</p><p>  rpm -qa             # 查看所有已安装过的软件</p><p>  yum list            # 查看这个仓库里有什么软件可安装</p><h4 id="2-更改默认的yum源为阿里云"><a href="#2-更改默认的yum源为阿里云" class="headerlink" title="2 .更改默认的yum源为阿里云"></a>2 .更改默认的yum源为阿里云</h4><p>  第一个步骤</p><p>  阿里云仓库的地址如何获取?</p><p>  opsx.alibaba.com -&gt; 点centos系统</p><p>  备份原有的默认的仓库 默认的仓库目录 /etc/yum/repos.d/</p><p>  mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p><p>  第二个步骤</p><p>  下载新的仓库到我们本地</p><p>  wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p>  curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p>  下载后别忘记检查</p><p>  怎么办当把默认的仓库移动走了 现在要使用wget下载新的仓库 发现没有wget软件?</p><p>  把移动走的仓库在移回来</p><p>  或者使用curl命令进行下载新的仓库</p><p>  第三个步骤</p><p>  yum makecache 可忽略不使用</p><h4 id="3-yum源问题解决"><a href="#3-yum源问题解决" class="headerlink" title="3 .yum源问题解决"></a>3 .yum源问题解决</h4><p>​     是否能联网</p><p>​     yum clean all      清空缓存</p><p>​     网络慢导致无法安装软件</p><p>  扩展的额外的yum仓库</p><p>  yum -y install sl cowsay</p><h4 id="4-epel-EPEL-Extra-Packages-for-Enterprise-Linux-企业额外的安装包"><a href="#4-epel-EPEL-Extra-Packages-for-Enterprise-Linux-企业额外的安装包" class="headerlink" title="4 .epel EPEL (Extra Packages for Enterprise Linux) 企业额外的安装包"></a>4 .epel EPEL (Extra Packages for Enterprise Linux) 企业额外的安装包</h4><p>  1)先备份原有epel源 默认系统不会存在的 直接执行第二个步骤</p><p>​     2)wget -O /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/epel-7.repo</a></p><p>  centos6 大部分都自动补全 不需要安装命令</p><p>  centos7 自动补全的命令 安装tab</p><p>  自动补全命令 bash-completion    # 基本的一些命令可自动补全</p><p>  高级补全命令 bash-completion-extras  # 第三方安装的命令可自动补全 大部分</p><p>  注意中英文问题 “” “” ·· `` ‘’ ‘’</p><h3 id="第二章：selinux-防火墙"><a href="#第二章：selinux-防火墙" class="headerlink" title="第二章：selinux 防火墙"></a>第二章：selinux 防火墙</h3><p>  <strong>公司和测试环境必须关闭 centos6配置相同 美国国家安全局 NSA</strong></p><h4 id="1-如何查看当前selinux是否开启"><a href="#1-如何查看当前selinux是否开启" class="headerlink" title="1 .如何查看当前selinux是否开启"></a>1 .如何查看当前selinux是否开启</h4><p>​     getenforce</p><h4 id="2-如何临时关闭selinux"><a href="#2-如何临时关闭selinux" class="headerlink" title="2.如何临时关闭selinux"></a>2.如何临时关闭selinux</h4><p>​     setenforce Permissive</p><p>​     setenforce 0</p><h4 id="3-永久关闭selinux-需要重启"><a href="#3-永久关闭selinux-需要重启" class="headerlink" title="3.永久关闭selinux 需要重启"></a>3.永久关闭selinux 需要重启</h4><p>​    /etc/selinux/config</p><p>​     enforcing          # 开启状态 运行中</p><p>​      permissive        # 关闭状态但是会提示警告信息</p><p>​      disabled           # 完全关闭状态</p><p>​      SELINUX=disabled</p><h4 id="4-Linux更改配置文件的习惯"><a href="#4-Linux更改配置文件的习惯" class="headerlink" title="4 .Linux更改配置文件的习惯"></a>4 .Linux更改配置文件的习惯</h4><p>​     1)更改前先备份配置文件</p><p>​      cp name.conf name.conf.bak</p><p>​     2)更改配置文件不要在原有的内容上更改 不好恢复</p><p>​     把之前的内容注释掉 复制一行进行更改新的内容</p><p>​     3)所有测试环境需要关闭</p><h3 id="第三章：firewalld-关闭防火墙"><a href="#第三章：firewalld-关闭防火墙" class="headerlink" title="第三章：firewalld 关闭防火墙"></a>第三章：firewalld 关闭防火墙</h3><h4 id="1-firewalld-关闭防火墙"><a href="#1-firewalld-关闭防火墙" class="headerlink" title="1 .firewalld 关闭防火墙"></a>1 .firewalld 关闭防火墙</h4><p>   centos6.x iptables</p><p>   centos7.x firewalld</p><h4 id="1-）如何查看当前防火墙是否运行"><a href="#1-）如何查看当前防火墙是否运行" class="headerlink" title="1 ）如何查看当前防火墙是否运行"></a>1 ）如何查看当前防火墙是否运行</h4><p>​    systemctl status firewalld</p><p>​    中间的常用命令</p><p>​      start      开启</p><p>​      stop      停止</p><p>​      restart     重启</p><p>​      reload     加载</p><p>​      status     状态</p><p>​    systemctl is-active firewalld         # 查看防火墙运行状态</p><h4 id="2-如何临时关闭防火墙"><a href="#2-如何临时关闭防火墙" class="headerlink" title="2)如何临时关闭防火墙"></a>2)如何临时关闭防火墙</h4><p>​    systemctl stop firewalld</p><h4 id="3-永久关闭防火墙"><a href="#3-永久关闭防火墙" class="headerlink" title="3)永久关闭防火墙"></a>3)永久关闭防火墙</h4><p>​    如何查看是否开机禁止启动防火墙</p><p>​    systemctl status firewalld.service 第二行显示 enabled 开机自动启动</p><p>​    [root@alexlnb ~]#systemctl is-enabled firewalld.service </p><p>​    enabled</p><p>​    禁止启动</p><p>​    systemctl disable firewalld.service</p><h4 id="2-在什么情况下开启防火墙-Iptables-firewalld"><a href="#2-在什么情况下开启防火墙-Iptables-firewalld" class="headerlink" title="2 .在什么情况下开启防火墙 Iptables firewalld"></a>2 .在什么情况下开启防火墙 Iptables firewalld</h4><p>​     1)在工作中服务器有公网的IP地址的 需要开启</p><p>​     2)内网环境 测试环境 没有公网IP 不能直接访问的服务器 不需要开启</p><p>​     3)公司网站流量大 高并发 不需要开防火墙 需要使用硬件防火墙</p><p>   在公司中常用iptables</p><p>   iptables-save 查看centos6 centos7 防火墙是否开启 如果列出规则说明开启 没有则是关闭状态</p><h4 id="3-如果centos7使用iptables"><a href="#3-如果centos7使用iptables" class="headerlink" title="3 .如果centos7使用iptables"></a>3 .如果centos7使用iptables</h4><p>   1.把firewalld 永久+临时关闭</p><p>   2.安装iptables-services</p><p>   centos6 iptables的关闭和禁止启动</p><p>​      centos7                  centos6</p><p>sytemctl stop firewalld       /etc/init.d/iptables stop | service iptables stop</p><p>systemctl disable firewalld    chkconfig iptable off</p><p>systemctl status firewalld     /etc/init.d/iptables status   # 查看状态</p><h3 id="第四章：字符集"><a href="#第四章：字符集" class="headerlink" title="第四章：字符集"></a>第四章：字符集</h3><p> 1 .什么是字符集</p><p>​    各种语言在计算机中表达方式</p><p>​    UTF-8  万国码</p><p>​    GBK    国标扩展</p><h4 id="1-如何查看系统默认的字符集-centos7"><a href="#1-如何查看系统默认的字符集-centos7" class="headerlink" title="1)如何查看系统默认的字符集 centos7"></a>1)如何查看系统默认的字符集 centos7</h4><p>​    PS1</p><p>​    LANG</p><p>​    [root@alexlnb ~]#echo $LANG</p><p>​    en_US.UTF-8</p><p>​    [root@alexlnb ~]##语言.编码</p><h4 id="2-临时修改默认的字符集"><a href="#2-临时修改默认的字符集" class="headerlink" title="2)临时修改默认的字符集"></a>2)临时修改默认的字符集</h4><p>​    LANG=’zh_CN.UTF-8’</p><h4 id="3-永久修改字符集"><a href="#3-永久修改字符集" class="headerlink" title="3)永久修改字符集"></a>3)永久修改字符集</h4><p>​    /etc/locale.conf</p><p>​    LANG=”en_US.UTF-8”</p><p>​    source /etc/locale.conf 相当于帮我们执行了export LANG=”zh_CN.UTF-8”</p><p>​    source 或者 . 都是让配置文件即时生效 对环境变量相关的配置文件生效</p><h4 id="4-修改配置文件-必须source-或者-临时生效"><a href="#4-修改配置文件-必须source-或者-临时生效" class="headerlink" title="4)修改配置文件 必须source 或者. 临时生效"></a>4)修改配置文件 必须source 或者. 临时生效</h4><p>   localectl set-locale LANG=’zh_CN.UTF-8’   # 直接覆盖配置文件</p><p>   source /etc/locale.conf               # 永久生效</p><h4 id="2-centos6修改字符集"><a href="#2-centos6修改字符集" class="headerlink" title="2 .centos6修改字符集"></a>2 .centos6修改字符集</h4><p>​     1)临时修改</p><p>​     echo $LANG</p><p>​     LANG=’zh_CN.UTF-8’</p><p>​    2)永久修改字符集</p><p>​     /etc/sysconfig/i18n</p><p>​     source /etc/sysconfig/i18n</p><p>   解决乱码方式 xshell和系统默认的UTF-8</p><p>   系统中的字符集必须和连接工具的字符集相同</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP11种状态和IP地址</title>
      <link href="/2020/05/01/tcp11-chong-zhuang-tai-he-ip-di-zhi/"/>
      <url>/2020/05/01/tcp11-chong-zhuang-tai-he-ip-di-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：TCP11种状态"><a href="#第一章：TCP11种状态" class="headerlink" title="第一章：TCP11种状态"></a>第一章：TCP11种状态</h3><p>   客户端&gt;未连接前的状态 closed 初始化 </p><p>   服务端&gt;未连接前的状态 LISTEN</p><h4 id="1-TCP三次握手"><a href="#1-TCP三次握手" class="headerlink" title="1  .TCP三次握手"></a>1  .TCP三次握手</h4><p>客户端发送建立连接请求           closed -&gt; syn_sent 同步已发送状态</p><p>服务器端接受建立连接 发送syn请求    LISTEN -&gt; syn_rcvd 同步状态</p><p>客户端收到请求再次发送确认        syn_sent -&gt; established 建立连接</p><p>服务器收到客户端的确认后          syn_rcvd -&gt; established 建立连接</p><h4 id="2-TCP四次挥手"><a href="#2-TCP四次挥手" class="headerlink" title="2  .TCP四次挥手"></a>2  .TCP四次挥手</h4><p>客户端主动发起fin断开请求      established -&gt; FIN_WAIT-1 等待1状态</p><p>服务端发送ack确认信息         established -&gt; CLOSE-WAIT 等待状态</p><p>客户端收到服务端的ack确认信息  FIN_WAIT-1 -&gt; FIN_WAIT-2等待2状态</p><p>服务端发送FIN请求断开连接    CLOSE-WAIT -&gt; LAST-ACK 最后确认状态</p><p>客户端收到FIN请求后发送确认  FIN_WAIT-2 -&gt; TIME_WAIT    等待时间 </p><p>​                         TIME_WAIT  -&gt; CLOSED      关闭状态</p><p>服务端收到了客户端确认后     LAST-ACK  -&gt; CLOSED     关闭状态</p><h4 id="3-因特网层协议"><a href="#3-因特网层协议" class="headerlink" title="3  .因特网层协议"></a>3  .因特网层协议</h4><pre><code>  1）ICMP             Internet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</code></pre><p>2）RARP       反向地址转换协议</p><p>ARP          地址解析协议,是根据IP地址获取物理地址的一个TCP/IP协议。作用：有效的避免广播风暴的产生</p><p>​     动态ARP：自动完善ARP表信息,会定时更新ARP条目,自动更新ARP表时会消耗服务器性能,适用于主机更换频繁网络。</p><p>​     静态ARP：手工配置ARP表信息,不会实时更新ARP条目，节省服务器性能，适用于主机更换不频繁网络。</p><p>  ARP 物理地址解析协议</p><p>​     查看arp缓存</p><p>​     arp -a</p><h3 id="第二章：IP地址"><a href="#第二章：IP地址" class="headerlink" title="第二章：IP地址"></a>第二章：IP地址</h3><h4 id="1-IP地址格式"><a href="#1-IP地址格式" class="headerlink" title="1  .IP地址格式"></a>1  .IP地址格式</h4><p>常用的IPv4中规定，IP地址长度为32位二进制，在表示时，一般将32位地址拆分为4个8位二进制，再转为4个十进制数表示，每个数字之间用点隔开，如127.0.0.1（localhost），这种描述方式被称为“点-数表示法”。</p><p>公网IP地址 国内唯一 全球唯一 任意的可联网地点都可连接公网IP地址</p><p>私网IP地址 局域网内唯一 多个局域网可使用同一私网IP 解决地址枯竭问题</p><p>私网IP地址如果想上网 通过NAT地址转换 把私网IP地址转换成公网IP地址</p><p>IP地址层次：分为网络号和主机号两个层次。网络号表示主机所属网络，主机号表示主机本身。网络号与主机号的位数与IP地址分类有关。</p><p><img src="/medias/78.png" alt></p><h4 id="2-IP地址的分配"><a href="#2-IP地址的分配" class="headerlink" title="2  .IP地址的分配"></a>2  .IP地址的分配</h4><p>IP地址分配的基本原则是：要为同一网络（子网、网段）内不同主机分配相同的网络号，不同的主机号。</p><h4 id="3-IP地址的类型"><a href="#3-IP地址的类型" class="headerlink" title="3  .IP地址的类型"></a>3  .IP地址的类型</h4><p>1）内部私有地址：</p><p>A类 10.0.0.0–10.255.255.255</p><p>B类 172.16.0.0–172.31.255.255</p><p>C类 192.168.0.0–192.168.255.255</p><p>2）常见IP地址分类：</p><p>  A类 第一段为网络号，后三段为主机号，最高位必须为‘0’</p><p>  01111111 11111111 11111111 11111111</p><p>A类IP地址的子网掩码为255.0.0.0，每个网络支持的最大主机数为256的3次方-2=16777212台。</p><p>  B类 第一、二段为网络号，后二段为主机号，最高位必须为‘10’</p><p>  10111111 11111111 11111111 11111111</p><p>B类IP地址的子网掩码为255.255.0.0，每个网络支持的最大主机数为256的2次方-2=65534台。</p><p>  C类 第一、二、三段为网络号，后一段为主机号，最高位必须为‘110’</p><p>  11011111 11111111 11111111 11111111</p><p>C类IP地址的子网掩码为255.255.255.0，每个网络支持的最大主机数为256-2=254台</p><p>D类地址用于多点广播，最高位必须是‘1110’</p><p>E类IP地址以“11110”开始，为以后使用保留</p><h4 id="4-子网掩码"><a href="#4-子网掩码" class="headerlink" title="4  .子网掩码"></a>4  .子网掩码</h4><p>1）子网掩码又叫网络掩码、地址掩码</p><p>2）子网掩码的重要作用：就是将某个IP地址划分成网络地址和主机地址两部分。</p><p>3）子网掩码的位数就是网络的位数。A类网络的网络位数是8位，子网掩码就是255.0.0.0，B类网络的网络位数是16位，子网掩码是255.255.0.0，C类是24位，255.255.255.0。</p><p>例子：假设两个IP地址分别是172.20.0.18和172.20.1.16，子网掩码都是255.255.255.0。</p><p>我们可以知道两者的网络标识分别是172.20.0和172.20.1，无法直接通信，也就无法PING通。要想能相互通信，需要将子网掩码改成255.255.0.0</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三剑客老大awk</title>
      <link href="/2020/05/01/san-jian-ke-lao-da-awk/"/>
      <url>/2020/05/01/san-jian-ke-lao-da-awk/</url>
      
        <content type="html"><![CDATA[<h4 id="1-1-awk的格式"><a href="#1-1-awk的格式" class="headerlink" title="1.1 awk的格式"></a>1.1 awk的格式</h4><p>   awk ‘找谁{干啥}’ passwd.bak</p><p>   awk ‘匹配{print }’ file</p><h4 id="1-2-awk变量"><a href="#1-2-awk变量" class="headerlink" title="1.2 awk变量"></a>1.2 awk变量</h4><p>awk把所有的字符当做变量 加上双引号视为字符串</p><p>   NR    行号</p><p>   1)文件的标准输入</p><p>​    awk ‘{print }’ file</p><p>   2)其他命令的标准输出</p><p>​    cat passwd.bak |awk ‘{}’</p><h4 id="1-3-awk取行"><a href="#1-3-awk取行" class="headerlink" title="1.3 awk取行"></a>1.3 awk取行</h4><p>  ==   等于</p><p>   &gt;    大于</p><p>   &lt;    小于</p><p> &gt;=   大于等于</p><p> &lt;=   小于等于</p><p> !=   不等于</p><p> &amp;&amp;   并且</p><p>   ||    或者</p><p> 例子1：取文件的第一行</p><p>[root@alexlnb ~]#awk ‘NR==1’ /etc/passwd</p><p> 例子2：取文件的第一行到第五行</p><p>​     [root@alexlnb ~]#awk ‘NR&lt;6’ /etc/passwd</p><p> 例子3：取大于16的行</p><p>​      [root@alexlnb ~]#awk ‘NR&gt;16’ /etc/passwd</p><p> 例子4：取大于等于1的行</p><p>​        awk ‘NR&gt;=1’ test.txt</p><p> 例子5：小于等于1的行</p><p>​        awk ‘NR&lt;=1’ test.txt</p><p> 例子6: 查找行数大于1并且行数小于4</p><p>​      [root@alexlnb ~]#awk ‘NR&gt;1&amp;&amp;NR&lt;4’ test.txt</p><p> 例子7：查找行数等于1或者等于10的</p><p>​      [root@alexlnb ~]#awk ‘NR==1||NR==10’ test.txt</p><p> 例子8：取反  （取除了第一行的其他行）</p><p>​       awk ‘NR!=1’ test.txt</p><h4 id="1-4-awk取列-（-几-表示第几列）"><a href="#1-4-awk取列-（-几-表示第几列）" class="headerlink" title="1.4 awk取列 （$几 表示第几列）"></a>1.4 awk取列 （$几 表示第几列）</h4><p> （awk分隔符 默认空格和tab键分隔）</p><p>  例子1：取第一列</p><p>​     [root@alexlnb ~]#awk ‘{print $1}’ 1.txt</p><p>  例子2：同时取出第一列和第三列 中间以空格分开 或者tab键</p><p>​       第一种：awk ‘{print $1” “$3}’ 1.txt</p><p>​       第二种：awk ‘{print $1,$3}’ 1.txt</p><p>​       第三种：awk ‘{print $1”\t”$3}’ 1.txt</p><p>效果特殊：[root@alexlnb ~]#awk ‘{print “第一列 “$1”\t第三列 “$3}’ 1.txt</p><p>​         第一列 oldboy       第三列 test</p><p>​         第一列 lizhenya    第三列 oldboy</p><p>​         第一列 1                  第三列 3</p><p>​         第一列 5                  第三列 7</p><p>​      第四种：awk ‘{print $1”\n”$3}’ 1.txt</p><h4 id="1-5-NF-（awk会把每一列的总列数赋值给NF）（NF-awk的总列数）"><a href="#1-5-NF-（awk会把每一列的总列数赋值给NF）（NF-awk的总列数）" class="headerlink" title="1.5 NF （awk会把每一列的总列数赋值给NF）（NF  awk的总列数）"></a>1.5 NF （awk会把每一列的总列数赋值给NF）（NF  awk的总列数）</h4><p>​     例子1：输出每一行总共有多少列</p><p>[root@alexlnb ~]#awk ‘{print NF}’ 1.txt</p><p>​    例子2：使用$NF取最后一列</p><p>​         [root@alexlnb ~]#awk ‘{print $NF}’ 1.txt</p><h4 id="1-6-F-指定分隔符-可以是任意的"><a href="#1-6-F-指定分隔符-可以是任意的" class="headerlink" title="1.6 -F 指定分隔符 可以是任意的"></a>1.6 -F 指定分隔符 可以是任意的</h4><p>​       第一种：awk -F “:” ‘{print $NF}’ test.txt （-F后面双引号里符号可变）</p><p>​       第二种：awk -F: ‘{print $NF}’ test.txt （-F后面的符号可变）</p><h3 id="第二章：awk-BEGIN和END模块"><a href="#第二章：awk-BEGIN和END模块" class="headerlink" title="第二章：awk BEGIN和END模块"></a>第二章：awk BEGIN和END模块</h3><h4 id="2-1-格式"><a href="#2-1-格式" class="headerlink" title="2.1 格式"></a>2.1 格式</h4><p>  awk ‘BEGIN{动作}’</p><p>   BEGIN   在读取文件前做的动作</p><p>   END    在执行完文件后做的动作</p><p>动作格式：print 字符串</p><p>​         print 计算</p><p>  例子1：[root@alexlnb ~]#awk ‘BEGIN{print “准备开始上课”}’</p><p>​        准备开始上课</p><p>  例子2：awk ‘BEGIN{print “以下是passwd的内容”}{print}END{print “内容打印完成”}’ test.txt</p><p>​     以下是passwd的内容</p><p>​      root:x:0:0:root:/root:/bin/bash</p><p>​     mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</p><p>​     operator:x:11:0:operator:/root:/sbin/nologin</p><p>​     内容打印完成</p><p>  例子3：文件有总共2行就输出2个OK</p><p>[root@alexlnb ~]#awk ‘{print “OK”}’ /etc/hosts</p><p>​       OK</p><p>​       OK</p><p>  例子4：’BEGIN{print 10+10}’ 可做计算</p><p>[root@alexlnb ~]#awk ‘BEGIN{print 10+10}’</p><p>​       20</p><p>  例子5：前面1+1是2，文件总共2行 2个OK END后面Game Over</p><p>[root@alexlnb ~]# awk ‘BEGIN{print 1+1} {print “ok”} END {print “Game Over”}’ /etc/hosts</p><p>​     2</p><p>​     ok</p><p>​     ok</p><p>​     Game Over</p><h3 id="第三章：awk匹配"><a href="#第三章：awk匹配" class="headerlink" title="第三章：awk匹配"></a>第三章：awk匹配</h3><p>例子1：匹配字符串</p><p>  [root@alexlnb ~]#awk ‘/root/‘ test.txt</p><p>例子2：查找以root开头的行 （两种可找）</p><p>​     [root@alexlnb ~]#awk ‘/^root/‘ test.txt</p><p>   [root@alexlnb ~]#awk ‘/^root/{print $0}’ test.txt</p><p>例子3：查找以root开头的行 并打印第一列和最后一列</p><p>​     [root@alexlnb ~]#awk -F: ‘/^root/{print $1,$NF}’ test.txt</p><h3 id="第四章：awk数字比较"><a href="#第四章：awk数字比较" class="headerlink" title="第四章：awk数字比较"></a>第四章：awk数字比较</h3><p>​    例子1：查找第一列大于2的行</p><p>​               awk ‘$1&gt;2’ 2.txt</p><p>   例子2：只找出第一列大于2的列</p><p>​              awk ‘$1&gt;2{print $1}’ 2.txt</p><h3 id="第五章：awk查看行号"><a href="#第五章：awk查看行号" class="headerlink" title="第五章：awk查看行号"></a>第五章：awk查看行号</h3><p>   查看全部行号：awk ‘{print NR,$0}’ test.txt</p><p>   例子1：NF-1是表示行号减1  $NF表示最后一列</p><p>[root@alexlnb ~]#awk ‘{print NF-1,$NF}’ 2.txt</p><p>   例子2：取出倒数第二列</p><p>awk ‘{print $(NF-1)}’ 2.txt</p><p>   例子3：以:/分隔取出第一列、二列、三列的字符</p><p>[root@alexlnb ~]#awk -F “:/“ ‘{print $1,$2,$3}’ passwd.bak </p><p>​         root:x:0:0:root root bin/bash</p><p>   例子4：以  | 或者  取出第一列、二列、三列的字符</p><p>​      [root@alexlnb ~]#awk -F “:|/“ ‘{print $1,$2,$3}’ passwd.bak </p><p>​      root x 0</p><p>   例子5：以”[:/]+”取出第一列、二列、三列、六列的字符</p><p>[root@alexlnb ~]#awk -F “[:/]+” ‘{print $1,$2,$3,$6}’ passwd.bak </p><p>​      root x 0 root</p><p>   例子6：统计行号</p><p>[root@alexlnb ~]#awk -F: ‘$3&gt;0&amp;&amp;$3&lt;1000’ test.txt|wc -l</p><h3 id="第六章：awk正则匹配"><a href="#第六章：awk正则匹配" class="headerlink" title="第六章：awk正则匹配"></a>第六章：awk正则匹配</h3><h4 id="6-1-以-开头的行"><a href="#6-1-以-开头的行" class="headerlink" title="6.1 以^开头的行"></a>6.1 以^开头的行</h4><p>​      awk ‘/^r/‘ /etc/passwd</p><h4 id="6-2-按照列数匹配"><a href="#6-2-按照列数匹配" class="headerlink" title="6.2 按照列数匹配"></a>6.2 按照列数匹配</h4><p>​      1）[root@alexlnb ~]#awk -F: ‘$1 ~ /^r/‘ /etc/passwd</p><p>​    2）[root@alexlnb ~]#awk -F: ‘$NF ~ /^\/b/‘ /etc/passwd</p><p>​      root:x:0:0:root:/root:/bin/bash</p><p>​      sync:x:5:0:sync:/sbin:/bin/sync</p><p>​      www:x:1000:1000::/home/www:/bin/bash</p><p>​      lyz:x:1001:1001::/home/lyz:/bin/bash</p><p>​    3）[root@alexlnb ~]#awk -F “[:/]+” ‘$NF ~ /^b/‘ /etc/passwd</p><p>​      root:x:0:0:root:/root:/bin/bash</p><p>​      www:x:1000:1000::/home/www:/bin/bash</p><p>​      lyz:x:1001:1001::/home/lyz:/bin/bash</p><p>​    4）匹配以in结尾的行</p><p>​      awk -F “[:/]+” ‘$NF ~ /in$/‘ /etc/passwd</p><p>​    5）取反 !~</p><p>​      [root@alexlnb <del>]#awk -F “[:/]+” ‘$NF !</del> /in$/‘ /etc/passwd</p><p>​    6）按照日志的时间匹配</p><p>​      重要：awk ‘/Dec 25 00:01:01/,/Dec 25 07:01:01/‘ /var/log/messages</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文件类型、硬软链接</title>
      <link href="/2020/05/01/linux-wen-jian-lei-xing-ying-ruan-lian-jie/"/>
      <url>/2020/05/01/linux-wen-jian-lei-xing-ying-ruan-lian-jie/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>33575001</th><th>-</th><th>rw-r–r–</th><th>.</th><th>1</th><th>root</th><th>root</th><th>18</th><th>12月 12 20:37</th><th>bash.sh</th></tr></thead><tbody><tr><td>inode</td><td>文件的类型</td><td>文件的权限</td><td>selinux</td><td>硬链接个数</td><td>属主</td><td>属组</td><td>文    件的大小</td><td>时间</td><td>文件名</td></tr></tbody></table><p>inode    # 存放着文件的属性和文件具体的位置的指针 不包含文件名</p><p>block     文件的具体存放位置</p><p>硬链接    文件的多个入口  # 超市有多个门 堵死一个门 少一个门 文件正常使用</p><p>软链接</p><h4 id="2-文件的类型-如何知道文件的类型"><a href="#2-文件的类型-如何知道文件的类型" class="headerlink" title="2 .文件的类型 如何知道文件的类型?"></a>2 .文件的类型 如何知道文件的类型?</h4><p>windows中文件的类型: 以后缀名来区分文件的类型</p><p>​    .exe  安装程序 或者 可运行的程序</p><p>​    .txt   文本文件</p><p>​    .mp4 .avi </p><p>​    .jpg</p><p>​    .bat</p><p>​    .rar</p><p>Linux中的文件类型 让我们能够识别是什么文件</p><p>​    .txt</p><p>​    .sh .bash                       shell脚本</p><p>​    .conf .cfg .config         配置文件</p><p>​    .rpm                              安装包 数据包</p><p>​    .log                                日志文件</p><p>​    .py                                  python</p><h4 id="3-linux下的普通文件类型"><a href="#3-linux下的普通文件类型" class="headerlink" title="3 .linux下的普通文件类型"></a>3 .linux下的普通文件类型</h4><p>​    -rw-r–r–</p><p>​    -     普通文件又分为：</p><p>​             1) 普通文件 手动创建的或系统存在的</p><p>​              -rw-r–r– 1 root root 7 12月 18 09:41 test.txt</p><p>​             2) 系统的命令 二进制的文件</p><p>​              -rwxr-xr-x. 1 root root 117672 4月 11 2018 /usr/bin/ls</p><p>​             3) 压缩包 数据文件</p><p>​              -rw-rw-r– 1 root root  83176 7月  4 2014 zziplib-0.13.62-5.el7.x86_64.rpm</p><p> drwxr-xr-x       d     目录（directory）</p><p> lrwxr-xr-x        l       软链接 soft link 符号链接 symbolic link 类似windwos快捷方式 </p><p> brw-rw—-      b       快设备 硬盘 光驱 U盘 /dev</p><p>​                           c       字符设备</p><p>​       crw-rw-rw- 1 root root 1, 9 12月 18 08:36 /dev/urandom 吐字符</p><p>​       tr -cd ‘a-zA-Z0-9’ &lt; /dev/urandom</p><p>​      crw-rw-rw- 1 root root 1, 3 12月 18 08:36 /dev/null   黑洞 吃字符</p><p>​      crw-rw-rw- 1 root root 1, 5 12月 18 08:36 /dev/zero      生成字符</p><p>​                          s   （socket）  套接文件</p><p>​                          p                        管道设备</p><h4 id="4-文件相关的几个命令"><a href="#4-文件相关的几个命令" class="headerlink" title="4 .文件相关的几个命令"></a>4 .文件相关的几个命令</h4><p>1）which      查看命令的全路径   $PATH</p><p>2）file           查看文件的类型</p><p>​      [root@alexlnb ~]#file test.txt</p><p>​      test.txt: ASCII text     包括 纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件。第一个属性为 [-] 。</p><p>​      [root@alexlnb ~]#file test</p><p>​      test: directory        文件类型是目录</p><p>​      [root@alexlnb ~]#file /etc/rc.local </p><p>​      /etc/rc.local: symbolic link to `rc.d/rc.local’</p><p>​      [root@alexlnb ~]#file /dev/sda</p><p>​      /dev/sda: block special</p><p>​      [root@alexlnb ~]#file /dev/urandom </p><p>​      /dev/urandom: character special</p><p>   3）whereis    查看文件的具体位置和文件的帮助</p><p>   4） locate 命令 mlocate 需要安装命令 快速定位文件位置 不用 扩展</p><p>​     updatedb</p><p>5 .df -i      查看inode使用情况</p><p>​     df -h      查看block使用情况</p><p>​    -rw-r–r–     文件的权限</p><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="-文件类型"></a>-文件类型</h4><p>   9位权限位(12位权限位)</p><p>   前三位 对应了属主</p><p>   中三位 对应了数组</p><p>   后三位 对应了其他用户</p><p>   rwx</p><p>   r（read） 读 # cat oldboy.txt </p><p>less oldboy.txt  重要的文件不允许其他用户看到</p><p>   w (write)  写 # vim oldboy.txt</p><p>​         echo 111 &gt;oldboy.txt sed  会把木马写入服务器</p><p>   x (excute)  可执行 # shell脚本 bash </p><h4 id="6-硬链接的个数"><a href="#6-硬链接的个数" class="headerlink" title="6 .硬链接的个数"></a>6 .硬链接的个数</h4><p>​    面试题：</p><p>​     ln 源文件 目标文件    # 创建硬链接</p><p>​    硬链接的特点:</p><p>​     1)在相同文件系统中具有相同inode号的文件 互为硬链接 ll -i</p><p>​     2)相当于文件的多个入口  类似于超市的多个入口</p><p>​     3)文件默认的硬链接为1 目录默认的硬链接为2 且 目录无法做硬链接(会出现循环)</p><p>​     4)删除源文件和目标文件任意一个文件 文件不会真正的删除</p><p>​     5)只有同时删除源文件和目标文件 文件才会被删除 (普通文件)</p><p>​     6)删除源文件和目标文件 并且没有被系统或程序调用 则被真正删除 进程调用</p><p>​    7)如果删除文件的空间在存放其他文件 则被删除文件无法恢复 或者使用fsck命令进程磁盘检查 空间也会被系统回收</p><p>​    8)硬链接文件是普通文件 使用rm删除即可</p><p>​    9)硬链接为防止文件的误删做的备份</p><p>​    10)不能跨文件系统</p><h4 id="7-软链接"><a href="#7-软链接" class="headerlink" title="7 .软链接"></a>7 .软链接</h4><p>​    ln -s 源文件 目标文件</p><p>​    软链接的特点:</p><p>​    1)Inode号不同</p><p>​    2)类似于windows的快捷方式 里面存放了源文件的指针指向</p><p>​    3)删除软链接文件不影响源文件</p><p>​    4)删除源文件则文件被真正的删除 软链接不会删除 但是不可用</p><p>​    5)做软链接尽量使用全路径</p><p>​    6)删除一定要注意不能删除源文件(&gt;后面的为源文件)</p><h4 id="8-root-root"><a href="#8-root-root" class="headerlink" title="8 .root root"></a>8 .root root</h4><p>​    属主 属组</p><p>​    root     管理员用户 UID 唯一标识 0</p><p>​    用户类型 三种</p><p>​    cat /etc/passwd           查看用户信息</p><p>​    1)root用户       #UID 0   /bin/bash</p><p>​    2) 虚拟用户    # 存在 不能登录的用户 服务启动需要一个用户   /sbin/nologin</p><p>​    3) 普通用户    # 自己创建的用户 useradd 可登录 可正常使用  /bin/bash</p><p>​    在工作中禁止root登录 都是使用自己的用户名登录</p><p>   直接查看目录是显示目录本身的大小 目录存放的是下级的文件名</p><h4 id="9-文件详细信息的时间"><a href="#9-文件详细信息的时间" class="headerlink" title="9 .文件详细信息的时间"></a>9 .文件详细信息的时间</h4><p>   Access: 2019-12-19 12:05:23.928187905 +0800    </p><p>   Modify: 2019-12-18 10:51:54.960652005 +0800</p><p>   Change: 2019-12-18 10:51:54.960652005 +0800</p><p>   Access: 访问时间     cat查看 当文件无修改 则时间不会变</p><p>   Modify: 修改时间      vim echo 修改</p><p>   Change: 属性的修改时间   属性信息 （-rw-r–r– 1 root root 1.3M Dec 18 10:53）</p><h4 id="10-为什么目录的硬链接数为2"><a href="#10-为什么目录的硬链接数为2" class="headerlink" title="10 .为什么目录的硬链接数为2"></a>10 .为什么目录的硬链接数为2</h4><p>​     [root@alexlnb ~/oldboy]#ll -adi .</p><p>​     17446568 drwxr-xr-x 2 root root 34 12月 19 10:13 .</p><p>​     [root@alexlnb ~/oldboy]#ll -adi ../oldboy/</p><p>​     17446568 drwxr-xr-x 2 root root 34 12月 19 10:13 ../oldboy/</p><p>​     [root@alexlnb ~]#ll -aid ../root/ . /oldboy/..</p><p>​     33574977 dr-xr-x—. 5 root root 245 12月 19 10:12 .</p><p>​      64 dr-xr-xr-x. 19 root root 268 12月 11 11:38 /oldboy/..</p><p>​     33574977 dr-xr-x—. 5 root root 245 12月 19 10:12 ../root/</p><p>​     [root@alexlnb ~]#cd oldboy/</p><p>​     [root@alexlnb ~/oldboy]#ll -aid ../</p><p>​     33574977 dr-xr-x—. 5 root root 245 12月 19 10:12 ../</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三剑客重点回顾、排序去重统计</title>
      <link href="/2020/05/01/san-jian-ke-chong-dian-hui-gu-pai-xu-qu-chong-tong-ji/"/>
      <url>/2020/05/01/san-jian-ke-chong-dian-hui-gu-pai-xu-qu-chong-tong-ji/</url>
      
        <content type="html"><![CDATA[<p>1  . grep    过滤字符串</p><p>​      -r    递归查询 grep -r ‘内容’ /etc/*</p><p>​       -v    取反 egrep -v ‘^$|#’ file</p><p>​       -w   单词 以空格分隔</p><p>​       -i    不区分大小写</p><p>​       -n    显示过滤到内容的行号</p><p>​       -E    扩展</p><p>2  .sed    字符串替换 免交互</p><p>​      sed -n ‘3p’ file</p><p>​      sed -n ‘1,3p’ file</p><p>​      sed -n ‘/root/p’ file</p><p>​      sed -n ‘/root/,/alex/p’ file</p><p>​      sed -i ‘2s#root#oldboy#g’ file</p><p>​      sed -i ‘1,10s/^/#/g’ file</p><p>3  .awk    取行 取列 数据统计 if for while 数组</p><p>​      awk ‘NR==2’ file</p><p>​      awk ‘NR==1 || NR==10’ file</p><p>​      awk ‘$3&gt;1&amp;&amp; $3&lt;50’ file</p><p>​      例子：[root@alexlnb ~]#sed -i ‘s/^/http:\/\//g’ 2.txt </p><p>​         [root@alexlnb ~]#cat 2.txt </p><p>​         <a href="http://www.baidu.com.cn/1.html" target="_blank" rel="noopener">http://www.baidu.com.cn/1.html</a></p><p>​         <a href="http://www.sina.com.cn/2.qqqq" target="_blank" rel="noopener">http://www.sina.com.cn/2.qqqq</a></p><p>​         <a href="http://www.youku.com/4.wwww" target="_blank" rel="noopener">http://www.youku.com/4.wwww</a></p><p>​         <a href="http://www.youku.com/4.wwww" target="_blank" rel="noopener">http://www.youku.com/4.wwww</a></p><p>​         <a href="http://www.job.com/1.html" target="_blank" rel="noopener">http://www.job.com/1.html</a></p><p>​         <a href="http://www.job.com" target="_blank" rel="noopener">http://www.job.com</a></p><p>​         <a href="http://www.baidu.com.cn/1.html" target="_blank" rel="noopener">http://www.baidu.com.cn/1.html</a></p><p>​         <a href="http://www.job.com/1.html" target="_blank" rel="noopener">http://www.job.com/1.html</a></p><p>​         <a href="http://www.sina.com.cn" target="_blank" rel="noopener">http://www.sina.com.cn</a></p><p>4  .sort    排序 </p><p>​        -r     逆序排序</p><p>​       -n    以数字排序</p><p>unip -c  去重统计</p><p>​       例子：cat 3.txt|sort |uniq -c|sort -rn</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三剑客中的sed匹配</title>
      <link href="/2020/05/01/san-jian-ke-zhong-de-sed-pi-pei/"/>
      <url>/2020/05/01/san-jian-ke-zhong-de-sed-pi-pei/</url>
      
        <content type="html"><![CDATA[<p>sed  替换 查找内容</p><h4 id="1-格式"><a href="#1-格式" class="headerlink" title="1 .格式:"></a>1 .格式:</h4><p>​       sed ‘模式 动作’ file</p><p>​       sed ‘找谁 干啥’ file</p><p>​        -n     取消默认输出</p><p>​        -r    支持扩展正则</p><p>​    sed ^   代表以什么开头 或者是 代表了开头</p><p>​      例子：sed ‘1s/^/#/g’    在第一行开头处加上#</p><p>​      例子：sed 1,5 ,序列      表示1到5行</p><p>​       动作：</p><p>​         p 打印</p><p>​         d 删除 临时删除</p><h4 id="2-sed之查找"><a href="#2-sed之查找" class="headerlink" title="2 . sed之查找:"></a>2 . sed之查找:</h4><p>​       1)如何查找第三行 明确 直接找3 </p><p>​       例子：sed ‘3p’ file</p><p>​       [root@alexlnb ~]#sed -n ‘3p’ 1.txt   #取消默认输出 只显示第三行</p><p>​      333333333333</p><p>​       2)明确查找1到3行的内容显示出来 ,分隔</p><p>​      例子;[root@alexlnb ~]#sed -n ‘1,3p’ 1.txt</p><p>​          111111111111</p><p>​         2222222222</p><p>​         333333333333</p><p>​      3)明确匹配最后一行</p><p>   例子：[root@alexlnb ~]#sed -n ‘$p’ 1.txt</p><p>​         55555555555555</p><p>​       明确匹配2到最后一行</p><p>   例子：[root@alexlnb ~]#sed -n ‘2,$p’ 1.txt</p><p>​         2222222222</p><p>​         333333333333</p><p>​         4444444444444</p><p>​         55555555555555</p><p>​      4)显示包含lizhenya的行 模糊匹配// 字符串匹配</p><p>​      例子;sed ‘/字符串/p’ file</p><p>​        [root@alexlnb ~]#sed -n ‘/lizhenya/p’ oldboy.txt </p><p>​         I am lizhenya teacher!</p><p>​         our site is http:<a href="http://www.lizhenya.com" target="_blank" rel="noopener">www.lizhenya.com</a> </p><p>​         lizhenya</p><p>​         lizhenyalizhenyalizhenya</p><p>​         lizhenyalizhenyalizhenya</p><p>​      5)匹配显示lizhenya的行到test之间的行</p><p>   例子：从第几行都第几行</p><p>​         sed -n ‘1,5p’ file</p><p>​         sed -n ‘//,//p’ file</p><p>​         sed -n ‘/lizhenya/,/test/p’ 1.txt </p><p>​         vim 1.txt </p><p>​         sed -n ‘/lizhenya/,/test/p’ 1.txt </p><p>​         vim 1.txt </p><p>​         cat 1.txt</p><p>​      注意：sed -n ‘/lizhenya/,/test/p’ 1.txt </p><p>​         -————–</p><p>​         [root@alexlnb ~]#cat 1.txt </p><p>​         lizhenya</p><p>​         111111111111</p><p>​         2222222222</p><p>​         333333333333</p><p>​         test</p><p>​         4444444444444</p><p>​         lizhenya</p><p>​         55555555555555</p><p>​         jijfqfjeiqwjfiwe</p><p>​         test</p><p>​         fwqefqwfewq</p><p>​         lizhenya</p><p>​         qfeqfqef</p><p>​         fwqfweqfwqfe</p><p>​         fqwfwqefqwf</p><p>​         qwfewqfqwf</p><p>​         14234234234</p><p>​         -—————</p><h4 id="3-sed之增加"><a href="#3-sed之增加" class="headerlink" title="3 . sed之增加"></a>3 . sed之增加</h4><p>​      a  追加 在当前行的下一行插入内容</p><p>​       i  插入 在当前行插入新的内容</p><p>​      例子：sed ‘3a aaaa’ 1.txt</p><p>​         sed ‘3i aaaa’ 1.txt</p><p>​         sed ‘3c aaaa’ 1.txt</p><p>​         sed -in ‘/^SELINUX\b/c SELINUX=disabled’ /etc/selinux/config</p><h4 id="4-sed之删除"><a href="#4-sed之删除" class="headerlink" title="4 . sed之删除"></a>4 . sed之删除</h4><p>​      d 删除</p><p>​    例子：[root@alexlnb ~]#sed -i ‘2d’ 1.txt</p><p>​         [root@alexlnb ~]#cat 1.txt </p><p>​         1111</p><p>​         333</p><p>​         4444</p><p>​         5555</p><h4 id="5-sed之替换"><a href="#5-sed之替换" class="headerlink" title="5 . sed之替换"></a>5 . sed之替换</h4><p>​        可用三中符号分隔开：///  ### @@@</p><p>​         g  全局替换 如果不加 替换每行的第一个内容</p><p>   格式：sed ‘s/内容/替换的内容/g’ file</p><p>   例子：[root@alexlnb ~]#sed ‘s#alex#oldboy#g’ 1.txt</p><p>​         1111</p><p>​         oldboy xxoldboy aaaa</p><p>​         333</p><p>​         4444</p><p>​         5555</p><p>​         oldboy</p><p>​         oldboy</p><p>   例子1：删除文件1到5行中的所有的字母</p><p>​      1）第一种方式</p><p>​         [root@alexlnb ~]#sed -n ‘1,5p’ test.txt |sed ‘s#[a-Z]##g’</p><p>​         ::0:0::/://</p><p>​         ::1:1::/://</p><p>​         ::2:2::/://</p><p>​         ::3:4:://://</p><p>​         ::4:7::///://</p><p>​      2）第二种方式</p><p>​         [root@alexlnb ~]#sed -n ‘1,5s#[a-Z]##gp’ test.txt</p><p>​         ::0:0::/://</p><p>​         ::1:1::/://</p><p>​         ::2:2::/://</p><p>​         ::3:4:://://</p><p>​         ::4:7::///://</p><p>   例子2：先查找以root开头的行 并把行里的bin替换为root</p><p>​         [root@alexlnb ~]#sed -n ‘/^root/s#bin#root#gp’ test.txt</p><p>​         root:x:0:0:root:/root:/root/bash</p><p>​         [root@alexlnb ~]#sed -i ‘1,5s/^/#/g’ test.txt</p><p>​         [root@alexlnb ~]#cat test.txt</p><p>​         #root:x:0:0:root:/root:/bin/bash</p><p>​         #bin:x:1:1:bin:/bin:/sbin/nologin</p><p>​         #daemon:x:2:2:daemon:/sbin:/sbin/nologin</p><p>​         #adm:x:3:4:adm:/var/adm:/sbin/nologin</p><p>​         #lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</p><p>​         sync:x:5:0:sync:/sbin:/bin/sync</p><p>​         shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</p><p>​         halt:x:7:0:halt:/sbin:/sbin/halt</p><p>​         mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</p><p>​         operator:x:11:0:operator:/root:/sbin/nologin</p><h4 id="6-sed-后向引用-1-开始-（支持输出空格、字符串、-t、-n）"><a href="#6-sed-后向引用-1-开始-（支持输出空格、字符串、-t、-n）" class="headerlink" title="6 . sed 后向引用 \1 开始  （支持输出空格、字符串、\t、\n）"></a>6 . sed 后向引用 \1 开始  （支持输出空格、字符串、\t、\n）</h4><p>​    例子1：[root@alexlnb ~]#ifconfig eth0|sed -n ‘2p’|sed -r ‘s#^.<em>inet (.</em>) n.*$#当前服务器的IP地址: \1#g’</p><p>​      当前服务器的IP地址: 10.0.1.200</p><p>​    例子2:如何匹配出 10.0.1.200 255.255.255.0</p><p>​         inet 10.0.1.200 netmask 255.255.255.0 broadcast 10.0.1.255</p><p>​         [root@alexlnb ~]#echo 123456 45678|sed -r ‘s#(.<em>) (.</em>)#\1\t\2#g’</p><p>​         123456 45678</p><p>​         [root@alexlnb ~]#echo 123456 45678|sed -r ‘s#(.<em>) (.</em>)#\1\n\2#g’</p><p>​         123456</p><p>​         45678</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开机流程、用户管理</title>
      <link href="/2020/05/01/kai-ji-liu-cheng-yong-hu-guan-li/"/>
      <url>/2020/05/01/kai-ji-liu-cheng-yong-hu-guan-li/</url>
      
        <content type="html"><![CDATA[<h4 id="1-开机流程面试题"><a href="#1-开机流程面试题" class="headerlink" title="1  .开机流程面试题"></a>1  .开机流程面试题</h4><p>​    1.描述linux系统从开机到登陆界面的启动过程（记时2分钟）</p><p>解答：</p><p>简述：</p><p>1）开机BIOS自检</p><p>2）MBR引导</p><p>3）grub引导菜单</p><p>4）加载内核kernel</p><p>5）启动init进程</p><p>6）读取inittab文件，执行rc.sysinit,rc等脚本</p><p>7）启动mingetty，进入系统登陆界面</p><p>2  .Centos6 x 开机流程第一个进程 init</p><p> 串行启动 如果某一项服务挂掉 无法启动 则后面的全部无法正常启动</p><p>3  .Centos7 x 开机流程第一个进程 system</p><p>并行启动 如果某一项服务挂掉 不影响系统正常启动</p><h3 id="第二章：用户管理"><a href="#第二章：用户管理" class="headerlink" title="第二章：用户管理"></a>第二章：用户管理</h3><h4 id="1-让一个命令或者一个服务开机自启动有什么方法"><a href="#1-让一个命令或者一个服务开机自启动有什么方法" class="headerlink" title="1) 让一个命令或者一个服务开机自启动有什么方法?"></a>1) 让一个命令或者一个服务开机自启动有什么方法?</h4><p>​    /etc/rc.local   需要给源文件x权限 可执行命令 服务启动 脚本</p><p>​    chkconfig iptables on     开机启动</p><p>​    systemctl enable firewalld    开机启动</p><p>​    /etc/profile   开机加载 或者重新打开窗口连接 重新加载</p><h4 id="2-用户分类"><a href="#2-用户分类" class="headerlink" title="2) 用户分类"></a>2) 用户分类</h4><p>​    系统默认：</p><h4 id="1-管理员-root-UID-0"><a href="#1-管理员-root-UID-0" class="headerlink" title="1. 管理员    root UID 0"></a>1. 管理员    root UID 0</h4><h4 id="2-虚拟用户-UID-CentOS6-1-499-每个服务启动都需要一个用户-用户不需要登录"><a href="#2-虚拟用户-UID-CentOS6-1-499-每个服务启动都需要一个用户-用户不需要登录" class="headerlink" title="2. 虚拟用户   UID  CentOS6 1-499 # 每个服务启动都需要一个用户 用户不需要登录"></a>2. 虚拟用户   UID  CentOS6 1-499 # 每个服务启动都需要一个用户 用户不需要登录</h4><p>​                   UID CentOS7  1-999</p><h4 id="3-普通用户-CentOS6-500-自己创建的用户"><a href="#3-普通用户-CentOS6-500-自己创建的用户" class="headerlink" title="3. 普通用户  CentOS6 500+   # 自己创建的用户"></a>3. 普通用户  CentOS6 500+   # 自己创建的用户</h4><p>​                CentOS7 1000+</p><p>​    3）/etc/passwd  （centos中默认的shell是bash）</p><p>​      /bin/bash     解释器</p><p>​      /sbin/nologin   不允许登录</p><p>​      如何统计passwd中有几个管理员 几个虚拟用户 几个普通用户</p><p>​      第一种方法：awk -F: ‘$3==0{a++}’ /etc/passwd</p><p>​            awk -F: ‘$3==0{a++}END{print a}’ /etc/passwd</p><p>​         awk -F: ‘$3&gt;0&amp;&amp;$3&lt;1000{a++}END{print a}’ /etc/passwd</p><p>​         awk -F: ‘$3&gt;999{a++}END{print a}’ /etc/passwd</p><p>​      -————-</p><p>​      第二种：awk -F: ‘$3==0’ /etc/passwd|wc -l</p><p>​      awk -F: ‘$3&gt;0 &amp;&amp; $3&lt;1000 ‘ /etc/passwd|wc -l</p><p>​      awk -F: ‘$3&gt;999’ /etc/passwd|wc -l</p><p>​      -————-</p><p>​    4）用户可属于多个组</p><p>​      一个组内可有多个用户</p><p>​      /etc/passwd    用户的信息</p><p>​    /etc/shadow    用户密码信息</p><p>​      /etc/group    用户组信息</p><p>​      /etc/gshadow    用户组密码信息</p><p>​      每列的含义 以:分隔</p><p>​    lyz:   x:  1001:  1001:  :   /home/lyz:    /bin/bash</p><p>   root:  x:   0:     0:    root:    /root:      /bin/bash</p><p>用户名 密码  UID    GID  描述   家目录       解释器</p><p>​    5) 与用户相关的目录</p><p>​    /etc/skel    家目录的模板</p><p>​    useradd    创建用户</p><p>​    1.创建家目录/home/name</p><p>​    2.把/etc/skel下的隐藏文件 复制到家目录中</p><p>​    3.更改隐藏文件的默认权限</p><p>​     .bash_logout     # 使用ctrl+d 退出的时候执行此文件</p><p>​      .bash_profile     # 环境变量 别名 针对当前用户生效  局部 家里的规矩</p><p>​      .bashrc         # 别名                      局部 家里的规矩</p><p>​    笔试题：</p><p>​     第一步 vim /etc/profile </p><p>​     把PS1 注释掉</p><p>​    第二步 su - oldboy</p><p>​    第三步 rm -rf /*</p><p>​    第四步 exit</p><p>​    第五步 su - oldboy</p><p>​    如何恢复:</p><p>​    把三个文件拷贝到家目录中</p><p>​    cp /etc/skel/.bash* .</p><p>​    退出重新连接 或者使用 source .bash_profile</p><p>​    ..          上一级</p><p>​    .            当前目录</p><p>​    .file       隐藏文件</p><p>​    . file      执行 相当于source 文件</p><p>​    6）用户相关的命令</p><p>​    1 . useradd</p><p>​           -s    指定解释器 </p><p>​          -u    指定用户的uid</p><p>​          -M    不创建家目录</p><p>​          -g    指定属于组</p><p>举例：添加一个用户alex999指定uid为888 禁止用户登录系统 不创建家目录</p><p>​    useradd -u 888 -s /sbin/nologin -M alex999</p><p>​     id       查看用户信息</p><p>​    userdel     删除用户 默认不删除家目录 在公司中用户尽量不删 使用注释的方式</p><p>​             -r      删除家目录</p><p>2  .usermod    修改用的信息</p><p>​         -s    修改解释器</p><p>​          -u    修改用户uid</p><p>​          -g    修改属于组</p><p>​          -G    属于多个组</p><p>​    例子1：usermod -s /sbin/nologin lzy</p><p>​    例子2：usermod -G alex999,oldboy lzy</p><p>指定lzy属于多个组 alex999 oldboy 中间使用逗号分隔</p><p>​    例子3：usermod -u 899 lzy</p><p>3  .chown    修改用户的属主属组</p><p>​      chown lzy police.txt      # 修改文件的属主</p><p>​      chown lzy.lzy police.txt    # 修改文件的属主属组</p><p>​      chown -R lzy.lzy oldboy/   # 修改目录和目录下的所有文件属主和属组</p><p>4  .groupadd   添加用户组 先创建组或者GID 创建用户添加到组</p><p>​      坑: 创建一个用户 UID888 指定用户组为test 不创建家目录 /sbin/nologin oldboy</p><p>例子：groupadd test</p><p>​      useradd -u 888 -g test -s /sbin/nologin -M oldboy</p><h3 id="第三章：passwd设置密码"><a href="#第三章：passwd设置密码" class="headerlink" title="第三章：passwd设置密码"></a>第三章：passwd设置密码</h3><h4 id="1-交互式"><a href="#1-交互式" class="headerlink" title="1  .交互式"></a>1  .交互式</h4><p>​         passwd 回车默认修改当前登录用户 后面跟用户 指定修改某个用户的密码</p><h4 id="2-非交互式"><a href="#2-非交互式" class="headerlink" title="2  .非交互式"></a>2  .非交互式</h4><p>​         echo 123456|passwd –stdin oldboy</p><p>  3  .如何管理密码?</p><p>​    密码要复杂12位以上字母数字特殊字符</p><h3 id="第四章：如何让系统更加安全"><a href="#第四章：如何让系统更加安全" class="headerlink" title="第四章：如何让系统更加安全"></a>第四章：如何让系统更加安全</h3><h4 id="1-用户可访问到的服务器"><a href="#1-用户可访问到的服务器" class="headerlink" title="1  .用户可访问到的服务器"></a>1  .用户可访问到的服务器</h4><p>​      1）最小化原则 安装操作系统 需要什么安装什么</p><p>​      2）保护root 禁止root登录 更改默认SSH端口 22端口</p><p>​      3）给重要的命令+i 给重要的文件加a</p><p>​      4）给重要的文件或命令做一个指纹</p><h4 id="2-给文件创造一个指纹-数字的指纹大家都相同"><a href="#2-给文件创造一个指纹-数字的指纹大家都相同" class="headerlink" title="2  .给文件创造一个指纹 数字的指纹大家都相同"></a>2  .给文件创造一个指纹 数字的指纹大家都相同</h4><p>​       md5sum file</p><p>​      1）检查指纹库是否有文件被修改过</p><p>​      [root@alexlnb ~]# md5sum -c police.txt </p><p>​      1.txt: OK</p><p>​     2）修改一个文件再检测</p><p>​      [root@alexlnb ~]# echo 111 &gt;1.txt</p><p>​      [root@alexlnb ~]# cat 1.txt</p><p>​      111</p><p>​      [root@alexlnb ~]# md5sum -c police.txt </p><p>​      1.txt: FAILED</p><p>​      通过以上的方式检测网站的站点目录下所有的代码文件 如果有更改发送邮件通知运维</p><p>​      如果是开发人员修改了代码</p><p>​      重新生成指纹</p><p>​      md5sum 1.txt &gt;police.txt</p><p>​      [root@alexlnb ~]# cat 1.txt </p><p>​      111</p><p>​      [root@alexlnb ~]# md5sum -c police.txt </p><p>​      1.txt: FAILED</p><p>​      md5sum: WARNING: 1 computed checksum did NOT match</p><p>​      [root@alexlnb ~]# md5sum 1.txt &gt;police.txt </p><p>​      [root@alexlnb ~]# md5sum -c police.txt </p><p>​      1.txt: OK</p><h3 id="第五章：看系统最近用户最近一次登录的时间"><a href="#第五章：看系统最近用户最近一次登录的时间" class="headerlink" title="第五章：看系统最近用户最近一次登录的时间"></a>第五章：看系统最近用户最近一次登录的时间</h3><p>1  .astlog    查看系统所有用户 最近登录的时间</p><p>2  .需求 如何使用普通用户www查看/root家目录下的内容</p><p>​    尚方宝剑</p><p>​    visudo    让普通用户临时以root的身份运行命令</p><p>   1)如何查看我当前有没有尚方宝剑 有没有以root身份可运行的命令</p><p>​    [www@alexlnb ~]$ sudo -l</p><p>​    # 只提示一次 后面直接输入密码</p><p>   We trust you have received the usual lecture from the local System</p><p>   Administrator. It usually boils down to these three things:</p><p>​      #1) Respect the privacy of others.</p><p>​      #2) Think before you type.</p><p>​      #3) With great power comes great responsibility.</p><p>   [sudo] password for www:</p><p>   以上输入www的密码 默认没有尚方宝剑</p><p>   visudo === /etc/sudoers</p><p>   visudo 可以检查语法的错误</p><p>   授权1个命令 开发人员最小化</p><p>   www   ALL=(ALL)    /usr/bin/ls</p><p>   授权多个命令</p><p>   www   ALL=(ALL)    /usr/bin/ls,/usr/bin/cat</p><p>   授权所有命令</p><p>   www   ALL=(ALL)    /usr/bin/*</p><p>   对某个命令取反</p><p>   www   ALL=(ALL)    /usr/bin/*,!/usr/bin/vim</p><p>   使用sudo方式运行命令</p><p>   运维人员拥有最高权限</p><p>   www   ALL=(ALL)    NOPASSWD: ALL</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令总结</title>
      <link href="/2020/05/01/ming-ling-zong-jie/"/>
      <url>/2020/05/01/ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>第1章：路径</p><p>   路径分为两种：</p><table><thead><tr><th>路径分类</th><th>命令</th><th>生活例子</th></tr></thead><tbody><tr><td>相对路径</td><td>hosts oldboy.txt passwd</td><td>隔壁305 隔壁304</td></tr><tr><td>绝对路径</td><td>/etc/oldboy /etc/passwd</td><td>地球/亚洲/中国/广东/深圳/南山区/室外桃园创意园/C栋/306</td></tr></tbody></table><p>第2章：命令</p><p>1  .man  帮助</p><p>2  .help  帮助</p><p>3  .baidu 帮助</p><p>4  .shutdown -h now   直接关机</p><p>shutdown -h 0              直接关机</p><p>shutdown -h 10            10分钟后关机</p><p>shutdown -c                  取消关机</p><p>shutdown -r now          重启</p><p>shutdown -r 10            10分钟后重启</p><p>5  .poweroff                  关机</p><p>6  .halt                           关机</p><p>7  .init 0                        关机</p><p>8  .reboot                      重启</p><p>9  .init 6                        重启</p><p>10  .exit                        退出当前的连接</p><p>11 .logout                    退出当前连接</p><p>ctrl + d 执行的是logout</p><p>12  .history                  查看历史命令</p><p>13  .pwd （print working directory） 查看当前路径、当前在哪个目录</p><p>14  .cd （change directory） 改变当前的工作目录</p><p>可两种方式使用：</p><table><thead><tr><th>路径</th><th>例子</th></tr></thead><tbody><tr><td>全路径</td><td>cd  /etc/sysconfig/network-scripts/</td></tr><tr><td>一步步的进 相对路径查找</td><td>cd /            cd etc            cd sysconfig            cd network-scripts</td></tr></tbody></table><p>cd ~  表示家目录、当前登录用户的家目录</p><p>cd ~ 等于cd 回车</p><p>cd - 切换到上一次所在的目录</p><p>cd .. 切换到上一级目录</p><p>cd . 代表了当前的目录</p><p>  15  .ls（list）    显示目录中的内容</p><p>   ls -l                    显示详细信息</p><p>   ls -r                    逆序排序默认是 根据首字母</p><p>  16  .mkdir (make directory)     创建目录</p><p>​         mkdir -p                                递归创建目录</p><p>​     相对路径创建  mkdir test</p><p>​        绝对路径创建  mkdir /tmp/test</p><p>​        一次性创建多个目录</p><p>​        如在在/oldboy/下 创建test1 test2 test3目录</p><p>​        mkdir -p /oldboy/test1 /oldboy/test2 /oldboy/test3</p><p>  17  .touch (摸)   创建文件、更改文件的时间（ 不影响文件内容）</p><p>​          一次性创建多个文件</p><p>​            如何在/oldboy/alex/创建 1.txt 2.txt 3.txt</p><p>​    touch /oldboy/alex/test1.txt /oldboy/alex/test2.txt /oldboy/alex/test3.txt</p><p>  18  .cp（copy）  复制</p><p>   cp -r     拷贝目录及目录下面的所有内容、递归 </p><p>例子： [root@oldboyedu ~]# #把oldboy.txt 拷贝到/opt下</p><p>​      [root@oldboyedu ~]# cp oldboy.txt /opt/</p><p>​      [root@oldboyedu ~]# ls -l /opt/</p><p>​      total 0</p><p>​      -rw-r–r–. 1 root root 0 Dec 10 10:34 oldboy.txt</p><p>​      [root@oldboyedu ~]# #cp 源文件 目标地址</p><p>​      [root@oldboyedu ~]# #cp 从哪里 到哪里去</p><p>​     Linux中大部分命令无法直接对目录进行操作 需要加参数</p><p>​      [root@oldboyedu ~]# \cp -r /etc/ /opt/ 直接覆盖 不提示</p><p>​      很多命令都给我们起了个小名 都加-i参数 目的就是保护系统安全</p><p>​      cp /opt/oldboy.txt .  拷贝oldboy.txt 文件到当前目录</p><p>​      cp 文件后如果写了新的名字 则为重命名</p><p>练习题：</p><p>​      1.在/opt下创建 oldboy目录</p><p>​         mkdir /opt/oldboy</p><p>​      2.在oldboy目录下创建test1 test2目录</p><p>​         mkdir /opt/oldboy/test1 /opt/oldboy/test2</p><p>​      3.在/opt/oldboy目录下创建alex1.txt alex2.txt</p><p>​         touch /opt/oldboy/alex1.txt /opt/oldboy/alex2.txt</p><p>​      4.然后把alex1.txt alex2.txt 复制到 /opt/oldboy/test1和test2目录下</p><p>​        cp /opt/oldboy/alex1.txt /opt/oldboy/alex2.txt /opt/oldboy/test1</p><p>​        cp /opt/oldboy/alex1.txt /opt/oldboy/alex2.txt /opt/oldboy/test2</p><p>​      5.然后把/opt/oldboy下的test1和test2目录 复制到 /tmp/下</p><p>​        cp -r /opt/oldboy/test1 /tmp</p><p>​        cp -r /opt/oldboy/test2 /tmp</p><p>​      6.重复5的操作 在复制一遍</p><p>​         \cp -r /opt/oldboy/test1 /tmp</p><p>​         \cp -r /opt/oldboy/test2 /tmp</p><p>​      7.history历史命令截图</p><p> 19  .echo   输出内容到桌面</p><p>  例子： [root@oldboyedu ~]# echo I am lizhenya teacher &gt; oldboy.txt</p><p>​        [root@oldboyedu ~]# # echo 内容 漏斗 输入到oldboy.txt</p><p>​        &gt; 重定向 先清空源文件 在把新的内容重定向到文件中</p><p>​        echo &gt; oldboy.txt   清空文件内容</p><p>​        &gt;&gt; 追加重定向 </p><p>​        echo I am lizhenya teacher &gt;&gt; oldboy.txt</p><p> 20  .cat           查看文件内容</p><p>​        cat -n      显示行号</p><p> 21  .tree             以树形结构显示目录 需要安装此命令</p><p>​         tree -d        只显示目录</p><p>​        tree -F         在目录的后面加上/ 区分是否是目录还是文件</p><p>​        tree -L         显示目录层级</p><p>   例子：tree -L 1 /opt/oldboy/ 只显示oldboy下的第一层目录</p><p>22  .rm（remove）        删除文件或目录</p><p>​        rm -f (force)            强制删除 不提示</p><p>​        rm -r                        递归删除目录及目录下所有内容</p><p>23  .mv (move)   移动目录或文件</p><p>   例子:mv alex1.txt test.txt 改名</p><p>24  . ifup eth0         开启eth0端口</p><p>​     ifdown eth0        关闭eth0端口</p><p>​     systemctl start network   开启网络服务</p><p>25  .whoami         查看当前系统登录的用户</p><p>26  .tail                 查看文件的尾部内容 默认10行</p><p>​     -n         显示文件的后n行</p><p>​     -f          实时显示文件的最新内容</p><p>​     -F          实时显示文件的最新内容 监控文件 文件不存在会等待状态</p><p>   tailf == tail -f</p><p>27  .head          默认显示文件的前10行</p><p>​     -n                 显示文件的前n行</p><p>28  .grep          过滤文件的内容 三剑客老三</p><p>​            -v                 取反</p><p>​           -w                取单词</p><p>​            -n               查看搜索到内容的行号</p><p>29  .free         查看内存信息</p><p>​           -h        人类可读</p><p>30  .w                   显示负载和登录的用户信息</p><p>31  .uptime         显示负载</p><p>32  .top                查看负载和系统的详细信息</p><p>33  .hostnamectl     查看系统相关的信息</p><p>34  .uname               查看内核信息</p><p>​              -r                  查看内核版本</p><p>35  .useradd             创建用户</p><p>36  .passwd              设置密码</p><p>37  .which                显示命令的全路径</p><p>38  .whereis            查看文件的具体位置和帮助信息</p><p>39  .tr           替换</p><p>​      -d           删除</p><p>​     -c            取反</p><p>40  . cat            查看文件的信息 和合并文件</p><p>​          -n             显示行号</p><p>​          -A             显示行的结尾 加$</p><p>41  .less           一页一页的显示文件内容</p><p>​           -N          显示行号</p><p>42  .more        一页一页的显示文件内容 到文件尾部自动退出</p><p>43  .alias          别名</p><p>44  .wc          统计文件的行号</p><p>​         -l           统计总行数</p><p>45  .wget           下载</p><p>46  .yum            安装软件</p><p>​     -y          遇到yes 自动y</p><p>   remove        删除软件 卸载</p><p>   yum repolist    查看仓库里的软件</p><p>   provides         查看命令属于的软件包</p><p>  yum clean all     清空yum缓存</p><p>47  .rpm            软件安装</p><p>​     -i            安装 install</p><p>​     -v           显示过程</p><p>​     -h           人类可读</p><p>​     -e          卸载</p><p>​     -q           查询</p><p>​     -ivh       安装</p><p>​     -qa       查询所有已安装过的软件</p><p>​     -ql       查看软件安装的所有相关内容</p><p>​     -qf       查询命令属于的软件包</p><p>48  .lscpu          查看cpu信息</p><p>49  .du         统计目录或文件的大小</p><p>​      -h           人类可读</p><p>50  . su         切换用户</p><p>​     -        更新环境变量</p><p>   su - www</p><p>   su - www -c “rm -rf /*”     使用www用户执行命令</p><p>51  .file          查看文件类型</p><p>52  . stat          查看文件的详细信息</p><p>53  .type           查看命令为内置还是外置命令</p><p>54  .telnet          远程连接 测试端口是否开启</p><p>55  .route         查看网关</p><p>​      -n         查看网关</p><p>56  .nslookup        查看解析</p><p>57  .traceroute -n <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>     查看到网站的路由</p><p>58  .tcpdump        # 自己总结</p><p>59  .source .         # 让文件即时生效  把子shell中的内容在父进程中运行</p><p>60  .localectl       配置字符集</p><p>​     localectl set-locale LANG</p><p>61  .hostname       查看主机名称</p><p>​    hostname        名称 设置主机名</p><p>62  .setenforce       设置selinux</p><p>63  .getenforce       查看selinux当前的状态</p><p>64  .seq              序列 生成数字序列</p><p>65  .mount           挂载</p><p>​    umount          卸载</p><p>66  .ln              软硬链接</p><p>​      -s            软链接</p><p>67  .tar             压缩</p><p>​      -zcvf        压缩命令</p><p>​      -xf             解压</p><p>​      -C             解压到哪里</p><p>68  .zip zip bz2       压缩</p><p>69  .unzip           解压缩</p><p>​      -d            解压到哪里</p><p>70  .find          查找文件或目录</p><p>​       -maxdepth 1    最大深度等级</p><p>​       -name         名称</p><p>​       -iname         名称不区分大小写</p><p>​       -size          大小</p><p>​       -mtime         修改时间</p><p>71  .xargs</p><p>​         -n          n列显示内容</p><p>​      |xargs 把前面的命令交给后面的命令使用</p><p>72  .ifconfig          查看ip地址</p><p>​      ip add          查看ip地址</p><p>73  .iptables-save      保存- 如果开启了则显示规则 关闭则不显示</p><p>74  .chkconfig       查看服务在所有的运行级别中是否启动 </p><p>​    chkconfig iptables off   开机关闭</p><p>75  .netstat           查看端口 总结</p><p>76  .systemctl get-default  获取默认运行级别</p><p>77  .rz             上传文件 需要安装 lrzsz</p><p>​     sz file           下载文件到本地</p><p>78  .grep   过滤字符串</p><p>   -r    递归搜索</p><p>   -v    取反</p><p>   -o    显示匹配过程</p><p>   -n    显示过滤出内容的行号</p><p>   -w    统计单词</p><p>   -i     不区分大小写</p><p>   -c     过滤内容的总行数</p><p>   -E     支持扩展正则</p><p>   -A     匹配到内容的往下n行 -A1</p><p>   -B     匹配到内容的往上n行 -B1</p><p>   -C     配置到内容的上下n行 -C1</p><p>79  .sed    替换 查找内容</p><p>   -n    取消默认输出</p><p>-r    支持扩展正则</p><p>80  .awk   取列</p><p>  -F    指定分隔符 可以是任意的</p><p>81  . /etc/passwd      用户的信息</p><p>​      /etc/group      用户组的信息</p><p>​      /etc/gshadow     用户组密码信息  </p><p>​      /etc/shadow      用户密码信息</p><p>82  ./etc/skel      家目录的模板</p><p>83  .useradd      创建用户</p><p>84  .useradd</p><p>​      -s      指定解释器</p><p>​     -u      指定用户的uid </p><p>​     -M     不创建家目录</p><p>​     -g      指定属于组</p><p>85  .userdel      删除用户 默认不删除家目录 在公司中用户尽量不删 使用注释的方式</p><p>​      -r      删除家目录</p><p>86  .sort      排序</p><p>​    -r      逆序排序</p><p>   -n      按照数字排序</p><p>​    -k     按照某列排序</p><p>87  .uniq       去重</p><p>​    -c      统计</p><p>88  .usermod   修改用户信息</p><p>​     -u    修改uid</p><p>​     -s    修改shell</p><p>89  .chown    修改用户属主属组</p><p>​      -R    递归</p><p>90  .groupadd   添加用户组</p><p>​      -g    指定组ID</p><p>91  .groupdel    删除用户组</p><p>92  .id      查看用户信息</p><p>93  .last      查看系统最近用户最近一次登录的时间  </p><p>94  .lastlog     查看系统所有用户 最近登录的时间</p><p>95  .md5sum   创造一个指纹</p><p>​     -c   检查指纹库</p><p>96  .visudo     可以检查语法的错误</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS解析过程、TCP三次握手和四次挥手</title>
      <link href="/2020/05/01/dns-jie-xi-guo-cheng-tcp-san-ci-wo-shou-he-si-ci-hui-shou/"/>
      <url>/2020/05/01/dns-jie-xi-guo-cheng-tcp-san-ci-wo-shou-he-si-ci-hui-shou/</url>
      
        <content type="html"><![CDATA[<p>第一章：DNS解析过程</p><p>1  .域名是什么？</p><pre><code>       举个例子，https://www.baidu.com，这个其实并不是域名，其中https是指协议，去掉https后，www.baidu.com.（注意最后面有一个点号）才是真正的域名。1）根域名的下一级就是顶级域名了，.com 也就是顶级域名，常见的顶级域名后缀有.com、.cn、.net、.org 等，这些都是固定的，用户不能自己修改，只能选择。2）顶级域名的下一级又是权威域名，如baidu.com中的.baidu，这个权威域名就是我们自己可注册的域名。3）顶级域名下就是主机名了，www是指主机名，这个是我们可以自己定义的，通常在http服务器如nginx中可以修改。注意dns域名服务器一般分三种，分别是根域名服务器(.)、顶级域名服务器(.com)、权威域名服务(.baidu.com) 。</code></pre><p><img src="/medias/73.png" alt></p><pre><code>2 .DNS域名解析过程服务1）当浏览器拿到输入的www.baidu.com后，首先会去浏览器的dns缓存中去查询是否有对应记录，如果查询到记录就可以直接返回ip地址，完成解析。2）如果浏览器没有缓存，那就再去查询操作系统的缓存，同样的，如果查询到记录就可以直接返回ip地址，完成解析。3）如果操作系统也没有缓存，那就再去查看本地host文件，Windows下host文件一般位于 &quot;C:\Windows\System32\drivers\etc&quot;。</code></pre><p><img src="/medias/74.png" alt></p><p><img src="/medias/75.png" alt></p><pre><code>ipconfig/displaydns         # 查看windows dns缓存ipconfig/flushdns           # 清空DNS缓存第二章：TCP三次握手    1.主动方发送syn=1 请求建立连接 seq=x    2.被动方接收ack=1 syn=1 请求和主动方建立连接 seq=y  ACK=x+1    3.主动方发送ack=1 seq=x+1 ack=y+1</code></pre><p><img src="/medias/76.png" alt></p><pre><code>第三章：TCP四次挥手1.主动方发送  fin=1 请求断开连接 seq=u ACK=w2.被动方接收后ack=1 seq=w ack=u+13.被动方随后发送fin=1 请求断开连接 seq=w ack=u+1 4.主动方收到fin请求 发送ack=1 确认断开 seq=u+1 ACK=w+1</code></pre><p><img src="/medias/77.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux  12位权限体系</title>
      <link href="/2020/05/01/linux-12-wei-quan-xian-ti-xi/"/>
      <url>/2020/05/01/linux-12-wei-quan-xian-ti-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：前9位权限体系"><a href="#第一章：前9位权限体系" class="headerlink" title="第一章：前9位权限体系"></a>第一章：前9位权限体系</h3><h4 id="1-RWX是什么？"><a href="#1-RWX是什么？" class="headerlink" title="1  .RWX是什么？"></a>1  .RWX是什么？</h4><p>​    R  （read）         读         可以看文件 （cat less more head tail）</p><p>   W （write）        写         可以写入  （vim echo sed -i ）</p><p>   X （execute）   执行      可执行文件 （.sh 脚本文件可执行）</p><p>   普通文件是否需要可执行权限？ 普通文件的最高权限 RW</p><h4 id="2-如何知道我对当前的文件有什么权限？"><a href="#2-如何知道我对当前的文件有什么权限？" class="headerlink" title="2  .如何知道我对当前的文件有什么权限？"></a>2  .如何知道我对当前的文件有什么权限？</h4><p> 1）首先要知道你的当前登录的用户   whoami 查看当前登录的用户</p><p>2）确定当前用户和文件有什么关系  属主 属组 陌生人（other）</p><p>   [oldboy@alexlnb ~]$ll /etc/hosts</p><p>   -rw-r–r– 1 root root 158 Dec 25 10:12 /etc/hosts</p><p>3）根据当前用户和文件的对应关系找出对应的权限</p><h4 id="3-rw-r–r-分别是什么权限？"><a href="#3-rw-r–r-分别是什么权限？" class="headerlink" title="3  .rw-r–r 分别是什么权限？"></a>3  .rw-r–r 分别是什么权限？</h4><p> 前三位  属主的权限</p><p> 中三位  属组的权限</p><p> 后三位  其他用户的权限 陌生人</p><p>​    rwx   可读可写可执行</p><p> R  ==  4</p><p>W ==  2</p><p> x  ==  1</p><p>-  ==  0</p><p>rw-r–r–    数字表示 644</p><p>属主的权限: 6 属组的权限：4  其他的权限：4</p><table><thead><tr><th>分类</th><th>属主</th><th>属组</th><th>其他用户</th></tr></thead><tbody><tr><td>全称</td><td>user</td><td>group</td><td>other</td></tr><tr><td>简写</td><td>u</td><td>g</td><td>o</td></tr></tbody></table><p>ugo = a</p><h4 id="4-通常使用的权限"><a href="#4-通常使用的权限" class="headerlink" title="4  .通常使用的权限"></a>4  .通常使用的权限</h4><p> rw-r–r–             数字表示：644</p><p>rw——-             数字表示：600</p><p>rwxr-xr-x             数字表示：755</p><p>rwxrwxrwx          数字表示：777</p><p>———              数字表示：000</p><p>r-xr-xr-x              数字表示：555</p><p>例子：修改test.sh 属主(可写 可读)   属组 (可读)    其他用户 (可读)</p><p>   属主 420 属组 400 其他 400</p><p>   相加结果 6 4 4</p><p>   [root@alexlnb ~/oldboy]#chmod 644 test.sh</p><p>  [root@alexlnb ~/oldboy]#ll test.sh</p><p>-rw-r–r– 1 root root 13 Dec 31 09:30 test.sh</p><h3 id="第二章：rwx-的作用"><a href="#第二章：rwx-的作用" class="headerlink" title="第二章：rwx 的作用"></a>第二章：rwx 的作用</h3><h4 id="1-rwx对于文件的作用"><a href="#1-rwx对于文件的作用" class="headerlink" title="1  .rwx对于文件的作用"></a>1  .rwx对于文件的作用</h4><p> r  可读 不可写 不可执行</p><p>w  不可写 不可执行 可追加 如果想要写入 必须和r配合使用</p><p>x  啥都不能干 想要执行 必须和r进行配合</p><h4 id="2-rwx-对于目录的作用"><a href="#2-rwx-对于目录的作用" class="headerlink" title="2  .rwx 对于目录的作用"></a>2  .rwx 对于目录的作用</h4><p> r   不能进入目录 只显示文件名 不显示详细信息 配合x使用</p><p>w   啥都不能干 控制是否在目录下创建 删除 重命名 必须和x配合</p><p>x   可进入到目录 可以查看文件内容</p><p>为了系统的安装 所有的创建的目录都是755权限</p><h4 id="3-小结："><a href="#3-小结：" class="headerlink" title="3  .小结："></a>3  .小结：</h4><p>1）当前登录用户</p><p>2）登录用户对应文件的关系</p><p>3）通过关系找到对应权限,可查看某个目录下的内容,目录必须有rx权限</p><p>4）如果要在某个目录下进行修改创建删除移动,目录必须有wx权限</p><p>5）文件的删除和文件本身没有关系 看上级目录的w权限</p><h4 id="4-umask-控制系统默认创建目录和文件的权限"><a href="#4-umask-控制系统默认创建目录和文件的权限" class="headerlink" title="4  .umask    控制系统默认创建目录和文件的权限"></a>4  .umask    控制系统默认创建目录和文件的权限</h4><p>文件最大的权限为：666 （rw-rw-rw-）</p><p>目录最大的权限为：777 （rwxrwxrwx）</p><p>默认权限：</p><p>   使用文件最大的权限和目录最大的权限减去默认的umask值得到创建后的权限。</p><p>   1）如何查看umask</p><p>[root@oldboy ~]# umask</p><p>0022</p><p>​      默认的文件 666</p><p>​            -022</p><p>​             644 （rw-r–r–）</p><p>​      默认的目录777</p><p>​            -022</p><p>​            755 (rwx-r-xr-x)</p><p>   2）如何修改umask 临时的</p><p>​    [root@oldboy ~]# umask 032</p><p>[root@oldboy ~]# umask </p><p>0032</p><p>​          文件 666</p><p>​              -032</p><p>​              634 </p><p>​              +010 </p><p>​               644 (rw-r–r–)</p><p>​          目录 777</p><p>​             -032</p><p>​              745 (rwxr–r-x)</p><p>对于文件减去后如果有奇数 则在奇数位+1 目录不需要加</p><p>   练习题：创建一个文件权限为000 目录为111 则umask默认是多少？666</p><h4 id="5-网站对外提供访问-公网-必须对站点目录的权限严格控制"><a href="#5-网站对外提供访问-公网-必须对站点目录的权限严格控制" class="headerlink" title="5  .网站对外提供访问 公网 必须对站点目录的权限严格控制"></a>5  .网站对外提供访问 公网 必须对站点目录的权限严格控制</h4><p>1）目录755</p><p>​      文件644</p><p>2）必须对所有的站点目录下的文件做MD5指纹认证</p><p>3）重要的数据做备份</p><p>4）先把中毒的文件 拷贝到 /tmp (留证据)</p><p>5）先恢复数据</p><h3 id="第三章：后三位权限体系"><a href="#第三章：后三位权限体系" class="headerlink" title="第三章：后三位权限体系"></a>第三章：后三位权限体系</h3><p>1）suid （setuid） 特殊权限位 数字 4  使用stat查看 在属主权限位设置</p><p>2）sgid                     特殊权限位  数字 2                          在组权限位设置</p><p>3）  t                            粘滞位        数字 1                         在陌生人权限位设置</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包方式和网络常用命令</title>
      <link href="/2020/05/01/zhua-bao-fang-shi-he-wang-luo-chang-yong-ming-ling/"/>
      <url>/2020/05/01/zhua-bao-fang-shi-he-wang-luo-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：抓包方式"><a href="#第一章：抓包方式" class="headerlink" title="第一章：抓包方式"></a>第一章：抓包方式</h3><h4 id="1-tcpdump-支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息"><a href="#1-tcpdump-支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息" class="headerlink" title="1  .tcpdump 支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息"></a>1  .tcpdump 支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息</h4><p>常用参数： -i               #监听哪一个网卡 </p><p>​                     -n              #不把ip解析成主机名</p><p>​                     -nn            # 不把端口解析成应用层协议</p><p>​                      -c              #指定抓包的数量</p><p>​                      -S              #不把随机序列和确认序列解析成绝对值</p><p>​                      -w             #将流量保存到文件中,文件中的信息是无法直接查看的</p><p>​                       -r              #读取文件中的内容</p><p>​                       -v             #输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息。 </p><p>​                       -vv           #输出详细的报文信息。</p><h4 id="1）默认启动"><a href="#1）默认启动" class="headerlink" title="1）默认启动"></a>1）默认启动</h4><p>tcpdump -vv                #普通情况下，直接启动tcpdump将监视第一个网络接口上所有流过的数据包。</p><h4 id="2）过滤主机"><a href="#2）过滤主机" class="headerlink" title="2）过滤主机"></a>2）过滤主机</h4><p>tcpdump -i eth1 host 192.168.1.1        #抓取所有经过eth1，目的或源地址是192.168.1.1的网络数据</p><p>tcpdump -i eth1 src host 192.168.1.1    #指定源地址，192.168.1.1</p><p>tcpdump -i eth1 dst host 192.168.1.1    #指定目的地址，192.168.1.1</p><h4 id="3）过滤端口"><a href="#3）过滤端口" class="headerlink" title="3）过滤端口"></a>3）过滤端口</h4><p>tcpdump -i eth1 port 80         #抓取所有经过eth1，目的或源端口是80的网络数据</p><p>tcpdump -i eth1 src port 80     #指定源端口</p><p>tcpdump -i eth1 dst port 80     #指定目的端口</p><h4 id="4）协议过滤"><a href="#4）协议过滤" class="headerlink" title="4）协议过滤"></a>4）协议过滤</h4><p>tcpdump -i eth1 arp</p><p>tcpdump -i eth1 ip</p><p>tcpdump -i eth1 tcp</p><p>tcpdump -i eth1 udp</p><p>tcpdump -i eth1 icmp</p><p>#抓tcp某端口的数据包</p><p>tcpdump -i eth0 tcp port 21 -nn</p><h4 id="5）常用表达式"><a href="#5）常用表达式" class="headerlink" title="5）常用表达式"></a>5）常用表达式</h4><p>非 : ! or “not” (去掉双引号) </p><p>且 : &amp;&amp; or “and” </p><p>或 : || or “or”</p><p>#抓取所有经过eth1，目的地址是192.168.1.254或192.168.1.200端口是80的TCP数</p><p>tcpdump -i eth1 ‘((tcp) and (port 80) and ((dst host 192.168.1.254) or (dst host 192.168.1.200)))’</p><p>#抓取所有经过eth1，目标MAC地址是00:01:02:03:04:05的ICMP数据</p><p>tcpdump -i eth1 ‘((icmp) and ((ether dst host 00:01:02:03:04:05)))’</p><p>#抓取所有经过eth1，目的网络是192.168，但目的主机不是192.168.1.200的TCP数据</p><p>tcpdump -i eth1 ‘((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))’</p><p>tcpdump -nni                                           不解析主机名称 指定网卡</p><p>​      tcpdump -nni eth0                            抓取eth0的所有信息</p><p>​      tcpdump -nni eth0 port 12345       抓取eth0的12345端口的信息</p><p>​      tcpdump -nni eth0 src 10.0.1.204 and dst 10.0.1.201 # 源IP 10.0.1.204 目标 10.0.1.201</p><p>​      tcpdump -nni eth0 udp                     抓取UDP协议的数据包</p><p>   $? 上一条命令的返回结果 0为成功 非0失败</p><p> ip address add 10.0.1.201/24 dev eth0    # 给eth0网卡添加一个IP地址</p><p>​     ip address del 10.0.1.201/24 dev eth0  # 删除IP</p><p>​     route -n                                                      # 查看当前默认网关</p><p>​     route add default gw 10.0.1.254          # 配置默认网关             笔试题</p><p>​     route del default gw 10.0.1.254           # 删除默认网关</p><p>​     ip route add 0/0 via 10.0.1.254           # 指定默认网关</p><p>​     ip route del 0/0 via 10.0.1.254            # 删除默认路由</p><p>​     ip route replace 0/0 via 10.0.1.253       # 修改默认路由</p><p>​     -———————————-</p><p>​     ip route add 114.114.114.114 via 10.0.1.254 # 去往114的走1.254网关 电信 笔试题</p><p>​     ip route replace 114.114.114.114 via 10.0.1.253 # 去往114的走1.253网关 联通</p><h4 id="2-如何批量删除网卡上的临时IP-10-0-1-210-250"><a href="#2-如何批量删除网卡上的临时IP-10-0-1-210-250" class="headerlink" title="2  .如何批量删除网卡上的临时IP 10.0.1.210-250"></a>2  .如何批量删除网卡上的临时IP 10.0.1.210-250</h4><p>echo {210..250}|xargs -n1|awk ‘{print “ip addr del 10.0.0.”$1” dev eth0”}’|bash</p><p>echo {210..250}|xargs -n1|sed -r ‘s#(.*)#ip addr del 10.0.0.\1 dev eth0#g’|bash</p><p>ip add|grep ‘10.0.1’|grep -v 200|awk ‘{print $2}’|xargs -i ip addr del {} dev eth0</p><p>问答题：两台电脑ip地址为什么ping 不通？</p><p>  答：哦。。以前公司出现过这种情况</p><p>   用tcpdump解决，在一边随便抓一个端口，在另一边telnet，我看看包有没有进来。如果进来，看看有没有回的，如果没有给它回，可能是我这边防火墙给禁止了，还有就是过来的ip地址不是它本身的，然后运营商给我们做了NAT转换</p><h3 id="第二章：常用网络命令"><a href="#第二章：常用网络命令" class="headerlink" title="第二章：常用网络命令"></a>第二章：常用网络命令</h3><h4 id="1-命令行修改网卡ens33成eth0配置"><a href="#1-命令行修改网卡ens33成eth0配置" class="headerlink" title="1  .命令行修改网卡ens33成eth0配置"></a>1  .命令行修改网卡ens33成eth0配置</h4><p>[root@qls ~]# cd /etc/sysconfig/network-scripts/   #修改网卡配置文件</p><p>[root@qls network-scripts]# mv ifcfg-ens33 ifcfg-eth0</p><p>[root@qls network-scripts]# sed -i “s#ens33#eth0#g” ifcfg-eth0</p><p>[root@qls ~]# vim /etc/sysconfig/grub       #GRUB添加kernel参数</p><p>GRUB_CMDLINE_LINUX=”…net.ifnames=0 biosdevname=0 quiet”</p><p>[root@qls ~]# grub2-mkconfig -o /boot/grub2/grub.cfg</p><p>[root@qls ~]# reboot               #重启系统生效</p><h4 id="2-ping"><a href="#2-ping" class="headerlink" title="2  .ping"></a>2  .ping</h4><pre><code>ping命令主要的功能是用来检测网络的连通情况和分析网络速度。#常用选项                   -t                                   #持续ping，不中断。不加该选项只ping4个包。                   -c                                   #ping的包数，默认是4个。                   -W                                 #多长时间ping一次。                   -f                                    #极速ping。</code></pre><p>3  .nc </p><pre><code>      nc是netcat的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具#常用选项                    -l                                 #用于指定nc将处于侦听模式。                    -u                                #指定nc使用UDP协议，默认为TCP                    -v                                #输出交互或出错信息，新手调试时尤为有用                    -w                               #超时秒数，后面跟数字                     -z                                 #表示zero，表示扫描时不发送任何数据</code></pre><p>4  .nmap</p><pre><code>    Nmap即网络映射器对Linux系统/网络管理员来说是一个开源且非常通用的工具。Nmap用于在远程机器上探测网络，执行安全扫描，网络审计和搜寻开放端口。#常用选项                   -p                             #指定端口号               -p22                         #单个端口               -p22,80                   #多个端口               -p1-1000                #1到1000之间的端口</code></pre><p>5  .telnet</p><pre><code>     一种远程登录的工具。同样可以检查某个主机是否开启某个端口#用法[C:\~]$ telnet 10.0.0.99 22Connecting to 10.0.0.99:22...Connection established.To escape to local shell, press &#39;Ctrl+Alt+]&#39;.SSH-2.0-OpenSSH_7.4</code></pre><p>6  .netstat</p><pre><code>    打印网络连接、路由表、tcp11种状态。#常用选项                   -l                                    #只显示监听套接字。                   -n                                  #不做名字解析                   -t                                   #显示tcp端口                   -u                                  #显示udp端口                   -p                                  #显示pid和程序名字                   -r                                   #显示路由表                   -a                                   #显示所有的套接字</code></pre><p>7  .ss</p><pre><code>跟netstat命令差不多。#常用选项                   -l                                    #只显示监听套接字。                   -n                                  #不做名字解析                   -t                                   #显示tcp端口                   -u                                  #显示udp端口                   -p                                  #显示pid和程序名字                   -r                                   #解析主机名                   -a                                   #显示所有的套接字</code></pre><p>8  .tracert</p><pre><code>    路由跟踪（检查你与目标之间每个路口是否畅通）#常用选项                   -d   #禁止把IP解析为对应的域名（主机名）</code></pre><p>9  .iftop</p><pre><code>    iftop界面说明：界面上面显示的是类似刻度尺的刻度范围，为显示流量图形的长条作标尺用的。中间的&lt;= =&gt;这两个左右箭头，表示的是流量的方向。TX：发送流量RX：接收流量TOTAL：总流量Cumm：运行iftop到目前时间的总流量peak：流量峰值rates：分别表示过去 2s 10s 40s 的平均流量#常用选项-i                                    #设定监测的网卡-B                                 #以bytes为单位显示流量(默认是bits)-n                                  #使host信息默认直接都显示IP-P                                  #使host信息及端口信息默认就都显示-m                                 #设置界面最上边的刻度的最大值，刻度分五个大段显示按q退出监控。</code></pre><p>10  .glances</p><pre><code>    glances工具可以在用户的终端上实时显示重要的系统信息，并动态地对其进行更新。这个高效的工具可以工作于任何终端屏幕。另外它并不会消耗大量的CPU资源，通常低于百分之二。glances在屏幕上对数据进行显示，并且每隔两秒钟对其进行更新。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特殊符号、别名</title>
      <link href="/2020/05/01/te-shu-fu-hao-bie-ming/"/>
      <url>/2020/05/01/te-shu-fu-hao-bie-ming/</url>
      
        <content type="html"><![CDATA[<p>​     .      代表当前的目录</p><p>​     ..      代表上一级目录</p><p>​     #     注释 不生效的内容 shell编程的第一行有用  root用户提示符</p><p>​     ~     代表家目录</p><p>​     $     代表普通用户提示符</p><p>​     &gt;      重定向</p><p>​     &gt;&gt;     追加重定向</p><p>​     &lt;     输入重定向</p><p>​     -     上一次所在的目录</p><p>​     |     前面命令的输出 作为后面命令的使用</p><p>​     \      转义字符</p><p>&amp;&amp;         # 前面的命令执行成功 则执行后面的命令 不成功则不执行后面的命令</p><p>​    例子：cd /backup &amp;&amp; ls   如果backup存在则执行ls 如果backup不存在 则不行ls </p><p>||       # 前面的命令执行失败 则执行后面的命令 不失败则不执行</p><p>例子：cd /backup || mkdir backup 如果cd执行失败 则创建目录backup  如果cd成功  则不会执行后面的创建命令</p><p>;       # 前面的命令成功和失败 都会继续执行后面的命令</p><p>   例子: cd /backup;ls /opt   不管cd是否成功 都会继续执行分号后面的命令</p><p>“”    # 大部分都是字符串 能解析变量 不能解析通配符</p><h4 id="正确重定向"><a href="#正确重定向" class="headerlink" title="正确重定向:"></a>正确重定向:</h4><p>&amp;&gt;/dev/null    定向到空</p><p>例子：ls &gt; test.txt       # 命令执行的结果为正确的才可重定向到test.txt</p><p>​    1&gt; 只接收正确的结果 重定向 前清空在写入</p><p>​    1&gt;&gt; 只接收正确的结果 追加</p><h4 id="错误重定向："><a href="#错误重定向：" class="headerlink" title="错误重定向："></a>错误重定向：</h4><p>​    2&gt; 只接收错误的结果</p><p>​    2&gt;&gt; 只接收错误的结果 追加</p><p>正确和错误的都追加到test.txt</p><p>例子：ls stu01111.txt &gt;&gt;test.txt 2&gt;&gt;test.txt</p><p>   简写:stu0111.txt &gt;&gt;test.txt 2&gt;&amp;1</p><p>   简写:ls stu0111.txt &amp;&gt;&gt;test.txt</p><p>   例子：[root@alexlnb ~/oldboy]#ls stu0111.txt &amp;&gt;test.txt</p><p>​       [root@alexlnb ~/oldboy]#cat test.txt </p><p>​       ls: cannot access stu0111.txt: No such file or directory</p><p>​       [root@alexlnb ~/oldboy]#ls stu01.txt &amp;&gt;&gt;test.txt</p><p>​       [root@alexlnb ~/oldboy]#cat test.txt </p><p>​       ls: cannot access stu0111.txt: No such file or directory</p><p>​       stu01.txt</p><p>​       [root@alexlnb ~/oldboy]#ls stu01.txt &gt;&gt;test.txt 2&gt;&gt;test.txt</p><p>​       [root@alexlnb ~/oldboy]#ls stu01111.txt &gt;&gt;test.txt 2&gt;&gt;test.txt</p><p>​       [root@alexlnb ~/oldboy]#cat test.txt </p><p>​       stu01.txt</p><p>​       ls: cannot access stu01111.txt: No such file or directory</p><p>‘’      输出不解析变量 所见即所得</p><p>“”    解析变量    不能解析通配符      </p><p>不加引号和加双引号类似 能解析变量 但是能解析通配符</p><p>``    执行命令 把命令的结果留在原地 其他命令调用 和$()相同</p><h3 id="第二章：alias别名"><a href="#第二章：alias别名" class="headerlink" title="第二章：alias别名"></a>第二章：alias别名</h3><p>   alias 别名  系统默认的为重要的命令添加了一个小名(昵称)</p><p>cp ====== cp -i</p><p>rm ====== rm -i</p><p>1 .作用:</p><p>系统安全、方便</p><p>2 .如何定义别名 临时定义</p><p>当我们执行 rm命令 让系统给我们提示 command not available</p><p>alias rm=’echo command not available’</p><p>3 .如何查看当前已经定义过的别名</p><p>alias     # 查看别名</p><p>alias vieth0=’vim /etc/sysconfig/network-scripts/ifcfg-eth0’</p><p>4 .永久定义别名</p><p>把配置写入/etc/profile中</p><p>环境变量的生效顺序 /etc/profile-&gt; /etc/bashrc</p><p>[root@alexlnb ~]#alias cdeth0=’cd /etc/sysconfig/network-scripts/‘</p><p>[root@alexlnb ~]#cdeth0</p><p>[root@alexlnb /etc/sysconfig/network-scripts]#</p><p>5 .删除文件 临时取消别名</p><p>​    unalias rm</p><p>​    \rm passwd</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量创建用户</title>
      <link href="/2020/05/01/pi-liang-chuang-jian-yong-hu/"/>
      <url>/2020/05/01/pi-liang-chuang-jian-yong-hu/</url>
      
        <content type="html"><![CDATA[<p>1  .sed方式批量创建test01..test10的用户</p><p>   例子：echo test{01..10}|xargs -n1|sed -r ‘s#(.*)#useradd \1#g’|bash</p><p>   sed 方式批量创建test01..test10的用户并密码统一设置为123456</p><p>   例子：echo test{01..10}|xargs -n1|sed -r ‘s#(.*)#useradd \1;echo 123456|passwd –stdin \1#g’|bash</p><p>   Sed方式 批量删除test01..test10的用户</p><p>   例子：echo test{01..10}|xargs -n1|sed -r ‘s#(.*)#userdel -r \1#g’|bash</p><p>2  .awk 批量创建oldboy1..oldboy10的用户</p><p>   例子：echo oldboy{1..10}|xargs -n1|awk ‘{print “useradd “ $1}’|bash</p><p>   awk 方式批量创建oldboy1..oldboy10的用户并密码统一设置为123456</p><p>   例子：echo oldboy{1..10}|xargs -n1|awk ‘{print “useradd “ $1”;echo 123456|passwd –stdin “ $1}’|bash</p><p>   awk批量删除oldboy1..oldboy10的用户</p><p>   例子：echo oldboy{1..10}|xargs -n1|awk ‘{print “userdel -r “ $1}’|bash</p><h3 id="第二章：随机数"><a href="#第二章：随机数" class="headerlink" title="第二章：随机数"></a>第二章：随机数</h3><p> 1  .筛选出8位的随机密码数</p><p>   echo $RANDOM|md5sum|cut -c1-8</p><p> 2  .sed方式批量创建test1..test10的用户并随机筛选出test1..test10的8位密码数，再把各个用户的8位随机密码数放进passwd.txt文件中</p><p>echo test{1..10}|xargs -n1|sed -r ‘s#(.*)#useradd \1;echo <code>echo $RANDOM|md5sum|cut -c1-8|tee -a passwd.txt</code>|passwd –stdin \1#g’|bash</p><p>3  ./etc/passwd中的UID大于999的所有用户批量删除</p><p>awk -F: ‘$3&gt;999’ /etc/passwd|sed -i ‘s/#//g’|awk -F: ‘{print “userdel -r “ $1}’|bash</p><p>4  .sed方式批量创建test1..test10的用户并随机筛选出test1..test10的8位密码数，再把各个用户跟各个用户的8位随机密码数一起追加到passwd.txt文件中</p><p>echo test{1..10}|xargs -n1|sed -r ‘s#(.*)#echo \1 &gt;&gt;passwd.txt;useradd \1;echo <code>echo $RANDOM|md5sum|cut -c1-8|tee -a passwd.txt</code>|passwd –stdin \1 #g’|bash</p><p>5  .useradd 创建test1用户并筛选出8位随机密码数，再把test1用户和test用户的8位随机密码数追加到passwd.txt中</p><p>echo test1 &gt;&gt;passwd.txt;useradd test1;echo <code>echo $RANDOM|md5sum|cut -c1-8|tee -a passwd.txt</code>|passwd –stdin test1</p><h3 id="第三章-变量pass批量创建"><a href="#第三章-变量pass批量创建" class="headerlink" title="第三章:变量pass批量创建"></a>第三章:变量pass批量创建</h3><p>1  .useradd 创建oldboy用户，设置随机数密码取8位赋值给变量pass  免交互配置密码给oldboy用户</p><p>useradd oldboy;pass=<code>echo $RANDOM|md5sum|cut -c1-8</code>;echo $pass|passwd –stdin oldboy</p><p>2  .useradd 创建oldboy用户，设置随机数密码取8位赋值给变量pass  免交互配置密码给oldboy用户, 并把输出用户名和密码 追加到passwd.txt</p><p>useradd oldboy;pass=<code>echo $RANDOM|md5sum|cut -c1-8</code>;echo $pass|passwd –stdin oldboy;echo oldboy $pass &gt;&gt;passwd.txt</p><p>3  .sed方式批量创建test1..test10的用户，把设置随机数密码取8位赋值给变量pass，再把各个用户跟pass(各个用户的8位随机密码数)一起追加到passwd.txt文件中</p><p>echo test{1..10}|xargs -n1|sed -r ‘s#(.*)#useradd \1;pass=<code>echo $RANDOM|md5sum|cut -c1-8</code>;echo $pass|passwd –stdin \1;echo \1 $pass &gt;&gt;passwd.txt#g’|bash</p><p>4  .awk方式批量创建test1..test10的用户，把设置随机数密码取8位赋值给变量pass，再把各个用户跟pass(各个用户的8位随机密码数)一起追加到passwd.txt文件中</p><p>第一种：echo test{1..10}|awk ‘{for(i=1;i&lt;=NF;i++)print “useradd “ $i”;pass=<code>echo $RANDOM|md5sum|cut -c1-8</code>;echo $pass|passwd –stdin “$i”;echo “$i” $pass &gt;&gt;passwd.txt”}’|bash</p><p>第二种：echo test{1..10}|xargs -n1|awk ‘{print “useradd “$1”;pass=<code>echo $RANDOM|md5sum|cut -c1-8</code>;echo $pass|passwd –stdin “$1”;echo “$1” $pass &gt;&gt;passwd.txt”}’|bash</p><p>5  .批量删除test1..test10的用户</p><p>for i in {1..10};do userdel -r test$i;done</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭配网络路由表</title>
      <link href="/2020/05/01/da-pei-wang-luo-lu-you-biao/"/>
      <url>/2020/05/01/da-pei-wang-luo-lu-you-biao/</url>
      
        <content type="html"><![CDATA[<p>第一章：静态路由</p><p><img src="/medias/71.png" alt></p><h4 id="第一步：PC电脑IP配置"><a href="#第一步：PC电脑IP配置" class="headerlink" title="第一步：PC电脑IP配置"></a>第一步：PC电脑IP配置</h4><p>PC0电脑配置ip地址为：192.168.1.2 子网掩码：255.255.255.0 网关：192.168.1.254</p><p>PC1电脑配置ip地址为：192.168.4.3 子网掩码：255.255.255.0 网关：192.168.4.254</p><h4 id="第二步：路由表配置-CLI"><a href="#第二步：路由表配置-CLI" class="headerlink" title="第二步：路由表配置 CLI"></a>第二步：路由表配置 CLI</h4><p>R1路由表：</p><p>Router&gt;enable        #进入特权模式</p><p>Router#conf t        #进入配置模式</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>Router(config)#hostname R1      #修改路由器名称</p><p>R1(config)#interface Gig0/0     #进入Gig0/0端口</p><p>R1(config-if)#ip address 192.168.1.254 255.255.255.0</p><p>R1(config-if)#no shutdown       #开启端口</p><p>R1(config-if)#exit          #退出到配置模式</p><p>R1(config)#interface Gig0/1     #进入Gig0/1端口</p><p>R1(config-if)#ip address 192.168.2.2 255.255.255.0</p><p>R1(config-if)#no shutdown</p><p>R1(config-if)#exit</p><p>R1(config)#ip route 192.168.4.0 255.255.255.0 192.168.2.3</p><p>R1(config)#exit</p><p>R1#show running-config         # 查看全局配置</p><p>R1(config)#show ip interface brief   # 查看接口地址</p><p>R1(config)#show ip route        # 查看路由表信息</p><p>R2 路由表：</p><p>Router&gt;enable </p><p>Router#conf t</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>Router(config)#hostname R2</p><p>R2(config)#interface Gig0/0</p><p>R2(config-if)#ip address 192.168.2.3 255.255.255.0</p><p>R2(config-if)#no shutdown </p><p>R2(config-if)#exit</p><p>R2(config)#interface Gig0/1</p><p>R2(config-if)#ip address 192.168.3.1 255.255.255.0</p><p>R2(config-if)#no shutdown</p><p>R2(config-if)#exit</p><p>R2(config)#ip route 192.168.4.0 255.255.255.0 192.168.3.2</p><p>R2(config)#ip route 192.168.1.0 255.255.255.0 192.168.2.2</p><p>R2(config)#exit</p><p>R2#show running-config</p><p>R3 路由表：</p><p>Router&gt;enable </p><p>Router#conf t</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>Router(config)#hostname R3</p><p>R3(config)#interface Gig0/0</p><p>R3(config-if)#ip address 192.168.3.2 255.255.255.0</p><p>R3(config-if)#no shutdown </p><p>R3(config-if)#exit</p><p>R3(config)#interface Gig0/1</p><p>R3(config-if)#ip address 192.168.4.254 255.255.255.0</p><p>R3(config-if)#no shutdown</p><p>R3(config-if)#exit</p><p>R3(config)#ip route 192.168.1.0 255.255.255.0 192.168.3.1</p><p>R3(config)#exit</p><p>R3#show running-config</p><h3 id="第二章：动态路由（协议-rip-ospf-eigrp-bgp-isis）"><a href="#第二章：动态路由（协议-rip-ospf-eigrp-bgp-isis）" class="headerlink" title="第二章：动态路由（协议: rip ospf eigrp bgp isis）"></a>第二章：动态路由（协议: rip ospf eigrp bgp isis）</h3><p><img src="/medias/72.png" alt></p><h4 id="第一步：PC电脑IP配置-1"><a href="#第一步：PC电脑IP配置-1" class="headerlink" title="第一步：PC电脑IP配置"></a>第一步：PC电脑IP配置</h4><p>PC0电脑配置ip地址为：192.168.1.2 子网掩码：255.255.255.0 网关：192.168.1.254</p><p>PC1电脑配置ip地址为：192.168.4.3 子网掩码：255.255.255.0 网关：192.168.4.254</p><h4 id="第二步：路由表动态配置"><a href="#第二步：路由表动态配置" class="headerlink" title="第二步：路由表动态配置"></a>第二步：路由表动态配置</h4><p>R1路由表：</p><p>Router&gt;enable        #进入特权模式</p><p>Router#conf t        #进入配置模式</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>Router(config)#hostname R1      #修改路由器名称</p><p>R1(config)#interface Gig0/0     #进入Gig0/0端口</p><p>R1(config-if)#ip address 192.168.1.254 255.255.255.0</p><p>R1(config-if)#no shutdown       #开启端口</p><p>R1(config-if)#exit          #退出到配置模式</p><p>R1(config)#interface Gig0/1     #进入Gig0/1端口</p><p>R1(config-if)#ip address 192.168.2.2 255.255.255.0</p><p>R1(config-if)#no shutdown</p><p>R1#exit </p><p>R1#conf t</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>R1(config)#router rip       # 配置动态协议 rip</p><p>R1(config-router)#network 192.168.1.0 </p><p>R1(config-router)#network 192.168.2.0 </p><p>R1(config-router)#exit</p><p>R1(config)#exit</p><p>R1#show ip route          #查看路由表</p><p>Gateway of last resort is not set</p><p>192.168.1.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>C 192.168.1.0/24 is directly connected, GigabitEthernet0/0</p><p>L 192.168.1.254/32 is directly connected, GigabitEthernet0/0</p><p>192.168.2.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>C 192.168.2.0/24 is directly connected, GigabitEthernet0/1</p><p>L 192.168.2.2/32 is directly connected, GigabitEthernet0/1</p><p>R 192.168.3.0/24 [120/1] via 192.168.2.3, 00:00:14, GigabitEthernet0/1</p><p>R 192.168.4.0/24 [120/2] via 192.168.2.3, 00:00:14, GigabitEthernet0/1</p><p>R2 路由表：</p><p>Router&gt;enable </p><p>Router#conf t</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>Router(config)#hostname R2</p><p>R2(config)#interface Gig0/0</p><p>R2(config-if)#ip address 192.168.2.3 255.255.255.0</p><p>R2(config-if)#no shutdown </p><p>R2(config-if)#exit</p><p>R2(config)#interface Gig0/1</p><p>R2(config-if)#ip address 192.168.3.1 255.255.255.0</p><p>R2(config-if)#no shutdown</p><p>R2#exit </p><p>R2#conf t</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>R2(config)#router rip       # 配置动态协议 rip</p><p>R2(config-router)#network 192.168.2.0 </p><p>R2(config-router)#network 192.168.3.0 </p><p>R2(config-router)#exit</p><p>R2(config)#exit</p><p>R2#show ip route          #查看路由表</p><p>Gateway of last resort is not set</p><p>192.168.1.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>C 192.168.1.0/24 is directly connected, GigabitEthernet0/0</p><p>L 192.168.1.254/32 is directly connected, GigabitEthernet0/0</p><p>192.168.2.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>C 192.168.2.0/24 is directly connected, GigabitEthernet0/1</p><p>L 192.168.2.2/32 is directly connected, GigabitEthernet0/1</p><p>R 192.168.3.0/24 [120/1] via 192.168.2.3, 00:00:14, GigabitEthernet0/1</p><p>R 192.168.4.0/24 [120/2] via 192.168.2.3, 00:00:14, GigabitEthernet0/1</p><p>R3 路由表：</p><p>Router&gt;enable </p><p>Router#conf t</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>Router(config)#hostname R3</p><p>R3(config)#interface Gig0/0</p><p>R3(config-if)#ip address 192.168.3.2 255.255.255.0</p><p>R3(config-if)#no shutdown </p><p>R3(config-if)#exit</p><p>R3(config)#interface Gig0/1</p><p>R3(config-if)#ip address 192.168.4.254 255.255.255.0</p><p>R3(config-if)#no shutdown</p><p>R3#exit </p><p>R3#conf t</p><p>Enter configuration commands, one per line. End with CNTL/Z.</p><p>R3(config)#router rip       # 配置动态协议 rip</p><p>R3(config-router)#network 192.168.3.0 </p><p>R3(config-router)#network 192.168.4.0 </p><p>R3(config-router)#exit</p><p>R3(config)#exit</p><p>R3#show ip route          #查看路由表</p><p>Gateway of last resort is not set</p><p>R 192.168.1.0/24 [120/2] via 192.168.3.1, 00:00:15, GigabitEthernet0/0</p><p>R 192.168.2.0/24 [120/1] via 192.168.3.1, 00:00:15, GigabitEthernet0/0</p><p>192.168.3.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>C 192.168.3.0/24 is directly connected, GigabitEthernet0/0</p><p>L 192.168.3.2/32 is directly connected, GigabitEthernet0/0</p><p>192.168.4.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>C 192.168.4.0/24 is directly connected, GigabitEthernet0/1</p><p>L 192.168.4.254/32 is directly connected, GigabitEthernet0/1</p><h3 id="第三章：策略路由"><a href="#第三章：策略路由" class="headerlink" title="第三章：策略路由"></a>第三章：策略路由</h3><p>  centos 指定一条默认路由给 test表</p><p>  ip route add 0/0 via 10.0.1.1 table test</p><p>  源地址从10.0.2.2过来的数据包 默认的走test表</p><p>  ip rule add from 10.0.2.2 table test</p><p>  生产场景 PPTP 拨号</p><p>  1.vpn正常拨号</p><p>  2.ssh无法连接 113.88.12.240 # 公司公网IP地址</p><p>   添加一个表 200优先级 ssh   </p><p>   ip route add 0/0 via 39.107.76.254 table ssh</p><p>   ip rule add from 113.88.12.240 table ssh</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>/etc网卡配置文件、运行级别、二进制安装</title>
      <link href="/2020/05/01/etc-wang-qia-pei-zhi-wen-jian-yun-xing-ji-bie-er-jin-zhi-an-zhuang/"/>
      <url>/2020/05/01/etc-wang-qia-pei-zhi-wen-jian-yun-xing-ji-bie-er-jin-zhi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：网卡配置文件"><a href="#第一章：网卡配置文件" class="headerlink" title="第一章：网卡配置文件"></a>第一章：网卡配置文件</h3><h4 id="1-etc-sysconfig-network-scripts-ifcfg-eth0"><a href="#1-etc-sysconfig-network-scripts-ifcfg-eth0" class="headerlink" title="1 ./etc/sysconfig/network-scripts/ifcfg-eth0"></a>1 ./etc/sysconfig/network-scripts/ifcfg-eth0</h4><table><thead><tr><th>网卡配置文件</th><th>表示</th></tr></thead><tbody><tr><td>TYPE=Ethernet</td><td>网络类型、以太网</td></tr><tr><td>BOOTPROTO=none</td><td>获取IP地址</td></tr><tr><td>NAME=eth0</td><td>配置文件的名字、网卡名称</td></tr><tr><td>DEVICE=eth0</td><td>硬件网卡名称</td></tr><tr><td>UUID=e96acd48-0d3e-4e51-bb05-68df3913fd0d</td><td>唯一标识、系统为每一个硬件设备分配的唯一标识、身份证号码、干掉他</td></tr><tr><td>ONBOOT=yes</td><td>开启自动启动</td></tr><tr><td>IPADDR=10.0.1.200</td><td>IP地址、局域网内唯一、公网上唯一</td></tr><tr><td>PREFIX=24</td><td>子网掩码 决定了我们网络中可使用的IP地址数量                          1.PREFIX=24                            2.NETMASK=255.255.255.0</td></tr><tr><td>GATEWAY=10.0.1.254</td><td>网关 大门口 家路由器 192.168.1.1 0.1</td></tr><tr><td>DNS1=223.6.6.6</td><td>域名解析服务器、可快速方便的访问服务器，负责把域名解析为IP地址</td></tr></tbody></table><p>BOOTPROTO三种配置方式</p><p>​           1.none  静态</p><p>​           2.DHCP  动态获取</p><p>​           3.static  静态</p><p>​         （家用路由器都开启了DHCP）</p><p>特殊符号#  注释、不生效、只给我们看的</p><h4 id="2-etc-hosts-（本地解析配置文件、DNS解析域名、解析主机名称）"><a href="#2-etc-hosts-（本地解析配置文件、DNS解析域名、解析主机名称）" class="headerlink" title="2 ./etc/hosts （本地解析配置文件、DNS解析域名、解析主机名称）"></a>2 ./etc/hosts （本地解析配置文件、DNS解析域名、解析主机名称）</h4><p>​       在解析域名的时候先查看/etc/hosts文件 如果有则直接解析 没有才使用我们配置的DNS进行解析域名。</p><h4 id="3-etc-hostname-（主机名称的配置文件）"><a href="#3-etc-hostname-（主机名称的配置文件）" class="headerlink" title="3 ./etc/hostname （主机名称的配置文件）"></a>3 ./etc/hostname （主机名称的配置文件）</h4><p>​        第一个里程碑：如何查看当前主机名？（centos6和centos7相同）</p><p>​        hostname </p><p>​        第二个里程碑：如何修改主机名？（centos6和centos7相同）</p><p>​        hostname alexlnb      # 临时修改主机名称 重启失效</p><p>​        第三个里程碑：如何永久修改主机名？</p><p>​        vim /etc/hostname     # 永久修改主机名 centos7 必须重启后生效</p><p>​        vim /etc/sysconfig/network  # 永久修改主机名配置文件 Centos6</p><p>​        第四个里程碑：如何临时+永久修改主机名？</p><p>​        hostnamectl set-hostname alexlnb   #centos7 永久加临时修改主机名</p><p>​        hostname 先临时修改 在更改配置文件/etc/sysconfig/network  # centos6 临时+永久修改主机名称</p><h4 id="4-etc-resolv-conf-配置DNS服务器的配置文件"><a href="#4-etc-resolv-conf-配置DNS服务器的配置文件" class="headerlink" title="4 ./etc/resolv.conf  配置DNS服务器的配置文件"></a>4 ./etc/resolv.conf  配置DNS服务器的配置文件</h4><p>​      配置方法不同</p><p>​      网卡配置 DNS1=223.6.6.6</p><p>​      resolv.conf nameserver 223.6.6.6</p><p>​      如果网卡中配置了DNS 如果不重启则不会覆盖 /etc/resolv.conf</p><p>​      如果重启网络服务 则网卡中的dns配置会覆盖 /etc/resolv.conf</p><p>​      在工作中尽量使用resolv.conf</p><p>​      DNS服务器不稳定 223.5.5.5 223.6.6.6</p><p>​      resolv.conf中配置方法</p><p>​      nameserver 10.0.0.28</p><p>​      nameserver 114.114.114.114 </p><p>1）nslookup 解析服务地址 查看通过哪个DNS进行解析的 需要安装yum -y install bind-utils</p><h4 id="5-etc-rc-local-开机后自动执行文件中的命令-开机自启动"><a href="#5-etc-rc-local-开机后自动执行文件中的命令-开机自启动" class="headerlink" title="5 ./etc/rc.local      # 开机后自动执行文件中的命令 开机自启动"></a>5 ./etc/rc.local      # 开机后自动执行文件中的命令 开机自启动</h4><p>chmod +x /etc/rc.d/rc.local      给源文件一个执行权限</p><h4 id="6-etc-fstab-file-system-table-磁盘挂载的配置文件-开机自动挂载"><a href="#6-etc-fstab-file-system-table-磁盘挂载的配置文件-开机自动挂载" class="headerlink" title="6 ./etc/fstab file system table    磁盘挂载的配置文件 开机自动挂载"></a>6 ./etc/fstab file system table    磁盘挂载的配置文件 开机自动挂载</h4><h4 id="7-etc-issue-登录服务器前显示的内容"><a href="#7-etc-issue-登录服务器前显示的内容" class="headerlink" title="7 ./etc/issue        登录服务器前显示的内容"></a>7 ./etc/issue        登录服务器前显示的内容</h4><p>/etc/issue.net    登录服务器前显示的内容</p><p>​               查看：echo &gt; /etc/issue.net</p><p>​                  echo &gt; /etc/issue </p><h3 id="8-etc-motd-连接服务器后显示的内容"><a href="#8-etc-motd-连接服务器后显示的内容" class="headerlink" title="8 ./etc/motd       连接服务器后显示的内容"></a>8 ./etc/motd       连接服务器后显示的内容</h3><h4 id="9-etc-inittab-服务器开机后的运行级别-runlevel"><a href="#9-etc-inittab-服务器开机后的运行级别-runlevel" class="headerlink" title="9 ./etc/inittab    服务器开机后的运行级别 runlevel"></a>9 ./etc/inittab    服务器开机后的运行级别 runlevel</h4><h4 id="10-etc-profile-环境变量、开机后自动运行-每一次使用xshell连接都会加载一次"><a href="#10-etc-profile-环境变量、开机后自动运行-每一次使用xshell连接都会加载一次" class="headerlink" title="10 ./etc/profile 环境变量、开机后自动运行 每一次使用xshell连接都会加载一次"></a>10 ./etc/profile 环境变量、开机后自动运行 每一次使用xshell连接都会加载一次</h4><p>​         针对系统层面 所有用户生效</p><p>​           什么是环境变量</p><p>​           环境变量支撑我们正常使用Linux操作系统</p><p>​           x=1 y=x+1 y=2</p><p>​           名称(自定义)=变量的值</p><p>​           右面一堆内容 使用一个名字来代替 称为环境变量 等号两端不允许有空格</p><p>​           例: test=”I am lizhenya teacher”</p><p>​           系统环境变量</p><p>​           PATH 路径</p><p>​           USER 用户名</p><h4 id="11-etc-bashrc-环境变量-别名"><a href="#11-etc-bashrc-环境变量-别名" class="headerlink" title="11 ./etc/bashrc   环境变量  别名"></a>11 ./etc/bashrc   环境变量  别名</h4><p>​        针对系统层面 所有用户生效</p><p>.bashrc       环境变量    针对当前登录用户生效</p><p>.bash_profile  环境变量  针对当前登录用户生效</p><p>​     相当于：etc/profile     国家的法律</p><p>/etc/bashrc      国家的法律</p><p>.bashrc           家里的规矩</p><p>.bash_profile    家里的规矩</p><h3 id="第二章：centos6-X-操作系统-运行级别表示方法"><a href="#第二章：centos6-X-操作系统-运行级别表示方法" class="headerlink" title="第二章：centos6.X 操作系统 运行级别表示方法"></a>第二章：centos6.X 操作系统 运行级别表示方法</h3><p>面试题 请写出系统的运行级别</p><p>0   关机        init 0</p><p>1  单用户模式   救援模式 忘记密码</p><p>2  多用户模式   没有NFS存储图片</p><p>3   完全多用户模式  默认使用的</p><p>4  待开发</p><p>5   桌面模式     需要安装桌面的软件</p><p>6  重启         init 6</p><p>centos7.X 操作系统 运行级别表示方法 中文翻译成英文 target</p><p>0   关机           poweroff.target  </p><p>1   单用户模式      rescue.target       救援模式</p><p>2  多用户模式      multi-user.target</p><p>3  完全多用户模式     multi-user.target</p><p>4  待开发           multi-user.target</p><p>5   桌面模式         graphical.target</p><p>6  重启            reboot.target</p><p>1）第一个里程碑 如何查看当前的运行级别</p><p>centos6的查看方法</p><p>cat /etc/inittab</p><p>id:3:initdefault:</p><p>centos7的查看方法</p><p>[root@alexlnb ~]# systemctl get-default</p><p>multi-user.target</p><p>2）第二个里程碑 如何临时修改启动级别 centos6和7相同</p><p>init 6     重启</p><p>init 0     关机</p><p>init 5     桌面</p><p>3）第三个里程碑 如何永久修改运行级别 开机后自动运行哪个功能 哪个级别</p><p>centos6的配置方法</p><p>直接修改/etc/inittab</p><p>id:3:initdefault:</p><p>centos7的配置方法</p><p>systemctl set-default runlevel5.target   # 开机后运行桌面模式</p><h3 id="第三章：二进制安装"><a href="#第三章：二进制安装" class="headerlink" title="第三章：二进制安装"></a>第三章：二进制安装</h3><p>​     /usr/local 二进制安装 第三方安装 程序默认的目录</p><p>安装软件的三种方式：</p><h4 id="1）yum安装-公司常用"><a href="#1）yum安装-公司常用" class="headerlink" title="1）yum安装 公司常用"></a>1）yum安装 公司常用</h4><p>​       yum -y install package.name</p><p>​          -y 安装过程中会遇到很多确定 -y 自动确认</p><p>​       install 安装</p><p>​        yum安装的特点。</p><p>​        yum 安装能够自动解决依赖问题</p><p>​       依赖:在安装某个服务前 必须要安装必要的包 缺什么补什么</p><p>​        yum安装软件的方式</p><p>​        yum -y install package.name</p><p>​        yum卸载方式</p><p>​        yum -y remove package.name</p><p>​       查找包的名字的方法</p><p>​           1)百度查找 搜索 安装</p><p>​           2) yum provides rz   # 查看命令属于的安装包</p><h4 id="2）rpm安装-常用"><a href="#2）rpm安装-常用" class="headerlink" title="2）rpm安装  常用"></a>2）rpm安装  常用</h4><p>​         rpm的特点:</p><p>​        缺的依赖我们要自己手动下载 手动安装所需要的依赖 无法自动解决依赖问题</p><p>​        安装的包的名字的后缀 全部是以.rpm结尾的</p><p>​        1 .rpm的安软件的方式</p><p>​         rpm -ivh  package.name</p><p>​             -i</p><p>​             -v   显示安装过程</p><p>​             -h  人类可读的方式查看</p><p>​         rpm -i package.name  其他参数可忽略</p><p>​        2 .如何查看当前系统是否安装了想要的软件</p><p>​         rpm -qa   查看软件是否安装</p><p>​             -q    查看</p><p>​             -a     所有</p><p>​             -l     列表</p><p>​         rpm -qa wget      查看是否安装过wget</p><p>​         rpm -qa          查看系统中已经安装了哪些软件</p><p>​         rpm -qa|grep wget    通过搜索的方式查看软件是否安装</p><p>​         rpm -ql        查看当前软件包里的内容 安装了哪些内容</p><p>​        3 .如何使用rpm进行卸载软件 不建议使用 建议使用yum remove 进行卸载</p><p>​        注意:</p><p>​           1)无法解决依赖问题</p><p>​           2) 卸载有的包的名字需要复制全部包括版本号</p><p>​           rpm -e package.name</p><p>​             [root@alexlnb ~]# rpm -qa wget</p><p>​             wget-1.14-18.el7_6.1.x86_64</p><p>[root@alexlnb ~]# rpm -e wget</p><p>​             [root@alexlnb ~]# rpm -qa wget</p><p>​             [root@alexlnb ~]#</p><h4 id="3）编译安装"><a href="#3）编译安装" class="headerlink" title="3）编译安装"></a>3）编译安装</h4><p>​           编译安装特点:</p><p>​         自定选择 自己需要的模块进行编译安装 自己定制所需</p><p>​         .configure make makeinstall</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志文件、cpu查看与优化$PS1</title>
      <link href="/2020/05/01/ri-zhi-wen-jian-cpu-cha-kan-yu-you-hua-ps1/"/>
      <url>/2020/05/01/ri-zhi-wen-jian-cpu-cha-kan-yu-you-hua-ps1/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：Linux-日志文件"><a href="#第一章：Linux-日志文件" class="headerlink" title="第一章：Linux 日志文件"></a>第一章：Linux 日志文件</h3><h4 id="1）-var-variable-变化的、日志文件"><a href="#1）-var-variable-变化的、日志文件" class="headerlink" title="1）/var variable    变化的、日志文件"></a>1）/var variable    变化的、日志文件</h4><h4 id="var-log-messages-日志信息-记录了系统运行的记录"><a href="#var-log-messages-日志信息-记录了系统运行的记录" class="headerlink" title="/var/log/messages  日志信息 记录了系统运行的记录"></a>/var/log/messages  日志信息 记录了系统运行的记录</h4><h4 id="var-log-secure-系统的安全日志"><a href="#var-log-secure-系统的安全日志" class="headerlink" title="/var/log/secure    系统的安全日志"></a>/var/log/secure    系统的安全日志</h4><p>​      如果安全日志出现Failed 上百次或上千次 暴力破解</p><p>日志切割</p><p>​      为了防止系统或者服务的日志量过大</p><p>​      如果文件被剪切走 日志文件不会重新生成 必须重启服务 或者重新加载服务</p><p>​      rsyslog  系统日志的服务</p><h4 id="2）-proc-内存的映射、运行的进程"><a href="#2）-proc-内存的映射、运行的进程" class="headerlink" title="2）/proc   内存的映射、运行的进程"></a>2）/proc   内存的映射、运行的进程</h4><p>/proc/cpuinfo</p><p>​         [root@alexlnb ~]# grep ‘physical id’ /proc/cpuinfo</p><p>​         physical id : 0</p><p>​         physical id : 0</p><p>​         physical id : 1</p><p>​         physical id : 1</p><p>​         [root@alexlnb ~]# grep ‘processor’ /proc/cpuinfo</p><p>​         processor : 0</p><p>​         processor : 1</p><p>​         processor : 2</p><p>​         processor : 3</p><h3 id="第二章：cpu查看"><a href="#第二章：cpu查看" class="headerlink" title="第二章：cpu查看"></a>第二章：cpu查看</h3><p>​    1）使用命令查看cpu信息</p><h4 id="lscpu"><a href="#lscpu" class="headerlink" title="lscpu"></a>lscpu</h4><p>​         CPU(s):        4</p><p>​         On-line CPU(s) list:   0-3</p><p>​         Thread(s) per core:   1</p><p>​         Core(s) per socket:   2</p><p>​         Socket(s):        2</p><h4 id="2）-proc-meminfo-查看内存信息"><a href="#2）-proc-meminfo-查看内存信息" class="headerlink" title="2）/proc/meminfo 查看内存信息"></a>2）/proc/meminfo 查看内存信息</h4><p>​         MemTotal:     997980 kB      总共的内存</p><p>​         MemFree:     731164 kB      剩余的内存</p><p>​         MemAvailable:   708344 kB      可用的内存</p><p>​         Buffers:      2076 kB       缓冲</p><p>​         Cached:      83916 kB     缓存</p><p>​         SwapCached:      0 kB    swap 硬盘临时充当内存的大小</p><p>​         使用命令查看内存信息</p><p>​         free -h</p><p>​         如何算百分比: 使用的除以总数乘以100</p><h4 id="3）-proc-loadavg-平均负载-load-average"><a href="#3）-proc-loadavg-平均负载-load-average" class="headerlink" title="3）/proc/loadavg 平均负载 load average"></a>3）/proc/loadavg 平均负载 load average</h4><p>​         什么是负载</p><p>​         负载是衡量系统的繁忙程度</p><p>​         什么时候才算繁忙</p><p>​         当负载的值接近CPU核心的总数</p><p>​         什么硬件能让我们的负载高</p><p>​            cpu 硬盘 cpu负责运算 负责处理 硬盘负责 读写</p><p>​         0.00  0.01   0.02  1/125 1484</p><p>​         1分钟  5分钟    15分钟   </p><p>​         1分钟5分钟15分钟的系统平均负载值</p><p>​         使用命令查看负载信息</p><p>​         09:42:01 up 26 min, 1 user, load average: 0.00, 0.01, 0.02</p><p>​         当前时间 </p><p>​         top 查看负载和系统的详细信息</p><p>​         w  命令 包含了多个命令  1人做多份工作 不可替代</p><h4 id="4）-proc-mounts-了解-系统挂载的详细信息"><a href="#4）-proc-mounts-了解-系统挂载的详细信息" class="headerlink" title="4）/proc/mounts   了解 系统挂载的详细信息"></a>4）/proc/mounts   了解 系统挂载的详细信息</h4><p>​         df -h 查看磁盘或者挂载的信息</p><p>​         /etc/fstab</p><h3 id="第二章：优化"><a href="#第二章：优化" class="headerlink" title="第二章：优化"></a>第二章：优化</h3><h4 id="1）查看版本号"><a href="#1）查看版本号" class="headerlink" title="1）查看版本号?"></a>1）查看版本号?</h4><p>​      1 .[root@alexlnb ~]# cat /etc/redhat-release </p><p>​      CentOS Linux release 7.5.1804 (Core) </p><p>​      2 .hostnamectl</p><p>你公司用的内核版本号?</p><p>​       hostnamectl</p><p>​       uname -r</p><p>​       centos6 2.6.32</p><p>​       centos7 3.10.0</p><h4 id="2）创建用户"><a href="#2）创建用户" class="headerlink" title="2）创建用户"></a>2）创建用户</h4><p>​       useradd name</p><p>给用户创建密码</p><p>​       passwd password的缩写</p><p>​       passwd     #直接回车默认是修改当前登录用户的密码</p><p>​       passwd www   #修改www的密码</p><p>如何使用www用户进行登录</p><p>​     使用xshell更改用户为www进行连接</p><p>如何在root用户下切换到www用户 相当于皇帝去平民家里</p><p>   su - www</p><p>   如何退回到root</p><p>   exit   退出当前用户</p><p>   ctrl + d  退出当前用户 logout命令 退出当前用户</p><h4 id="3）变量-PS1"><a href="#3）变量-PS1" class="headerlink" title="3）变量$PS1"></a>3）变量$PS1</h4><p>​     由PS1变量控制</p><p>​     [root@alexlnb ~]# echo $PS1</p><p>​     [\u      @      \h      \W]        $</p><p>​    当前用户  分割线  主机名称   当前的路径     用户提示符</p><p>​    查看变量 在变量名的前面加$</p><p>​      echo $PS1</p><p>​      如何修改PS1 临时的</p><p>​      PS1=”[\e[36m][[\e[36m]\u[\e[0m]@\h [\e[32m]\w[\e[36m]][\e[0m]\$“</p><p>​      如何永久修改</p><p>​      加入/etc/profile中</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则grep与扩展正则egrep查找</title>
      <link href="/2020/05/01/zheng-ze-grep-yu-kuo-zhan-zheng-ze-egrep-cha-zhao/"/>
      <url>/2020/05/01/zheng-ze-grep-yu-kuo-zhan-zheng-ze-egrep-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是正则表达式"><a href="#1-什么是正则表达式" class="headerlink" title="1  .什么是正则表达式"></a>1  .什么是正则表达式</h4><p> 1） <strong>正则表达式</strong>就是为了处理大量的<strong>文字|文本|字符串</strong>而定义的一套规则和方法。</p><p>2）通过定义的这些<strong>特殊符号</strong>的辅助，系统管理员就可以快速过滤，替换或输出需要的<strong>字符串</strong>。</p><p>3）Linux正则表达式<strong>一般以行为单位处理</strong>的。</p><p><strong>简单说</strong>：</p><p>m 为处理<strong>大量文本**</strong>|<strong>**字符串而</strong>定义的一套规则和方法。</p><p>m 以行为单位出来,一次处理一行。</p><h4 id="2-如何区分通配符和正则表达式"><a href="#2-如何区分通配符和正则表达式" class="headerlink" title="2  .如何区分通配符和正则表达式"></a>2  .如何区分通配符和正则表达式</h4><p>​    1）不需要思考的判断方法：在三剑客awk、sed、grep egrep 都是正则，其他都是通配符。</p><p>​    2）区分通配符和正则表达式最简单的方法：</p><p><strong>文件[目录]名–&gt;通配符—–&gt;ls *.txt</strong></p><p><strong>文件内容（字符串,**</strong>文本,<strong><strong>【文件】内容）–&gt;</strong></strong>正则表达式 grep “oldboy” oldboy.txt** </p><p>​     3）通配符和正则表达式都有“ *”、“ ?”、“ []”，但是通配符的这些符号都能自身代表任意字符，而正则表达式的这些符号只能代表这些符号前面的字符。</p><h3 id="第二章：基本正则表达式："><a href="#第二章：基本正则表达式：" class="headerlink" title="第二章：基本正则表达式："></a>第二章：基本正则表达式：</h3><h4 id="1）-以什么什么开头"><a href="#1）-以什么什么开头" class="headerlink" title="1）^   以什么什么开头"></a>1）^   以什么什么开头</h4><p>​    例子：[root@alexlnb ~]#grep ‘^m’ oldboy.txt </p><p>​        my blog is http: blog.51cto.com </p><p>​        my qq num is 593528156</p><h4 id="2）-以什么什么结尾的行"><a href="#2）-以什么什么结尾的行" class="headerlink" title="2）$  以什么什么结尾的行"></a>2）$  以什么什么结尾的行</h4><p>例子：[root@alexlnb ~]#grep ‘m $’ oldboy.txt </p><p>​      my blog is http: blog.51cto.com </p><p>​      our site is http:<a href="http://www.lizhenya.com" target="_blank" rel="noopener">www.lizhenya.com</a></p><h4 id="3）’-‘-过滤空格-不显示空行"><a href="#3）’-‘-过滤空格-不显示空行" class="headerlink" title="3）’ ‘   过滤空格 不显示空行"></a>3）’ ‘   过滤空格 不显示空行</h4><p> 例子：[root@alexlnb ~]#grep ‘ ‘ oldboy.txt</p><p>​      I am lizhenya teacher!</p><p>​      I teach linux.</p><p>​      I like badminton ball ,billiard ball and chinese chess!</p><p>​      my blog is http: blog.51cto.com </p><p>​      our site is http:<a href="http://www.lizhenya.com" target="_blank" rel="noopener">www.lizhenya.com</a> </p><p>​      my qq num is 593528156</p><p>​      not 572891888887. </p><h4 id="4）-表示空行"><a href="#4）-表示空行" class="headerlink" title="4）^$    表示空行"></a>4）^$    表示空行</h4><p>例子：[root@alexlnb ~]#grep -v ‘^$’ /etc/selinux/config|grep -v ‘#’</p><p>​      SELINUX=disabled</p><p>​      SELINUXTYPE=targeted</p><h4 id="5）-过滤任意一个字符-不会匹配空行"><a href="#5）-过滤任意一个字符-不会匹配空行" class="headerlink" title="5）.  过滤任意一个字符 不会匹配空行"></a>5）.  过滤任意一个字符 不会匹配空行</h4><p>   例子：grep ‘.’ oldboy.txt</p><p>​     \ 撬棍 转义字符 脱掉马甲打回原形</p><p>​     \n    回车换行</p><p>​     \t      tab键</p><p>​      [root@alexlnb ~]#grep ‘.$’ oldboy.txt</p><p>​      I teach linux.</p><p>​      not 572891888887.</p><h4 id="6）-前面的字符串出现0次或0次以上"><a href="#6）-前面的字符串出现0次或0次以上" class="headerlink" title="6）*     前面的字符串出现0次或0次以上"></a>6）*     前面的字符串出现0次或0次以上</h4><p>​    Linux三剑客正则表达式01坑 *</p><p>​    第一种 0次 没有则显示文件所有内容</p><p>​    第二种多次 显示内容 高亮</p><h4 id="7）-所有-任何符号-包含空行"><a href="#7）-所有-任何符号-包含空行" class="headerlink" title="7）.*      所有 任何符号 包含空行"></a>7）.*      所有 任何符号 包含空行</h4><p>第二坑 正则的贪婪匹配 .* 所有符号 任何符号 连续出现的字符 有多少匹配多少</p><h4 id="8）-匹配中括号中的任意一个字符"><a href="#8）-匹配中括号中的任意一个字符" class="headerlink" title="8）[]      匹配中括号中的任意一个字符"></a>8）[]      匹配中括号中的任意一个字符</h4><p>  例子：[abcd] 不是匹配abcd的单词 而是匹配 a 或者b 或者c 或者d</p><p>​      grep ‘[abcd]’ oldboy.txt -o</p><p>​      [root@alexlnb ~]#grep ‘[a-zA-Z0-9]’ oldboy.txt</p><p>​      [root@alexlnb ~]#grep ‘[0-Z]’ oldboy.txt  </p><p>​      [root@alexlnb ~]#grep ‘[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9X]’ id.txt </p><p>​     孔 150000123874591242</p><p>​     夏 222113859123487192</p><p>​     赵 37142518322922103X</p><p>   神奇的坑 [] 取消字符特殊的含义</p><p>   [root@alexlnb ~]#grep ‘[$LANG]’ oldboy.txt </p><p>   ^^^^^^^^66$$$$$$$^^^$$</p><p>   $LANG</p><p>   [root@alexlnb ~]#grep ‘[.!]$’ oldboy.txt </p><p>   I am lizhenya teacher!</p><p>   I teach linux.</p><p>   I like badminton ball ,billiard ball and chinese chess!</p><p>   not 572891888887.</p><h3 id="第三章：扩展正则"><a href="#第三章：扩展正则" class="headerlink" title="第三章：扩展正则"></a>第三章：扩展正则</h3><h4 id="1）-前一个字符连续出现1次或1次以上"><a href="#1）-前一个字符连续出现1次或1次以上" class="headerlink" title="1）+ 前一个字符连续出现1次或1次以上"></a>1）+ 前一个字符连续出现1次或1次以上</h4><p>[] 与 + 结合使用 过滤 连续的内容</p><p>注： 支持扩展正则要使用 egrep 或者 grep –E</p><h4 id="2）-取反-中括号和默认语句’’-都不会匹配空行"><a href="#2）-取反-中括号和默认语句’’-都不会匹配空行" class="headerlink" title="2）[^]   取反  中括号和默认语句’’ 都不会匹配空行"></a>2）[^]   取反  中括号和默认语句’’ 都不会匹配空行</h4><p>​      例子：grep ‘[^.!$]’ oldboy.txt     # 排除.!$</p><p>​         [root@alexlnb ~]#grep ‘^^’ oldboy.txt </p><p>​         ^^^^^^^^66$$$$$$$^^^$$</p><h4 id="3）-前面的字符出现1次或1次以上"><a href="#3）-前面的字符出现1次或1次以上" class="headerlink" title="3）+  前面的字符出现1次或1次以上"></a>3）+  前面的字符出现1次或1次以上</h4><p>​      例子：[root@alexlnb ~]#egrep ‘8+’ oldboy.txt -o</p><p>​         8</p><p>​         8</p><p>​         88888</p><p>​         8</p><p>​         egrep ‘[a-Z]+’ oldboy.txt -o</p><h4 id="4）-或者"><a href="#4）-或者" class="headerlink" title="4）|    或者"></a>4）|    或者</h4><p>​      例子：[root@alexlnb ~]#egrep -v ‘^$|#’ /etc/selinux/config </p><p>​         SELINUX=disabled</p><p>​         SELINUXTYPE=targeted </p><h4 id="5）"><a href="#5）" class="headerlink" title="5） {}"></a>5） {}</h4><p>​      第一种方法 {n,m}前一个字符至少连续出现n次 最多出现m次</p><p>​     显示执行过程 –o 显示的是单词形式 空格区分 连续的字符</p><p>​      例子：[root@alexlnb ~]#egrep ‘8{1,2}’ oldboy.txt -o</p><p>​         8</p><p>​         8</p><p>​         88</p><p>​         88</p><p>​         8</p><p>​         8</p><p>​         [root@alexlnb ~]#egrep ‘8{2,4}’ oldboy.txt -o</p><p>​         8888</p><p>​         [root@alexlnb ~]#egrep ‘8{2,3}’ oldboy.txt -o</p><p>​         888</p><p>​         88</p><p>   第二种方法8{3} 显示多少次</p><p>   [root@alexlnb ~]#cat id.txt </p><p>   李 2113421234</p><p>   张 500224197</p><p>   王 1233423423432oldboy</p><p>   万 5oldboy</p><p>   吕 lzy235872451234814</p><p>   孔 X50000123874591242</p><p>   夏 2221138X9123487192</p><p>   夏 827313859123482885</p><p>   赵 37142518322922103X</p><p>   王 3142S183229221403X</p><p>grep    过滤字符串</p><p>​    -r    递归搜索</p><p>​    -v    取反</p><p>​    -o    显示匹配过程</p><p>​    -n    显示过滤出内容的行号</p><p>​    -w    统计单词</p><p>​    -i     不区分大小写</p><p>​    -c     过滤内容的总行数</p><p>​    -E     支持扩展正则</p><p>​    -A     匹配到内容的往下n行 -A1</p><p>​    -B     匹配到内容的往上n行 -B1</p><p>​    -C     配置到内容的上下n行 -C1</p><p>​    例子：[root@alexlnb ~]#grep -A1 111 1.txt </p><p>​       111111111111</p><p>​       2222222222</p><p>​       [root@alexlnb ~]#grep -B1 ‘222’ 1.txt </p><p>​       111111111111</p><p>​       2222222222</p><p>​       [root@alexlnb ~]#grep -C1 ‘222’ 1.txt </p><p>​       111111111111</p><p>​       2222222222</p><p>​       333333333333</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘管理</title>
      <link href="/2020/05/01/ci-pan-guan-li/"/>
      <url>/2020/05/01/ci-pan-guan-li/</url>
      
        <content type="html"><![CDATA[<h4 id="1-磁盘的外部结构"><a href="#1-磁盘的外部结构" class="headerlink" title="1  .磁盘的外部结构"></a>1  .磁盘的外部结构</h4><p>​      1）外观</p><p>​         固态硬盘</p><p>​         机械硬盘</p><p>​      2）接口  连接服务器的RAID卡</p><p>​        SAS SATA SCSI</p><p>​        SAS   企业级</p><p>​        SATA   家用</p><p>​        SAS+SATA结合</p><h4 id="2-磁盘的内部结构"><a href="#2-磁盘的内部结构" class="headerlink" title="2  .磁盘的内部结构"></a>2  .磁盘的内部结构</h4><p>​      1）磁盘的主轴，决定了磁盘的转速</p><p>​        家用笔记本  5400RPM</p><p>​        高配置笔记本 7200RPM</p><p>​        企业服务器  10K RPM</p><p>​                  15K RPM 最大的存储 900G SAS盘</p><p>​      2）传动手臂  作用：控制磁头</p><p>​      3）盘片</p><p>​      4）磁头    作用：读写数据 磁力感应 径向运动 盘面的数量=磁头的数量</p><p>​      5）磁道    作用：存储数据 由上到下 由外到里</p><p>​      6）扇区 （磁道上最小的存储单位 512字节 inode block）</p><p>​      7）柱面 （不同盘面上相同的磁道组合在一起）</p><h4 id="3-磁盘阵列RAID"><a href="#3-磁盘阵列RAID" class="headerlink" title="3  .磁盘阵列RAID"></a>3  .磁盘阵列RAID</h4><p>作用：1）提高存储空间</p><p>​            2）提高数据安全</p><p>​            3）提高性能 </p><table><thead><tr><th>分         类</th><th>块</th><th>容量</th><th>安全</th><th>速度</th><th>企业场景</th></tr></thead><tbody><tr><td>RAID 0</td><td>最少1快  硬盘</td><td>所有磁盘的总和</td><td>没有 冗余</td><td>最快</td><td>1.从节点，小弟 不重要的服务器  2.数据库从库 挂掉不影响正常使用的服务器</td></tr><tr><td>RAID 1</td><td>最少两块硬盘</td><td>所有磁盘的一半</td><td>百分百冗余</td><td>慢</td><td>系统盘，监控服务器</td></tr><tr><td>RAID 5</td><td>最少使用3快盘</td><td>损失1快盘</td><td>只能坏一块盘</td><td>较快</td><td>数据库主库 数据量不高 测试服务器</td></tr><tr><td>RAID 01</td><td>只能损坏一边的盘</td><td>所有磁盘的一半</td><td>百分百冗余</td><td>写入一般 读快</td><td></td></tr><tr><td>RAID 10</td><td>两边都可损失一块盘</td><td>所有磁盘的一半</td><td>百分百冗余</td><td>写入快 读快</td><td>高并发，高访问量，数据库主库， 重要的存储</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘分区</title>
      <link href="/2020/05/01/ci-pan-fen-qu/"/>
      <url>/2020/05/01/ci-pan-fen-qu/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：磁盘分区格式"><a href="#第一章：磁盘分区格式" class="headerlink" title="第一章：磁盘分区格式"></a>第一章：磁盘分区格式</h3><h4 id="1-MBR格式-小于2T的磁盘-命令：fdisk"><a href="#1-MBR格式-小于2T的磁盘-命令：fdisk" class="headerlink" title="1  .MBR格式 小于2T的磁盘  命令：fdisk"></a>1  .MBR格式 小于2T的磁盘  命令：fdisk</h4><p>​      GPT格式 大于2T的磁盘    命令：parted</p><p>​      MBR格式分区：</p><p>​         只能4个主分区</p><p>​         要不只能3个主分区+1个扩展分区</p><p>​         要不只能1个主分区+1个扩展分区</p><h4 id="2-磁盘在Linux中显示的名称"><a href="#2-磁盘在Linux中显示的名称" class="headerlink" title="2  .磁盘在Linux中显示的名称"></a>2  .磁盘在Linux中显示的名称</h4><p>​      类型：SAS SATA SCSI</p><p>​      以sd…开头</p><p>​      第一块磁盘 sda：</p><p>​                           sda1      主分区</p><p>​                           sda2      主分区</p><p>​                           sda3      主分区</p><p>​                           sda4      扩展分区（在扩展分区中可以分多个逻辑分区）</p><p>​                           sda5      逻辑分区(逻辑分区必须是从sdb5开始)</p><p>​      第二块磁盘 sdb…</p><p>​      第三块磁盘 sdc…</p><h3 id="第二章：MBR格式fdisk分区挂载"><a href="#第二章：MBR格式fdisk分区挂载" class="headerlink" title="第二章：MBR格式fdisk分区挂载"></a>第二章：MBR格式fdisk分区挂载</h3><h4 id="1-第一个里程碑"><a href="#1-第一个里程碑" class="headerlink" title="1  .第一个里程碑:"></a>1  .第一个里程碑:</h4><p>​      准备一块磁盘插入到系统中，虚拟机需要重启，物理机不需要重启（磁盘支持热插拔）</p><h4 id="第二个里程碑"><a href="#第二个里程碑" class="headerlink" title="第二个里程碑:"></a>第二个里程碑:</h4><p>​      检查系统是否识别到了磁盘   命令：fdisk -l</p><p>​      Disk /dev/sdb: 106 MB, 106954752 bytes, 208896 sectors</p><h4 id="第三个里程碑-使用fdisk-dev-sdb分区"><a href="#第三个里程碑-使用fdisk-dev-sdb分区" class="headerlink" title="第三个里程碑:使用fdisk /dev/sdb分区"></a>第三个里程碑:使用fdisk /dev/sdb分区</h4><p>​      Command (m for help): m</p><p>   d  (delete a partition)                              删除分区</p><p>   g (create a new empty GPT partition table)  创建一个可用的GTP分区表</p><p>   l  (list known partition types  LVM)     列出分区类型</p><p>  m  (print this menu)                                打印帮助</p><p>  n  (add a new partition)                          添加新的分区</p><p>  p  (print the partition table)                  打印分区表</p><p>  q  (quit without saving changes)          退出不保存</p><p>  t  (change a partition’s system id)        改变分区系统id</p><p> w  (write table to disk and exit)             保存并退出</p><p>Command (m for help): n                       # 创建新的分区</p><p>Partition type:</p><p>​    p  primary (0 primary, 0 extended, 4 free)    #p 主分区</p><p>​    e  extended                                                          #e 扩展分区</p><p>Select (default p): p                                              # 默认主分区</p><p>Partition number (1-4, default 1): 1                  # 编号1-4</p><p>First sector (2048-208895, default 2048):        #开始的扇区</p><p>Last sector, +sectors or +size{K,M,G} (2048-208895, default 208895): +20M  # 格式单位不能小写</p><p>Partition 1 of type Linux and of size 20 MiB is set</p><p>Command (m for help): p                                    # 打印分区表</p><p>显示分区表类型和id:</p><p>​    Command (m for help): l                                 # 小写的L</p><p>​     0 Empty      24 NEC DOS     81 Minix / old Lin bf Solaris    </p><p>​     1 FAT12      27 Hidden NTFS Win 82 Linux swap / So c1 DRDOS/sec (FAT-</p><p>更改分区表类型id：</p><p>​    Command (m for help): t</p><p>​    Hex code (type L to list all codes): 83</p><p>​    Command (m for help): p</p><p>​    Device Boot   Start    End   Blocks  Id System</p><p>​    /dev/sdb1    2048    43007   20480  83 Linux</p><h4 id="第四个里程碑-格式化-文件系统选择xfs"><a href="#第四个里程碑-格式化-文件系统选择xfs" class="headerlink" title="第四个里程碑:  格式化 文件系统选择xfs"></a>第四个里程碑:  格式化 文件系统选择xfs</h4><p>   centos  ext3  ext4</p><p>   centos  xfs （格式化效率高 存储效率高 数据库(动态数据)）</p><p>​    partprobe /dev/sdb1         # 通知系统内核识别新的分区 企业环境</p><p>​    mkfs.xfs /dev/sdb1           # 在虚拟环境中直接挂载可使用</p><h4 id="第五个里程碑-挂载并使用磁盘"><a href="#第五个里程碑-挂载并使用磁盘" class="headerlink" title="第五个里程碑:  挂载并使用磁盘"></a>第五个里程碑:  挂载并使用磁盘</h4><p>​    mount /dev/sdb1 /mnt   # 挂载点在工作中要自己创建的/data1</p><h4 id="第六个里程碑-如何开机自动挂载"><a href="#第六个里程碑-如何开机自动挂载" class="headerlink" title="第六个里程碑:  如何开机自动挂载"></a>第六个里程碑:  如何开机自动挂载</h4><p>  1) 写入/etc/rc.local       # 开机自动运行 自动执行 脚本 需要执行权限</p><p>  2) 写入/etc/fstab           # 硬件开机自动挂载</p><p>​         blkid                         # 查看系统所有设备的唯一标识</p><p>​     /dev/sdb1      /mnt     xfs  defaults    0 0</p><p>UUID=f100aa92-19a0-483d-9e6a-72cb154c2de9 /mnt  xfs   defaults   0     0</p><p> 唯一标识 设备名称                挂载点 文件类型 挂载参数 是否备份 开机是否检查</p><p> mount</p><p>​        -o   指定挂载的参数</p><h3 id="第三章：GPT格式"><a href="#第三章：GPT格式" class="headerlink" title="第三章：GPT格式"></a>第三章：GPT格式</h3><p>GPT格式 支持最大128个主分区 parted 直接写入磁盘 直接生效</p><p>fdisk分大于2T磁盘</p><p>Command (m for help): g       # 类型更改为GPT格式</p><p>Building a new GPT disklabel (GUID: BBB5949E-E369-4C58-AD73-F56AA2C9353B)</p><p>Partition number (1-128, default 1):                        #（默认按回车)</p><p>help [COMMAND]  print general help, or help on COMMAND   帮助</p><p>mklabel,mktable LABEL-TYPE   create a new disklabel (partition table)</p><p>​      创建分区类型表</p><p>mkpart PART-TYPE [FS-TYPE] START END   make a partition  mkpart primary 10G 20G     创建分区</p><p>print [devices|free|list,all|NUMBER]   display the partition table, available devices, free space,all found partitions, or a particular partition   显示分区表</p><p>quit    exit program             quit</p><p>rm NUMBER   delete partition NUMBER    删除分区</p><h4 id="第一步-：parted-dev-sdb"><a href="#第一步-：parted-dev-sdb" class="headerlink" title="第一步  ：parted /dev/sdb"></a>第一步  ：parted /dev/sdb</h4><p>(parted) mktable GPT        # 更改分区表类型为GPT格式</p><p>Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost.</p><p>Do you want to continue?</p><p>Yes/No? yes </p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>(parted) mkpart primary 0 1T         # 创建主分区 从0开始 到1T结束 （可以用百分比表示，比如Start? 0% , End? 50%）</p><p>Warning: The resulting partition is not properly aligned for best performance.</p><p>Ignore/Cancel? Ignore </p><p>(parted) mkpart primary 1T 2T       # 创建1个T的主分区</p><h4 id="第三步：格式化"><a href="#第三步：格式化" class="headerlink" title="第三步：格式化"></a>第三步：格式化</h4><p>​    mkfs.xfs /dev/sdb1</p><p>​    mkfs.xfs -f /dev/sdb1      强制格式化</p><h4 id="第四步：挂载"><a href="#第四步：挂载" class="headerlink" title="第四步：挂载"></a>第四步：挂载</h4><p>​    mount /dev/sdb1 /data</p><p> 2  .企业场景:</p><p>​      直接格式化挂载使用</p><p>mkfs.xfs /dev/sdb</p><p>​      mount /dev/sdb /data</p><p>​      系统分区 两个300G 做RAID 1</p><p>​      300G的磁盘进行分区     # 安装操作系统</p><h3 id="第四章：企业案例"><a href="#第四章：企业案例" class="headerlink" title="第四章：企业案例"></a>第四章：企业案例</h3><h4 id="1-java-程序内存不够用，占用大量swap分区，用户正常访问中"><a href="#1-java-程序内存不够用，占用大量swap分区，用户正常访问中" class="headerlink" title="1  .java 程序内存不够用，占用大量swap分区，用户正常访问中"></a>1  .java 程序内存不够用，占用大量swap分区，用户正常访问中</h4><p>​     1) 加内存（可以关机的情况下，）</p><p>​     2）临时扩充swap分区</p><p>​     第一个里程碑：</p><p>​     如何生成20M的文件 放入/dev下</p><p>​     dd if=/dev/zero of=/tmp/20m bs=1M count=20    </p><p>​      input file  output file block size 次数</p><p>​    第二个里程碑：格式化</p><p>​     mkswap /tmp/20m</p><p>​    第三个里程碑：挂载使用swap</p><p>​     swapon /tmp/20m</p><p>   查看 内存 swp使用情况   free -h </p><p>   swapon -f       查看swap挂载情况</p><p>   swapoff /tmp/200m   卸载临时swap</p><h4 id="2-inode满如何查找小文件（显示-no-space-left-on-device-）"><a href="#2-inode满如何查找小文件（显示-no-space-left-on-device-）" class="headerlink" title="2  .inode满如何查找小文件（显示 no space left on device ）"></a>2  .inode满如何查找小文件（显示 no space left on device ）</h4><p>​    1）df –h查看磁盘有剩余</p><p>​     如何查看系统中哪个目录小文件多 目录本身越大 则目录下的小文件越多</p><p>​    2）查看目录本身的大小</p><p>​      ll -d </p><p>​    3）使用find查找大于1M的目录 在工作中尽量使用相对路径查找内容</p><p>​      find / -type d -size +1M</p><p>​      find / -type d -size +1M|xargs ls -lhd</p><p>​      find / -type d -size +1M -exec ls -lhd {} \;</p><p>​      ll -hd <code>find / -type d -size +1M</code></p><p>​    4）使用du命令查看目录的大小 -h</p><p>​     1. 查看根下的第一列G结尾的目录</p><p>​      du -h /|awk ‘$1~ /G$/‘</p><p>​     2. 查看目录下所有文件的大小</p><p>​      du -h /var/log/*</p><p>​     3. 查找到目录下包含G的行</p><p>​      du -h /var/log/*|grep G</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络介绍</title>
      <link href="/2020/05/01/wang-luo-jie-shao/"/>
      <url>/2020/05/01/wang-luo-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章：网络介绍"><a href="#第一章：网络介绍" class="headerlink" title="第一章：网络介绍"></a>第一章：网络介绍</h1><h4 id="1-如何通过网络实现两台主机间通讯"><a href="#1-如何通过网络实现两台主机间通讯" class="headerlink" title="1  .如何通过网络实现两台主机间通讯"></a>1  .如何通过网络实现两台主机间通讯</h4><p>   1)通过网卡把二进制转换为高低电压</p><p>   2)当对端接收后网卡把高低电压转换为二进制信息</p><h4 id="2-网线类型：-双绞线"><a href="#2-网线类型：-双绞线" class="headerlink" title="2  .网线类型： 双绞线"></a>2  .网线类型： 双绞线</h4><p>特点：</p><p>   共8芯 实际使用4芯 其他4芯 额外供电</p><p>   橙白 橙 绿白 蓝 蓝白 绿 棕白 棕</p><p>   其他4芯使用 反向供电 一根网线 当数据线当电源线</p><h4 id="3-设备厂商-路由器-交换机-光设备"><a href="#3-设备厂商-路由器-交换机-光设备" class="headerlink" title="3  .设备厂商 路由器 交换机 光设备"></a>3  .设备厂商 路由器 交换机 光设备</h4><p>华为、cisco、中兴、H3C、锐捷、瑞斯康达、TP-LINK、</p><p>爱立信 电话程控机</p><p>飞鱼星 路由器集成防火墙 访问控制</p><p>家用 傻瓜式</p><p>小米</p><p>TP-LINK</p><p>D-LINK</p><p>腾达</p><p>水星</p><p>海康威视  摄像头</p><h4 id="4-网卡的速率"><a href="#4-网卡的速率" class="headerlink" title="4  .网卡的速率"></a>4  .网卡的速率</h4><p>   1Gbps  bit per second 没秒中传送的bit数据</p><p>   网络的单位计算 bit  1bit=1/8</p><p>   硬盘的单位计算 MB byte 字节 1byte=8bit</p><h4 id="5-什么是交换机"><a href="#5-什么是交换机" class="headerlink" title="5  .什么是交换机"></a>5  .什么是交换机</h4><p>   实现一个网络内多台主机之间的通讯</p><p>   交换机的分类:</p><p>​            二层交换机：傻瓜式 只转发</p><p>​            三层交换机：转发数据 路由功能</p><p>​            四层交换机：转发数据 路由功能 策略控制</p><p>   1）多台PC如何通信</p><p>​    a. 交换机</p><p>​     b. 通过广播的方式</p><p>   2) 不同局域网如何通信</p><p>​      a.通过路由器的路由表 识别不同的局域网</p><h4 id="6-如何生成路由表"><a href="#6-如何生成路由表" class="headerlink" title="6  .如何生成路由表"></a>6  .如何生成路由表</h4><p>​     1) 通过直连生成</p><p>​     2) 通过静态路由 手工指定</p><p>​     3) 通过动态路由 rip opsf eigrp(SICO) bgp isis</p><p>  例子：cisco网络模拟器手动配置</p><p>第一台：pc 192.168.1.1   网关 192.168.1.254</p><p>第二台：pc 192.168.2.1   网关 192.168.2.254</p><p>​     网关 路由器：</p><p>​     Router&gt;                                                      # 用户模式 啥都不能干</p><p>​     Router&gt; enable                                         # 输入enable 进入特权模式</p><p>​     Router#</p><p>​     Router#configure terminal                    # 简写 conf t 进入到配置模式</p><p>​     Router(config)#                                       # 配置模式</p><p>​     Router(config)#hostname R1               # 修改路由器的主机名</p><p>​     R1(config)#exit                                       # 退出到特权模式</p><p>​     R1(config)#interface G0/0                    # 进入到G0/0端口</p><p>​     R1(config-if)#ip ad</p><p>​     R1(config-if)#ip address ?</p><p>​     A.B.C.D IP address</p><p>​     dhcp   IP Address negotiated via DHCP</p><p>​    R1(config-if)#ip address </p><p>​    R1(config-if)#ip address 192.168.1.254 ?</p><p>​    A.B.C.D IP subnet mask</p><p>​    R1(config-if)#ip address 192.168.1.254 255.255.255.0</p><p>​    R1(config-if)#no shutdown                  # 开启端口</p><p>​    Router#show ip route                            # 显示路由表</p><p>​      192.168.1.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>​     C    192.168.1.0/24 is directly connected, GigabitEthernet0/0</p><p>​     L    192.168.1.254/32 is directly connected, GigabitEthernet0/0</p><p>​          192.168.2.0/24 is variably subnetted, 2 subnets, 2 masks</p><p>​     C    192.168.2.0/24 is directly connected, GigabitEthernet0/1</p><p>​     L    192.168.2.254/32 is directly connected, GigabitEthernet0/1</p><p>​    路由表2个不同</p><p>​       1.0      /24</p><p>​       2.0      /24</p><p>​     查看信息一定要到特权模式 #</p><p>​     查看ip地址信息</p><p>​     Router#show ip interface brief </p><p>​     Interface       IP-Address   OK? Method Status        Protocol </p><p>​     GigabitEthernet0/0   unassigned   YES unset administratively down down </p><p>   GigabitEthernet0/1   unassigned   YES unset administratively down down </p><p>   Vlan1          unassigned   YES unset administratively down down</p>]]></content>
      
      
      <categories>
          
          <category> Linux网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考试题</title>
      <link href="/2020/05/01/kao-shi-ti/"/>
      <url>/2020/05/01/kao-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次考试"><a href="#第一次考试" class="headerlink" title="第一次考试"></a>第一次考试</h1><ol><li><p>创建目录/data/oldboy<br>mkdir -p /data/oldboy</p></li><li><p>如果用户想对某一命令详细的了解，可以使用什么命令      C<br>A. ls      B. help     C. man      D. dir</p></li><li><p>centos和redhat的关系或区别<br>都是同源系统<br>Redhat 是需要收费<br>centos是把Redhat中的收费的项目去掉 换了logo  ,免费的 </p></li><li><p>在使用mkdir命令创建新的目录时，在其父目录不存在时先创建父目录的参数选项<br>-p</p></li><li><p>按下（）键能终止当前运行的命令       A<br>A. ctrl+c    B. ctrl+f    C. ctrl+b    D. ctrl+d</p></li><li><p>linux（centos7）系统中查看ip地址的命令是  B<br>A. ipconfig    B. ip address show   C. icmp    D. iptables       </p></li><li><p>关闭linux操作系统的方式，可以使用命令    C<br>A. ctrl+Alt+Del    B. stop   C. shutdown -h now    D. reboot</p></li><li><p>简述raid0 1 的特点<br>0   最少1盘 容量没有损失 等于磁盘总合  冗余度0  读写速率最快<br>1   2块盘 容量损失一半  冗余度100%  写慢读可以   </p></li></ol><ol start="9"><li><p>简述下什么是GPL GNU自由软件<br>GNU  斯托曼  FSF下的一个项目 开发一个开源的类unix系统,没有流行起来,留下了很多组件gcc/gawk/bash<br>GPL  通用许可证  开源软件 随便下载随便修改,但是要把源代码发布出来.</p></li><li><p>服务器硬件组成和大概作用说明<br>内存        运行程序<br>CPU         计算指令,资源调度<br>磁盘        存储数据<br>电源        供电<br>主盘        承载所有的硬件</p></li><li><p>CPU中核数与路数是什么意思<br>核数   1个CPU可以有多个核,核数越多处理能力越强<br>路数   几颗CPU就是几路</p></li><li><p>内存中buffer和cache概念简单说明，并解释在高并发情况下存储数据信息方案<br>buffer  缓冲区  写入内存缓冲区<br>cache   缓存区  读取内存缓存区</p><p>高并发存储数据时,先写入内存的缓冲区,然后定时定量的写入磁盘</p></li><li><p>SSH远程连接出现问题如何进行排查，写出排查思路</p><ol><li>确定ip地址正确</li><li>ping ip地址  保证道路通畅</li><li>telnet ip 22  确定ssh服务开启</li></ol></li><li><p>切换目录的命令，与常见用法<br>cd        cd   cd -    cd ~   cd .   cd.. </p></li><li><p>解释网卡每个配置文件的含义<br>TYPE=Ethernet      网络类型<br>BOOTPROTO=none     获取ip的方式<br>NAME=eth0          配置文件的名称<br>UUID=90528772-9967-46da-b401-f82b64b4acbc    网卡硬件唯一标识符<br>DEVICE=eth0        设备网卡名字<br>ONBOOT=yes         开机自启<br>IPADDR=192.168.2.2  ip地址<br>PREFIX=24     子网掩码<br>NETMASK=255.255.255.0   子网掩码<br>GATEWAY=192.168.2.1   网关<br>DNS1=6.6.6.6         DNS服务器地址</p></li></ol><ol start="16"><li><p>解释程序 进程 守护程序概念<br>程序 :  放在磁盘的代码文件<br>进程 :  正在内存中运行的程序<br>守护进程: 持续运行的程序</p></li><li><p>本地解析配置文件是哪个（也可把主机名解析为IP地址）？DNS解析配置文件是哪个？<br>/etc/hosts<br>/etc/resolv.conf</p></li></ol><ol start="18"><li><p>绝对路径和相对路径的区别<br>绝对:从根开始的路径<br>相对:从当前路径开始路径</p></li><li><p>写出Linux中常用软件安装方式？如何查看是否安装了wget？如何卸载wget？<br>yum rpm 编译安装<br>rpm -qa wget<br>rpm -e wget   yum remove wget</p></li><li><p>写出Linux 命令行快捷键<br> ctrl + a<br> ctrl + e<br> ctrl + k<br> ctrl + c<br> ctrl + u<br> tab<br> esc .</p><h1 id="第二次考试"><a href="#第二次考试" class="headerlink" title="第二次考试"></a>第二次考试</h1><p>满分101   每题4分除15  15题一个1分   翻译题一个一分</p><ol><li><p>在vim中如何替换所有的root为oldboy，直接使用sed如何替换？<br>:%s#root#oldboy#g</p></li><li><p>如何显示文件/etc/passwd前10行的后三行内容？<br>head -10 /etc/passwd|tail -3</p></li><li><p>想要时时输出日志test.log最新的内容 使用哪个命令？<br>tail -f  test.log<br>tailf test.log</p></li><li><p>硬链接和软链接的区别，如何设置目录data软链接为databak？<br>硬链接: inode相同</p><pre><code> 硬链接文件的文件类型是普通文件一个文件的不同入口不能针对目录创建不能跨文件系统创建删除源文件跟删除硬链接文件都能操作文件</code></pre><p>软链接: inode不同</p><pre><code> 属于链接文件相当于win下一个快捷方式删除掉源文件 软链接失效删除软链接对源文件没有影响</code></pre></li></ol><p>ln -s data databak</p><ol start="5"><li><p>一个文件有10行，如何使用head和tail命令只显示文件的第六行内容？<br>head -6 wenjian|tail -1<br>tail -5 wenjian|head -1</p></li><li><p>设置一个别名，当输入rm 命令的时候 提示 rm command is unavailable<br>alias rm=”echo rm command is unavailable”</p></li><li><p>请写出30个学过的命令及参数以及他们的作用？</p></li><li><p>写出Linux中所有的文件类型？哪些文件表示为 - 开头的？<br>普通文件<br>链接文件<br>目录文件<br>块设备文件<br>字符文件<br>管道文件<br>套接字文件</p></li></ol><p>普通文件</p><ol start="9"><li><p>find 查找/data下所有的.txt文件,不区分大小写？<br>find /data -type f -iname “*.txt”</p></li><li><p>find 查找/data目录下 7天前修改过的.log文件并删除？<br>find /data -type f -mtime +7 -name “*.log|xargs rm -rf</p><pre><code>                                 -exec rm {} \;</code></pre></li><li><p>查找/data目录下文件大于10M 并且小于1G的文件，并移动到/tmp下？<br>find /data -type f -size +10M -size -1G |xargs -i mv {} /tmp</p><pre><code>                                -exec mv {} /tmp \;</code></pre></li><li><p>如果 cd /backup 进入backup目录失败，想创建一个/backup 使用什么符号？（前面命令执行失败，则执行后面的命令）<br>||<br>cd /backup || mkdir /backup</p></li><li><p>如何打包/etc  /tmp /opt 三个目录放在/data目录中？<br>cd /<br>tar -zcf data/xiazong.tar.gz etc tmp opt</p></li></ol><p>tar -zcf /data/xiazong.tar.gz /etc /tmp /opt</p><ol start="14"><li>如何把ls test.txt 执行错误的和正确的结果全输出到 test.txt？<br>ls test.txt &gt;test.txt 2&gt;test.txt<br>ls test.txt &gt;test.txt 2&gt;&amp;1<br>ls test.txt &amp;&gt;test.txt</li></ol></li></ol><pre><code>15. 写出以下特殊符号的作用？（不是正则）    ~       家目录    .       当前目录    ..      上一级目录    ；      命令分隔符    &amp;&amp;      并且    ||      或者    #  注释 管理员提示符    $       文件行结尾  普通用户的提示符 提取变量    *       所有== 表示任意字符0到n个            ``      首先执行反引号当中的命令            $()     同上            &#39;&#39;      所见即所得            &quot;&quot;      解析变量 引用字符串16. 如何查看wget命令是否安装，如何查看当前默认的yum源？    rpm -qa|grep wget    rpm -qa wgetyum repolist17. 如何查找/data下所有文件前缀为stu的文件，然后删除，至少两种方法？    find /data -type f -name &quot;stu*&quot; |xargs rm                                 -exec rm {} \;                                ``                                $()18. 写出DNS和全局环境变量和开机自动运行命令的配置文件？    /etc/resolv.conf    /etc/profile    /etc/rc.local19. 创建一个用户test，并设置一个123456密码 如何从root用户切换到test用户？    useradd testpasswd test  123456echo 123456|passwd --stdin testsu test       su - test20. 如何关闭selinux和firewalld 临时+永久？    selinux     setenforce 0            vim /etc/selinux/config    firewalld   systemctl stop firewalld            systemctl disable firewalld21. 过滤test.txt文件的#取反grep -v &#39;#&#39; test.txtgrep -Ev &#39;#|[ ]+&#39; test.txt二。常见错误提示解析类(给出你的翻译) 1.cannot create directory “oldboy” file exists不能创建目录oldboy已存在2.no such file or directory没有这个文件或目录3.-bash: command not found命令没有找到4.connection failedCould not connect to &#39;10.0.0.100&#39; (port 22): Connection failed.连接失败不能连接到10.0.0.100的22端口:连接失败5.name or server not known 名字或服务不认识6.cp: omitting directory ‘/etc/sysconfig/’忽律目录 /etc/sysconfig/7.Permission denied权限拒绝8.Not a directory不是一个目录# 第三次考试一、添加一个UID是888的虚拟用户mysql写出命令**useradd -u 888 -s /sbin/nologin -M mysql****二，测试环境如下，请完成后面题的要求**[root@oldboyedu ~]# cat datafileSteve Blenheim:238-923-7366:95 Latham Lane, Easton, PA 83755:11/12/56:20300Betty Boop:245-836-8357:635 Cutesy Lane, Hollywood, CA 91464:6/23/23:14500Igor Chevsky:385-375-8395:3567 Populus Place, Caldwell, NJ 23875:6/18/68:23400Norma Corder:397-857-2735:74 Pine Street, Dearborn, MI 23874:3/28/45:245700Jennifer Cowan:548-834-2348:583 Laurel Ave., Kingsville, TX 83745:10/1/35:58900Jon DeLoach:408-253-3122:123 Park St., San Jose, CA 04086:7/25/53:85100Karen Evich:284-758-2857:23 Edgecliff Place, Lincoln, NB 92086:7/25/53:85100Karen Evich:284-758-2867:23 Edgecliff Place, Lincoln, NB 92743:11/3/35:58200Karen Evich:284-758-2867:23 Edgecliff Place, Lincoln, NB 92743:11/3/35:58200Fred Fardbarkle:674-843-1385:20 Parak Lane, DeLuth, MN 23850:4/12/23:780900Fred Fardbarkle:674-843-1385:20 Parak Lane, DeLuth, MN 23850:4/12/23:780900Lori Gortz:327-832-5728:3465 Mirlo Street, Peabody, MA 34756:10/2/65:35200Paco Gutierrez:835-365-1284:454 Easy Street, Decatur, IL 75732:2/28/53:123500Ephram Hardy:293-259-5395:235 CarltonLane, Joliet, IL 73858:8/12/20:56700James Ikeda:834-938-8376:23445 Aster Ave., Allentown, NJ 83745:12/1/38:45000Barbara Kertz:385-573-8326:832 Ponce Drive, Gary, IN 83756:12/1/46:268500Lesley Kirstin:408-456-1234:4 Harvard Square, Boston, MA 02133:4/22/62:52600William Kopf:846-836-2837:6937 Ware Road, Milton, PA 93756:9/21/46:43500Sir Lancelot:837-835-8257:474 Camelot Boulevard, Bath, WY 28356:5/13/69:24500Jesse Neal:408-233-8971:45 Rose Terrace, San Francisco, CA 92303:2/3/36:25000Zippy Pinhead:834-823-8319:2356 Bizarro Ave., Farmount, IL 84357:1/1/67:89500Arthur Putie:923-835-8745:23 Wimp Lane, Kensington, DL 38758:8/31/69:126000Popeye Sailor:156-454-3322:945 Bluto Street, Anywhere, USA 29358:3/19/35:22350Jose Santiago:385-898-8357:38 Fife Way, Abilene, TX 39673:1/5/58:95600Tommy Savage:408-724-0140:1222 Oxbow Court, Sunnyvale, CA 94087:5/19/66:34200Yukio Takeshida:387-827-1095:13 Uno Lane, Ashville, NC 23556:7/1/29:57000Vinh Tranh:438-910-7449:8235 Maple Street, Wilmington, VM 29085:9/23/63:68900下面使用grep sed awk解答**显示包含 San的行****grep ‘San’** datafile**显示以 J 开头的人名所在的行** **grep ‘^J’**datafile**awk ‘$2~/^J/’** datafile**显示 700 结尾的行****Grep ‘700$’ datafile****显示不包 834 的行****Grep -v ‘834’ datafile****显示电话号码的区号为 834 的行****awk -F: ‘$2~/^834/’** **显示姓以 K或 k 开头的行**grep -i ‘^k’ datafileawk ‘$2~/^[Kk]/’datafile**三，创建一个用户oldboy用户UID为666 ,组属于为test 不创建家目录 ,在用一条命令为其非交互式创建一个密码123456**groupadd testuseradd -u 666 -g test -M oldboyecho 123456 |passwd --stdin oldboy**四，统计/var/log下文件的个数。**find /var/log -type f |wc -l **五，****批量创建oldboy1-10个用户，密码随机8位，至少两种方法（不会可先略过、做下一题）****Sed****Awk**echo stu{01..10}|xargs -n1 |sed -r &#39;s#(.*)#useradd \1;PASS=$(echo $RANDOM|md5sum|cut -c 1-8);echo $PASS \1 &gt;&gt;/tmp/passwd;echo $PASS|passwd --stdin \1#g&#39; echo stu{01..10}|xargs -n1|awk &#39;{print &quot;useradd &quot;$1&quot; ;&quot;&quot;PASS=$(echo $RANDOM|md5sum|cut -c 1-8); &quot;&quot;echo $PASS &quot;$1&quot;&gt;&gt;/tmp/passwd; &quot;&quot;echo $PASS|passwd --stdin &quot;$1}&#39;|bash**五，用户登陆系统后发下没有命令提示符如何恢复**--4.2.46--4.2.46--4.2.46cp -a /etc/skel/.bash* ~ **六，取出网卡eth0 ip地址（至少2种方法） sed和awk**[root@oldboyedu ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN  link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00  inet 127.0.0.1/8 scope host lo2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000  link/ether 00:16:3e:01:4c:a6 brd ff:ff:ff:ff:ff:ff  inet 172.31.196.105/20 brd 172.31.207.255 scope global eth0\--------------------------------\1.  ip a |awk -F”[ /]+” ‘NR==6{print $3}’\2. ip a|sed -nr ‘6s#^.*net （.*）/20.*$#\1#gp’ ip a s eth0 **七，使用awk取出/etc/passwd第一列和最后一列数据也就是取出用户名和解释器。**root:x:0:0:root:/root:/bin/bashawk -F: ‘{print $1,$NF}’/etc/passwd**八，用awk命令打印文件每一列的总列数**\--------------------------------测试环境[root@oldboyedu ~]# cat a.txt xiaohong 17 qqlaowang 20 aazhangsan 19 bblisi 18 1 2 3 4wangwu 21 a b c d\---------------------------------awk ‘{print NF}’ a.txt**九，写出目前所学过的系统优化之如何关闭firewalld如何关闭selinux、修改字符集为中文**Systemctl stop filrewalldSystemctl disable firewalldSetenforce 0Vim /etc/selinux/configexport LANG=“zh_CN.UTF-8”Vim/etc/locale.conflocalectl set-locale LANG=“zh_CN.UTF-8”**十，用命令行更改 config.txt 文件，把里面所有的“name”更改为“address”**sed -i ‘s#name#address#g’ config.txt**十一，****显示/etc/passwd文件中其默认shell为/bin/bash的用户****awk -F: ‘$NF==”/bin/bash”’ /etc/passwd**​       ‘$NR~/\/bin\/bash/’**十二，显示/etc/passwd文件中其默认shell为非/sbin/nologin的用户**awk -F: ‘$NF!=”/sbin/nologin”’ /etc/passwd**十三，写出CentOS6的启动流程****开机BIOS自建****MBR****引导****GRUB****菜单****加载内核****运行第一个进程init****加载/etc/inittab配置文件****加载/etc/rc.d/rc.sysinit 系统初始化脚本****加载/etc/rc数字.d/ 下面的运行级别的文件****加载mingtty进入登录界面****十四，如何统计每个域名出现了多少次**[**http://www.sina.com/index1.html**](http://www.sina.com/index1.html)[**http://www.baidu.com/index.html**](http://www.baidu.com/index.html)[**http://www.youku.com/index.html**](http://www.youku.com/index.html)[**http://www.sina.com/index.html**](http://www.sina.com/index.html)[**http://www.baidu.com/index1.html**](http://www.baidu.com/index1.html)Awk -F”/” ‘{print $3}’ file|sort |uniq -c |sort -nr**十五，翻译下面错误语句**1，no space left on device    磁盘满啦2，No package ip available 没有可用的ip包3，-bash: LS: command not found LS命令没有发现4，mkdir: cannot create directory ‘aa.txt’: Permission denied 不能创建目录aa.txt 权限不够</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络知识与osi七层模型</title>
      <link href="/2020/05/01/wang-luo-zhi-shi-yu-osi-qi-ceng-mo-xing/"/>
      <url>/2020/05/01/wang-luo-zhi-shi-yu-osi-qi-ceng-mo-xing/</url>
      
        <content type="html"><![CDATA[<h4 id="1-网络硬件"><a href="#1-网络硬件" class="headerlink" title="1  .网络硬件"></a>1  .网络硬件</h4><p>  1）二层交换机   作用：傻瓜式 不可配置 内网数据交换</p><p>   2）三层交换机   作用：支持路由功能 IP地址</p><p>   3）四层交换机   作用：路由 策略</p><p>   4）路由器     作用：路由转发 连接外网</p><h4 id="2-如何查看公网IP地址"><a href="#2-如何查看公网IP地址" class="headerlink" title="2  .如何查看公网IP地址"></a>2  .如何查看公网IP地址</h4><p>   1）Windows查看： 百度 IP 或者 ip138.com</p><p>   2）Centos查看： curl cip.cc </p><p>​            curl ifconfig.me </p><p>   [root@alexlnb ~]#curl cip.cc </p><p>   IP  : 113.88.12.240</p><p>   匹配ip地址：[root@alexlnb ~]#curl -s cip.cc|sed -n ‘1p’|awk ‘{print $3}’</p><p>​         113.88.12.240 </p><h4 id="3-网络类型"><a href="#3-网络类型" class="headerlink" title="3  .网络类型"></a>3  .网络类型</h4><p>  1）局域网   相当于一年教室 一个公司 内网</p><p>   2）城域网   相当于一座城市</p><p>   3）广域网   相当于外网</p><h4 id="4-网络层次结构"><a href="#4-网络层次结构" class="headerlink" title="4  .网络层次结构"></a>4  .网络层次结构</h4><p>   1）核心层：路由器 NAT 网络地址转换 连接外网–&gt;宽带运营商</p><p>   2）汇聚层：线路汇聚 策略控制</p><p>   3）接入层：二层交换机</p><h3 id="第二章：OSI七层模型-（开放式系统互联）"><a href="#第二章：OSI七层模型-（开放式系统互联）" class="headerlink" title="第二章：OSI七层模型 （开放式系统互联）"></a><strong>第二章：OSI七层模型 （开放式系统互联）</strong></h3><p>1）应用层    -&gt;其他设备 应用层  端口</p><p># 应用程序的接口 ftp 、http、 pop3 、telnet</p><p>2）表示层   -&gt;其他设备 表示层     # 压缩 加密</p><p>3）会话层                                         # 会话的建立和断开 会话的保持</p><p>4）传输层                                        # 负责建立连接 提供可靠和不可靠传输 TCP UDP</p><p>5）网络层                                        # 提供网络寻址 路由转发 IP</p><p>6）数据链路层                               # 二层交换 HUB</p><p>7）物理层                                       # 网线 光纤 网卡</p><h4 id="2-TCP（传输控制协议）：-面向连接、传输安全、速度慢"><a href="#2-TCP（传输控制协议）：-面向连接、传输安全、速度慢" class="headerlink" title="2  .TCP（传输控制协议）：   面向连接、传输安全、速度慢"></a>2  .TCP（传输控制协议）：   面向连接、传输安全、速度慢</h4><h4 id="3-UDP（用户数据报协议）-单向连接、不安全、速度快"><a href="#3-UDP（用户数据报协议）-单向连接、不安全、速度快" class="headerlink" title="3  .UDP（用户数据报协议）: 单向连接、不安全、速度快"></a>3  .UDP（用户数据报协议）: 单向连接、不安全、速度快</h4>]]></content>
      
      
      <categories>
          
          <category> Linux网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIM编辑器和linux目录结构、光驱挂载</title>
      <link href="/2020/05/01/vim-bian-ji-qi-he-linux-mu-lu-jie-gou-guang-qu-gua-zai/"/>
      <url>/2020/05/01/vim-bian-ji-qi-he-linux-mu-lu-jie-gou-guang-qu-gua-zai/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：vim-编辑器-vi"><a href="#第一章：vim-编辑器-vi" class="headerlink" title="第一章：vim 编辑器 vi"></a>第一章：vim 编辑器 vi</h3><p> 1）第一个里程碑：如何进入到文件？如何打开文件？</p><p>​    例子：vim oldboy.txt （如果文件不存在，则创建为新文件，无法创建目录）然后vim进入到视图模式。</p><p> 2）第二个里程碑：如何编辑？</p><p>​    输入i o 进入编辑模式</p><p>3）第三个里程碑：如何退出？</p><p>​    先进入到视图模式，多按esc键</p><p>4）第四里程碑：如何保存？</p><p>​    输入  :  进入到底行模式</p><p>​       w     保存（write）</p><p>​       q     退出（quit）</p><p>​       q!    强制退出不保存</p><p>​       wq   保存并退出</p><p>​       wq!    强制保存并退出</p><h3 id="第二章：vim快捷键"><a href="#第二章：vim快捷键" class="headerlink" title="第二章：vim快捷键"></a>第二章：vim快捷键</h3><h4 id="1）光标的移动："><a href="#1）光标的移动：" class="headerlink" title="1）光标的移动："></a>1）光标的移动：</h4><table><thead><tr><th>输入</th><th>作用</th></tr></thead><tbody><tr><td>G</td><td>快速移动到文件的尾部</td></tr><tr><td>10G</td><td>快速移动到文件的第10行</td></tr><tr><td>Gg或者1G</td><td>快速移动到行首</td></tr><tr><td>10gg</td><td>快速移动到文件的第10行</td></tr><tr><td>$或者End</td><td>快速移动光标所在行的行尾</td></tr><tr><td>^或者Home或者0</td><td>快速移动光标所在行到行首</td></tr></tbody></table><h4 id="2）复制粘贴剪切删除、视图模式："><a href="#2）复制粘贴剪切删除、视图模式：" class="headerlink" title="2）复制粘贴剪切删除、视图模式："></a>2）复制粘贴剪切删除、视图模式：</h4><table><thead><tr><th>输入</th><th>作用</th></tr></thead><tbody><tr><td>yy</td><td>复制当前光标所在行</td></tr><tr><td>2yy</td><td>复制光标所在连续两行</td></tr><tr><td>p</td><td>粘贴到光标所在行的下一行</td></tr><tr><td>3p</td><td>粘贴3次内容</td></tr><tr><td>dd</td><td>剪切光标所在的行</td></tr><tr><td>2dd</td><td>剪切光标所在连续的两行</td></tr><tr><td>u</td><td>撤销操作</td></tr><tr><td>d$或者d+End</td><td>剪切光标所在到行尾</td></tr><tr><td>D</td><td>删除光标所在到行尾</td></tr><tr><td>d^或者d+Home或者d0</td><td>删除光标所在到行首</td></tr><tr><td>dG</td><td>删除光标所在行到文件的尾部</td></tr><tr><td>dw</td><td>删除一个单词</td></tr><tr><td>s</td><td>删除一个字母并进入编辑模式</td></tr><tr><td>x</td><td>删除一个字母</td></tr></tbody></table><h4 id="3）进入编辑模式："><a href="#3）进入编辑模式：" class="headerlink" title="3）进入编辑模式："></a>3）进入编辑模式：</h4><table><thead><tr><th>输入</th><th>作用</th></tr></thead><tbody><tr><td>i或者a</td><td>进入编辑模式</td></tr><tr><td>o</td><td>进入光标所在行的下一行编辑</td></tr><tr><td>O</td><td>进入光标所在行的上一行进行编辑</td></tr><tr><td>C</td><td>删除光标所在行行尾并进入编辑模式</td></tr><tr><td>A</td><td>移动到行尾并进入编辑模式</td></tr><tr><td>cc</td><td>删除整行进入编辑模式</td></tr></tbody></table><h4 id="4）批量操作："><a href="#4）批量操作：" class="headerlink" title="4）批量操作："></a>4）批量操作：</h4><pre><code>  1. 输入ctrl+v选中行，然后按大写L，输入要添加的内容，再按两次esc键</code></pre><h3 id="第三章：vim底行模式快捷键"><a href="#第三章：vim底行模式快捷键" class="headerlink" title="第三章：vim底行模式快捷键"></a>第三章：vim底行模式快捷键</h3><p>   u  撤销 </p><h4 id="1-底行模式"><a href="#1-底行模式" class="headerlink" title="1 .底行模式:"></a>1 .底行模式:</h4><p>​         :set nu      显示行号</p><p>​        :set nonu     取消显示行号</p><p>​         ZZ        保存并退出</p><h4 id="2-搜索"><a href="#2-搜索" class="headerlink" title="2 .搜索"></a>2 .搜索</h4><p>​         /         搜索的内容</p><p>​         n         查找下一个内容 往下查找</p><p>​         N         查找上一个内容 往上查找</p><p>​        1copy10   # 把第一行的内容复制到第10行的下面 简写:co</p><p>​        1,3copy10  # 把第一行到第三行的内容复制到第10行的下面</p><p>​        1move10  # 把第一行的内容移动到第10行的下面 简写mo</p><p>​        1,3move10  # 把第一行到第三行的内容移动到第10行的下面</p><p>​        1d        # 删除第一行的内容</p><p>​        1,5d        # 删除第一行到第五行的内容</p><h4 id="3-vim的高亮显示"><a href="#3-vim的高亮显示" class="headerlink" title="3 . vim的高亮显示"></a>3 . vim的高亮显示</h4><p>​         :noh       # 取消高亮显示</p><p>​         :h       查看帮助</p><h4 id="4-vim的替换功能"><a href="#4-vim的替换功能" class="headerlink" title="4 .vim的替换功能"></a>4 .vim的替换功能</h4><p>​        三种方式： :s###g 、:s@@@g 、 :s///g   # s替换标志 g 全局替换   s#需要替换内容#替换后的内容#g  vim只替换光标所在行的。</p><p>​      三种方式 :%s###g 、 :%s@@@ 、 :%s///g   vim全局替换 </p><h3 id="第四章：vim报错"><a href="#第四章：vim报错" class="headerlink" title="第四章：vim报错"></a>第四章：vim报错</h3><p>1）在vim编辑文件的时候，系统自动生成一个隐藏文件.swp结尾。如果正常退出，则生成的.swp会消失。</p><p>2）如果处理不正常退出产生的隐藏文件.swp，就直接删除.swp文件，进行编辑，新写入的内容就会消失。</p><p>​       1）如何恢复</p><p>​           vim -r oldboy.txt  按回车保存退出</p><p>​           删除.swp文件即可</p><p>​       2）不正常退出有：</p><p>​        1. 不小心关闭窗口</p><p>​        2. 台式机断电</p><p>​        3. 自己在多窗口中打开了相同的文件 关闭一个即可</p><p>​        4. 在公司中其他同事在编辑 你俩谁先编辑</p><h3 id="第五章：Linux目录结构-（目录层次标准FHS）"><a href="#第五章：Linux目录结构-（目录层次标准FHS）" class="headerlink" title="第五章：Linux目录结构 （目录层次标准FHS）"></a>第五章：Linux目录结构 （目录层次标准FHS）</h3><h4 id="1-Linux目录的特点"><a href="#1-Linux目录的特点" class="headerlink" title="1 .Linux目录的特点"></a>1 .Linux目录的特点</h4><p>​       1）一切从根开始 / 顶点</p><p>​       2）类似于倒挂的一棵树</p><p>​       3）有层次的目录结构</p><p>​       4）每一个目录都有规范性</p><p>​       5）Linux的目录可以挂在不同的磁盘上</p><p><img src="/medias/62.png" alt></p><h4 id="2-模拟挂载（光驱）过程"><a href="#2-模拟挂载（光驱）过程" class="headerlink" title="2 .模拟挂载（光驱）过程"></a>2 .模拟挂载（光驱）过程</h4><p>​     所有的硬件设备都在linux系统dev目录下</p><p>​     1）把iso文件放入光驱内</p><p>​     2）如何查看光驱里的内容，给光驱设备开一个窗口</p><p>​       /mnt 目录 可以是新创建，可以是以存在的，如果/mnt已存在的目录就临时挂载点。</p><p>​     3）如何挂载，如何开通窗口？</p><p>​       命令   设备名称、窗口/目录</p><p>​         mount /dev/cdrom /mnt/</p><p>​     4）卸载、不用这个设备</p><p>​         umount /mnt/</p><p>​     5）如果挂载点有内容，则会隐藏，卸载后显示内容</p><p>df -h 命令可查看磁盘信息、查看挂载信息。</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习题</title>
      <link href="/2020/05/01/lian-xi-ti/"/>
      <url>/2020/05/01/lian-xi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="练习题一"><a href="#练习题一" class="headerlink" title="练习题一"></a>练习题一</h1><p>1.如何探测网络是否畅通</p><p>   ping 域名</p><p>2.如何查看IP地址(两个命令)</p><p>   ip addr 和  ifconfig</p><p>3.写出你知道的关机跟重启的命令</p><p>   hatl  reboot</p><p>4.如何查看帮助</p><p>   man + 命令<br>   命令 –help</p><p>5.解释命令行提示  [root@linuxlnb ~]#</p><p>   用户名  分隔线  主机名  代表了当前的路径  管理员用户</p><p>6.网卡的配置文件路径</p><p>   cat /etc/sysconfig/network-scripts/ifcfg-eth0</p><p>7.DNS是什么？知道哪些DNS服务器的地址？<br>     域名服务器  域名解析<br>     DNS 是负责把域名解析成IP地址</p><pre><code> 阿里云  223.5.5.5 223.6.6.6 谷歌    8.8.8.8 电信  114.114.114.114</code></pre><p>8.telnet 10.0.0.200 22   这条命令是什么意思<br>   查看主机是否开启22端口<br>9.你知道哪些linux命令行的快捷键<br>   ctrl + l     (小写的L) 清屏<br>   ctrl + a    快速移动光标到行首 Home<br>   ctrl + e    快速移动光标到行尾 End<br>   ctrl + u    剪切光标所在到行首<br>   ctrl + y    粘贴 ctrl+u剪切的内容<br>   ctrl + k    剪切光标所在到行尾<br>   ctrl + d    退出当前登录<br>   ctrl + ←    快速向左移动一个单词<br>   ctrl + →    快速向右移动一个单词<br>   ctrl + s    锁屏（不禁止输入内容）<br>   ctrl + q    解锁<br>   ctrl + r    搜索使用过的命令  history 查看历史<br>   ctrl + c      终止退出当前的操作<br>   tab   补齐<br>   esc .    上一个命令的结尾<br>10.xshell连不上虚拟机如何排查？</p><pre><code>检查ip地址是否跟虚拟机ip地址一样等</code></pre><h1 id="练习题二"><a href="#练习题二" class="headerlink" title="练习题二"></a>练习题二</h1><p>1 .长格式查看/opt目录下的文件<br>ls -l /opt</p><p>2  .复制/etc/hosts文件到/tmp<br>cp /etc/hosts /tmp<br>cp -r</p><p>3  .移动/etc/hosts文件到/tmp下，并重命名为linux<br>mv /etc/hosts /tmp/linux</p><p>4  .写出10个vim编辑器的快捷键<br>yy  复制<br>p   粘贴<br>u   撤销<br>D   删除光标到行尾<br>home  光标移动到所在行行首<br>end                    行尾<br>gg  到行首<br>G   行尾<br>dd  剪切整行<br>dG  剪切光标到行尾<br>dw  删除一个单词<br>s   删除一个字母,进入编辑模式<br>x   删除一个字母</p><p>i<br>o<br>a</p><p>5  .如何挂载光驱</p><p>1）把iso放到光驱</p><p>2）mount /dev/cdrom /mnt</p><p>3）umount /mnt</p><p>6  .查看磁盘信息用哪个命令<br>df -h</p><p>7  .网卡配置文件路径<br>/etc/sysconfig/network-scripts/ifcfg-eth0</p><p>8  .解释以下网卡配置文件内的参数是什么含义？<br>TYPE=Ethernet       网络类型<br>BOOTPROTO=none      地址获取方式(静态:none static 动态:dhcp)<br>NAME=eth0           配置文件的名字<br>DEVICE=eth0         硬件设备的名字<br>ONBOOT=yes          开机自动启动<br>IPADDR=10.0.1.200   IP地址<br>PREFIX=24           子网掩码  netmask 225.255.255.0<br>GATEWAY=10.0.1.254  网关<br>DNS1=223.6.6.6      DNS服务器的地址<br>9  .DNS的配置文件是什么？<br>/etc/resolv.conf</p><p>10  .本地用来解析域名和主机名的文件是哪个？</p><p>/etc/hosts</p><p>11  .如何用命令查看主机名？如何设置主机名？<br>hostname</p><p>临时:hostname 主机名<br>永久:hostnamectl set-hostname 主机名<br>     vim /etc/hostname</p><h1 id="练习题三"><a href="#练习题三" class="headerlink" title="练习题三"></a>练习题三</h1><p>1  .本地解析配置文件          /etc/hosts<br>主机名称的配置文件        /etc/hostname<br>DNS服务器的配置文件       /etc/resolv.conf<br>开机自启动文件            /etc/rc.local<br>登录服务器前显示的内容    /etc/issue  /etc/issue.net    echo &gt;<br>/etc/fstab          开机自动挂载<br>/etc/motd           登录系统后显示文件<br>/etc/inittab        系统运行级别配置文件</p><p>2  .linux系统运行级别有几个，都是什么？</p><p>7个<br>0  关机<br>1  单用户<br>2  多用户,没有NFS网络支持<br>3  完全多用户模式<br>4  待开发<br>5  桌面模式<br>6  重启</p><p>3  .什么是变量？什么是环境变量？<br>名称=变量值<br>普通   环境<br>环境变量全局生效</p><p>4  .写出几个你知道的系统默认的环境变量<br>$PWD  当前路径<br>$LANG 查看字符集<br>$PATH 命令的路径<br>$USER<br>$home<br>$shell<br>$PS1<br>$time-style</p><p>5  .如何让环境变量全局生效？又如何针对当前登录的用户生效？<br>/etc/profile              .bash_profile</p><p>6  .别名是什么？如何设置别名全局生效？如何设置别名只对当前用户生效？<br>命令的小名   alias<br>/etc/bashrc<br>.bash_bashrc</p><p>7  .Linux系统中有几种安装软件的方式？<br>3种<br>yum   rpm   编译安装</p><p>8  .如何查看我们有没有安装这个软件？这个软件都安装了什么？如何卸载这个软件？<br>rpm -qa  软件包<br>rpm -ql 软件包<br>rpm -e 软件包<br>yum remove 软件包  </p><p>9  .什么是绝对路径？什么是相对路径？<br>从根开始<br>从当前目录开始</p><p>10  .翻译：<br>rm: cannot remove `/tmp/data/‘: Is a directory<br>无法删除/tmp/data/   这是一个目录<br>invalid option<br>无效的选项<br>command not found<br>命令找不到<br>connection failed<br>连接失败</p><h1 id="练习题四"><a href="#练习题四" class="headerlink" title="练习题四"></a>练习题四</h1><p>1  .Linux系统有几个运行级别，都有什么，是什么意思？<br>    7个<br>    0  关机<br>    1  单用户<br>    2  多用户,没有NFS<br>    3  完整多用户<br>    4  待开发<br>    5  桌面模式<br>    6  重启    </p><p>2  .说出下面几个文件的作用及什么文件？<br>/etc/rc.local           开机自动执行<br>/var/log/messages       系统日志<br>/var/log/secure         系统安全日志<br>/etc/fstab       自动挂载文件<br>/etc/hosts       本地的DNS配置文件<br>/etc/resolv.conf   系统DNS配置文件<br>/proc/loadavg     系统负载信息<br>/proc/mounts      挂载信息<br>/proc/meminfo     内存信息<br>/proc/cpuinfo     CPU信息<br>网卡配置文件      /etc/sysconfig/network-scripts/ifcfg-eth0<br>DNS配置文件<br>主机名设置文件    /etc/hostname<br>用户登录终端前显示信息的文件    /etc/issue /etc/issue.net<br>3  .如何查看系统的内存、磁盘、cpu的使用情况<br>   free -h       df -h     lscpu</p><p>4  .描述buffer 和cache 的区别<br>缓冲区  写入缓冲区<br>缓存区  读取缓存区<br>5  .linux下面ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 出现unknown host 错误如何排查?<br>ping 223.6.6.6<br>/etc/resolv.conf</p><p>6  .如何设置别名，设置rm别名为”rm command is not allowed to use”，并永久生效。</p><p>alias rm=”echo rm command is not allowed to use”<br>/etc/bashrc</p><p>7  .如何查看系统的负载信息<br>w<br>uptime<br>top</p><p>8  .把/data 目录复制到 /tmp目录下并改名为data_20191020 (20191020为当天时间)<br>cp -r /data /tmp/data_$(date +%Y%m%d)</p><p>9  .发现命令行变成了-bash-4.2$  怎么办</p><p>cp -a /etc/skel/.bash* ~</p><h1 id="练习题五"><a href="#练习题五" class="headerlink" title="练习题五"></a>练习题五</h1><p>1  .33580479 -rw-r–r–  1 root  root  42 Oct 14 22:50 test.txt<br>请说明每一列是什么意思？<br>inode号  文件类型 文件权限  硬连接数  属主 属组  文件大小   修改时间  文件名</p><p>2  .请说明什么是inode？<br>存放文件属性+block位置的指针 除文件名</p><p>3  .请说明什么是block？<br>文件的实体<br>4  .请说明什么是硬链接及软连接？<br>硬链接: 一个文件不同的入口<br>软链接: 指向源文件,相当于windows的快捷方式</p><p>链接文件用什么命令来创建呢？<br>硬连接  ln<br>软链接  ln -s</p><p>5 .你都知道哪些文件类型?</p><ul><li>普通文件<br>d    目录文件<br>p    管道文件<br>c    字符文件<br>l    链接文件<br>b    块设备文件<br>s    套接字文件</li></ul><p>6  .如何知道wget命令属于哪个包？<br>rpm -qf <code>which wget</code></p><p>7  .查找/root下所有的隐藏文件<br>find /root -type f -name “.*”</p><p>8  .查找所有叫做oldboy的文件不区分大小写<br>find / -type f -iname “oldboy”<br>9  .查找/root目录下txt结尾和log结尾的文件<br>find /root -type f -name “<em>.txt” -o -name “</em>.log”</p><p>10  .查找/root目录下大于50M小于100M的.txt结尾的文件<br>find /root -type f -size +50M -size -100M -name “*.txt”</p><p>11  .查找本目录下3天内的.txt结尾的文件，然后删除掉<br>rm <code>find . -type f -mtime -3 -name &quot;*.txt&quot;</code></p><p>12  .查找本目录下5天之前的文件移动到/tmp<br>mv <code>find . type f -mtime +5</code> /tmp </p><h1 id="练习题六"><a href="#练习题六" class="headerlink" title="练习题六"></a>练习题六</h1><p>1  .33580479 -rw-r–r–  1 root  root        42 Oct 14 22:50 test.txt<br>请说明每一列是什么意思？<br>inode号  文件类型 文件权限  硬链接数 属主 属组 文件大小  修改时间 文件名  </p><p>2  .请说明硬链接及软连接的特点？<br>硬链接:   1）相同于文件有多个入口<br>          2）inode号相同<br>          3）删除源文件或者硬连接文件,文件不会真正删除<br>          4）文件的硬链接个数是1   目录的硬链接个数为2<br>          5）硬链接文件普通文件<br>          6）硬链接不能针对于目录创建<br>          7）硬链接不能跨文件分区创建</p><p>软链接:<br>         1）inode  不同<br>         2）相当于win快捷方式<br>         3）删除源文件  软链接文件失效  删除软连接,源文件不受影响</p><p>3  .创建一个目录oldboy，则oldboy目录的硬链接数是多少？<br>2个</p><p>4  .在oldboy目录下创建一个文件oldgirl，则oldboy目录的硬链接是多少？如果oldgirl是目录的话，oldboy目录的硬链接数又是多少？</p><p>2个<br>/oldboy<br>/oldboy/.</p><p>3个<br>/oldboy<br>/oldboy/.<br>/oldboy/oldgirl/..</p><p>5  .只在/root目录下及子目录下查找.txt结尾的文件？<br>find /root -maxdepth 2 -type f -name “*.txt”</p><p>6  .查找/root下7天前30天内修改过的文件<br>find /root -type f -mtime +7 -mtime -30</p><p>7  .查找/var目录下属主为root的文件<br>find /var -type f -user root</p><p>8  .查找/var目录下属组不为root的文件<br>find /var -type f -group not root    学委做法<br>find /var -type f -not -group root    夏总<br>find /var -type f ! -group root  我</p><p>9  .一个文件的权限是-rwxr—w- 请解释什么意思？<br>普通文件<br>前三位   属主     读写执行<br>中三位   属组     读<br>后三位   其他人   写</p><p>10  .将/etc/hosts打包压缩到/tmp下？（格式20191112.tar.gz）<br>cd /<br>tar -zcf /tmp/<code>date +%Y%m%d</code>.tar.gz /etc/hosts</p><h1 id="练习题七"><a href="#练习题七" class="headerlink" title="练习题七"></a>练习题七</h1><p>1  .过滤以m开头的行<br>grep ‘^m’ </p><p>2  .过滤以m结尾的行<br>grep ‘m$’</p><p>3  .排除空行, 并打印行号<br>egrep -nv ‘^$’<br>grep -v ‘^$’</p><p>4  .匹配任意一个字符,不包括空行<br>grep ‘.’</p><p>5  .匹配所有<br>grep ‘.*’</p><p>6  .匹配以点结尾的行<br>grep ‘.$’ oldboy.txt </p><p>7  .匹配有abc任意一个字母的行<br>grep ‘[abc]’ oldboy.txt</p><p>8  .匹配含有数字的行<br>grep ‘[0-9]’</p><p>9  .匹配所有小写字母<br>grep ‘[a-z]’</p><p>10  .匹配重复数字8, 3-5次<br>egrep ‘[8]{3,5}’ oldboy.txt</p><p>11  .显示/etc/passwd文件中其默认shell为非/sbin/nologin的用户<br>grep -v ‘/sbin/nologin’ /etc/passwd</p><p>12  .显示/proc/meminfo文件中以大写或小写s开头的行用两种方式<br>grep ‘^[Ss]’ /proc/meminfo<br>grep -i ‘^s’ /proc/meminfo<br>egrep ‘^(s|S)’ /proc/meminfo<br>egrep ‘^s|^S’ /proc/meminfo</p><p>13  .找出/etc/passwd文件中的一位数或两位数<br>egrep ‘\&lt;[0-9]{1,2}&gt;‘ /etc/passwd<br>egrep ‘\&lt;[0-9]&gt;|\&lt;[0-9][0-9]&gt;‘ /etc/passwd<br>egrep -w ‘[0-9]{1,2}’ /etc/passwd<br>egrep ‘\b[0-9]{1,2}\b’ /etc/passwd<br>egrep -v ‘[0-9]{3,}’ /etc/passwd</p><p>14  .显示test.txt文件中以至少一个空白字符开头的行<br>egrep ‘^[ ]+’ 456.txt<br>egrep ‘^[[:space:]]+’ 456.txt<br>egrep ‘^\s+’ 456.txt</p><h1 id="练习题八"><a href="#练习题八" class="headerlink" title="练习题八"></a>练习题八</h1><p>1  .先删除1到3行,然后管道给后面的sed进行oldboy替换成haoge<br>sed ‘1,3d’ abc.txt |sed ‘s/oldboy/haoge/g’</p><p>2  .使用-e完成上道题的操作<br>sed -i -e ‘1,3d’ -e ‘s/oldboy/haoge/g’ abc.txt </p><p>3  .打印匹配halt的行<br>sed -n ‘/halt/p’ abc.txt</p><p>4  .打印第二行的内容<br>sed -n ‘2p’ abc.txt</p><p>5  .打印最后一行<br>sed -n ‘$p’ abc.txt</p><p>6  .从第三行删除到最后一行<br>sed -i ‘3,$d’ test.txt</p><p>7  .匹配oldboy进行该行删除<br>sed -i ‘/oldboy/d’ abc.txt</p><p>8  .在文件的第3行上面添加内容oldboy<br>sed ‘3i oldboy’ </p><p>9  .在文件的第3行下面添加内容oldboy<br>sed ‘3a oldboy’</p><p>10  .替换每行出现的第一个root<br>sed ‘s/root/oldboy/‘ </p><p>11 .匹配包含有root的行进行替换<br>sed ‘/root/s#root#oldboy#g’</p><p>12  .删除文件中注释的行<br>sed -i ‘/^#/d’ </p><p>13  .将第二行到第六行加上注释信息<br>sed -i ‘2,6s/^/#/g’</p><p>14  .Sed后向引用  取出ip地址<br>ip addr|sed -rn ‘9s#^.<em>net (.</em>)/24.*$#\1#gp’</p><p>15  .显示/etc/passwd文件中其默认shell为/bin/bash的用户<br>grep ‘/bin/bash$’ /etc/passwd</p><p>16  .显示test.txt文件中以#开头，后面至少一个空白字符，而后又有至少一个非空白字符的行<br>[root@alexlnb ~]#sed -nr ‘/^#[[:space:]]+[^[:space:]]+/p’ abc.txt</p><p>xiaodong love www  </p><p>[root@alexlnb ~]#sed -nr ‘/^#[ ]+[^ ]+/p’ abc.txt</p><p>xiaodong love www  </p><p>[root@alexlnb ~]#sed -nr ‘/^#\s+\S+/p’ abc.txt</p><p>17  .找出netstat -tan 命令执行行结果中以LISTEN结尾或后跟着空白字符结尾的行<br>netstat -tan|sed -nr ‘/LISTEN$|LISTEN[ ]+/p’</p><p>18  .找出/etc/rc.d/init.d/functions文件中某单词后面跟一组小括号的行，形如：hello()<br>egrep -o ‘[a-Z]+()‘ /etc/rc.d/init.d/functions</p><p>19  .找出ifconfig命令结果中的1-255之间的数字</p><h1 id="练习题九"><a href="#练习题九" class="headerlink" title="练习题九"></a>练习题九</h1><p>1  .匹配/etc/passwd 文件中含有root的行<br>awk ‘/root/‘ /etc/passwd</p><p>2  .匹配/etc/passwd中的空行的行号<br>awk ‘/^$/{print NR}’ /etc/passwd</p><p>3  .打印出/etc/passwd中root用户的UID和GID<br> awk -F: ‘/^root/{print $3,$4}’ /etc/passwd</p><p>4  .打印出/etc/passwd中所有用户的shell解释器<br>awk -F: ‘{print $1,$NF}’ /etc/passwd</p><p>5  .匹配出/etc/passwd中最后一列是/bin/bash的行<br>awk -F: ‘$NF~/\/bin\/bash/‘ /etc/passwd<br>awk -F: ‘$NF==”/bin/bash”‘ /etc/passwd</p><p>6  .匹配出UID小于5 的用户信息<br>awk -F: ‘$3&lt;5’ /etc/passwd</p><p>7  .打印出/etc/passwd中每行一共有多少列(分隔符为冒号)<br>awk -F: ‘{print NF}’ /etc/passwd</p><p>8  .打印出整个文件的内容加上行号<br>awk ‘{print NR,$0}’ /etc/passwd</p><p>9  .匹配出/etc/passwd中最后一列不是/sbin/nologin的行<br>awk -F: ‘$NF!=”/sbin/nologin”‘ /etc/passwd</p><p>10  .匹配出注释行跟空行的行号<br>awk ‘/^#|^$/{print NR,$0}’ /etc/selinux/config</p><p>11 .不显示第一行 /etc/passwd<br>awk ‘NR&gt;1’ /etc/passwd </p><p>12  .请打印出/etc/passwd里以root开头的行的倒数第二列<br>[root@alexlnb ~]#awk -F: ‘/^root/{print $(NF-1)}’ /etc/passwd<br>/root<br>[root@alexlnb ~]#head -1 /etc/passwd<br>root:x:0:0:root:/root:/bin/bash</p><p>13  .awk取出ip地址<br>ip addr show|awk -F”[ /]+” ‘NR==9{print $3}’</p><h1 id="练习题十"><a href="#练习题十" class="headerlink" title="练习题十"></a>练习题十</h1><p>1  .请详细描述linux系统(centos6)从打开主机电源到进入登录界面整个过程的流程<br>   bios自检–&gt;MBR引导分区—&gt;加载grup菜单—&gt;加载内核—&gt;运行第一个进程init<br>  —&gt;读取/etc/inittab配置文件—&gt;读取/etc/rc.sysinit系统初始化脚本—&gt;<br>  加载运行级别目录下的脚本/etc/rc数字.d/—&gt;加载mingtty进入登录界面</p><p>2  .让系统开机启动某个脚本或服务有哪些方法？<br>  chkconfig iptables on<br>  systemctl enable firewalld</p><p>  /etc/rc.local       sh /data/xiaodong.sh </p><p>3  .根据access.log日志文件对用户ip地址进行去重处理并显示重复数量(第一列为ip地址)<br>  awk ‘{print $1}’ access.log|sort -n|uniq -c|sort -nr</p><p>4  .添加一个UID是888的虚拟用户mysql写出命令</p><p>useradd -u 888 -s /sbin/nologin -M mysql</p><p>5  .oldboy用户无法在/etc/目录创建或删除文件，什么原因？<br>权限不够<br>/etc 目录对其他用户权限位缺少W权限</p><p>6  .如何删除oldboy用户，并把家目录一并删除<br>userdel -r oldboy</p><p>7  .不显示test.txt文件中的空行或以#开头的行（3种方法）<br>egrep -v ‘^$|^#’ test.txt<br>sed -r ‘/^$|^#/d’ test.txt<br>awk ‘!/^$|^#/‘ test.txt</p><p>8  .把mysql-5.6.34.tar.gz解压到/application目录下<br>tar xf mysql.tar.gz -C  /application</p><p>9  .请问如下登录环境故障的原理及解决办法？<br>-bass-4.2$<br>-bash-4.2$</p><p>/etc/skel/<br>cp -a /etc/skel/.bash* ~</p><p>10  .请描述linux的运行级别不同数字的含义?<br>0 关机<br>1 救援模式，单用户<br>2 不完全多用户<br>3 完整多用户模式<br>4 未开发<br>5 桌面模式<br>6 重启</p><p>11  .请问你使用的linux发行版是什么？如何查看linux发行版信息？<br>centos<br>cat /etc/redhat-release<br>CentOS Linux release 7.5.1804 (Core) </p><p>12  .vim有几种工作模式<br>命令模式<br>编辑模式<br>底行命令模式</p><p>13  .免交互给oldboy用户设置密码123456<br>echo 123456|passwd –stdin oldboy</p><p>14  .su命令跟su - 命令有什么区别？<br>切换用户<br>su   环境变量不改变<br>su - 环境变量进行改变</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语总结</title>
      <link href="/2020/05/01/ying-yu-zong-jie/"/>
      <url>/2020/05/01/ying-yu-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>minimal                 最小化<br>install                     安装<br>Everything             所有<br>torrent                    种子<br>test                           测试<br>troubleshooting 故障排除<br>quit                           退出<br>continue                  继续<br>commit                    提交<br>date                          日期<br>time                          时间<br>language                 语言<br>software                  软件<br>local                        本地<br>done                        完成<br>source                      源<br>configure   配置 conf cfg config 配置文件<br>add                          添加<br>del                           删除<br>new                         新的<br>old                         老的旧的<br>mount                    挂载<br>accept                    接收<br>change                   改变<br>network                 网络<br>hostname             主机名<br>manual                  手动<br>address                  地址<br>gateway                 网关<br>save                        保存<br>begin                      开始<br>end                         结束<br>reboot                    重启<br>login                      登录<br>password              密码 passwd<br>state                      状态<br>up                           开启<br>Connection          连接<br>failed                     失败<br>Shutdown scheduled for Mon 2019-12-09 11:27:47 CST, use ‘shutdown -c’ to cancel.<br>Broadcast message from root@oldboyedu (Mon 2019-12-09 11:17:47 CST):<br>广播       消息<br>The system is going down for power-off at Mon 2019-12-09 11:27:47 CST!<br>Broadcast message from root@oldboyedu (Mon 2019-12-09 11:19:52 CST):<br>The system shutdown has been cancelled at Mon 2019-12-09 11:20:52 CST!<br>exit                         退出<br>quit                        退出<br>print                      打印<br>working                工 作<br>directory              目录<br>No such file or directory<br>找不到  文件 或 目录<br>mkdir: cannot create directory ‘/oldboy’: File exists<br>       无法      创建   目录      /oldboy    文件已存在<br>mkdir: cannot create directory ‘/oldboy/alex/lizhenya’: No such file or directory<br>command not found 命令找不到 命令写错 或者 没有安装这个命令<br>-bash: llss: No such file or directory       PATH没了</p><p>cp: overwrite ‘/opt/oldboy.txt’?  是否覆盖 /opt/oldboy.txt<br>cp: omitting directory ‘/etc/’      忽略目录 /etc    </p><p>rm: cannot remove ‘/opt/oldboy/test1’: Is a directory<br>    无法  删除     test                  这是个目录<br>“oldboy/alex.txt” E212: Can’t open file for writing<br>                        无法打开文件目录写入内容</p><p>mount: /dev/sr0 is write-protected, mounting read-only<br>write                   写<br>read                    读<br>protected          保护<br>Nothing to do    没事可干<br>no package route available  没有有效的包<br>file truncated             文件被切割<br>Total                  总的 全部的<br>Free                   空闲 自由的<br>usage                使用方法<br>Static                 静态<br>Kernel               内核<br>protected         保护<br>running            运行<br>character         字符<br>special              特殊<br>Operation not permitted  不允许操作</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="/2020/05/01/jin-cheng/"/>
      <url>/2020/05/01/jin-cheng/</url>
      
        <content type="html"><![CDATA[<p>1  .文件被彻底删除</p><p>​    1）硬链接为0</p><p>​    2）进程调用为0</p><p>   [root@alexlnb ~]#lsof |grep messages</p><p>   abrt-watc  717     root  4r   REG        8,3  2759937  1095001 /var/log/messages (deleted)</p><p>systemctl status rsyslog.service             查看日志服务状态</p><p>systemctl restart rsyslog                         重启日志服务 </p><p>netstat -tnulp                                            查看端口</p><p>kill -9 ip号                                                  直接干掉那个进程</p><p>   lsof -i :3306                                             列出谁在使用某个端口</p><p>   ps axuf                                                      状态信息栏</p><p>   a                 表示所有进程</p><p>   x                 不以终端区分的所有进程</p><p>   u                 显示用户</p><p>   f                  以树状显示结构</p><p>   R                 运行状态</p><p>   S                  可中断睡眠 当进程优先级高的抢占资源时 可中断此进程</p><p>   T                 进程被暂停</p><p>   D                 不可中断进程 当进程优先级高的抢占资源时 不可中断此进程</p><p>   Z                  僵尸进程</p><p>   Ss                代表父进程</p><p>   S&lt;                进程优先级高 Ss&lt;</p><p>   SN               进程优先级低</p><p>   R+                进程在前台运行</p><p>   S&lt;sl</p><p>   ctrl+z          暂停进程</p><p>   top命令 和 w 命令相同?</p><p>   top - 11:58:35 up 1 day, 40 min, 3 users, load average: 0.23, 0.16, 0.10</p><p>进程基本概述  </p><p>监控进程状态</p><p>管理进程状态</p><p>管理后台进程</p><p>进程的优先级</p><p>系统平均负载</p><h3 id="一、进程基本概述"><a href="#一、进程基本概述" class="headerlink" title="一、进程基本概述"></a>一、进程基本概述</h3><p>1.什么是进程</p><p>​     当我们运行一个程序，那么我们将运行的程序叫进程</p><p>​     PS1：当程序运行为进程后，系统会为该进程分配内存，以及进程运行的身份和权限</p><p>​     PS2：在进程运行的过程中，服务器上会有各种状态来表示当前进程的指标信息</p><p>2.程序和进程的区别</p><p>​     程序是数据和指令的集合，是一个静态的概念，比如/bin/ls /bin/cp 等二进制文件，同时程序可以长期存在系统中</p><p>​     进程是程序运行的过程，是一个动态的概念，进程是存在生命周期概念的，也就是说进程随着程序的终止而销毁，不会永久存在系统中</p><p>3.程序的生命周期</p><p>一个对象从无到有、从有到无过程称为生命周期（就绪态 执行态 僵死态 停止态 睡眠态）</p><p><img src="/medias/63.png" alt></p><p>当父进程接收到任务调度时，会通过fock派生子进程来处理，子进程会继承父进程衣钵（相当于完全复制了一份父进程的信息）</p><p>\1.   子进程在处理任务代码时，父进程会进入等待状态中</p><p>\2.   子进程在处理任务代码后，会执行退出，然后唤醒父进程来回收子进程的资源</p><p>\3.   如果子进程在处理任务过程中，父进程退出，子进程没有退出，子进程没有被父进程管理，则变为僵尸进程</p><p>\4.   每个进程都有自己的PID号，子进程称为PPID</p><h3 id="二、监控进程状态"><a href="#二、监控进程状态" class="headerlink" title="二、监控进程状态"></a>二、监控进程状态</h3><p>程序在运行后，我们需要了解进程的运行状态，查看进程的状态分为:静态和动态两种方式</p><p>\1.   使用ps命令查看当前的进程状态（静态）</p><p>ps –auxf常用组合方式查看进程、PID、占用cpu百分比，占用内存百分比，状态、执行的命令等</p><p>-a显示所有终端机下执行的进程，除了阶段作业领导者之外</p><p>  -u以用户为主的格式来显示进程状况</p><p>-x显示所有进程，不以终端机来区分</p><p>  -f用ASCII字符显示树状结构，表达进程间的相互关系</p><p><img src="/medias/64.png" alt></p><table><thead><tr><th><strong>标志</strong></th><th><strong>意义</strong></th></tr></thead><tbody><tr><td>USER</td><td>该 process 属于那个使用者账号的</td></tr><tr><td>PID</td><td>该 process 的号码</td></tr><tr><td>%CPU</td><td>该 process 使用掉的 CPU 资源百分比</td></tr><tr><td>%MEM</td><td>该 process 所占用的物理内存百分比</td></tr><tr><td>VSZ</td><td>该 process 使用掉的虚拟内存量 (Kbytes)</td></tr><tr><td>RSS</td><td>该 process 占用的固定的内存量 (Kbytes)</td></tr><tr><td>TTY</td><td>该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</td></tr><tr><td>STAT</td><td>该程序目前的状态</td></tr><tr><td>START</td><td>该 process 被触发启动的时间</td></tr><tr><td>TIME</td><td>该 process 实际使用 CPU 运作的时间</td></tr><tr><td>COMMAND</td><td>该程序的实际指令[]内核态进程  无[] 用户进程</td></tr></tbody></table><table><thead><tr><th>STAT基本状态</th><th>描述</th><th>STAT状态+符号</th><th>描述</th></tr></thead><tbody><tr><td>R</td><td>进程运行</td><td>s</td><td>进程是控制进程， Ss进程的领导者，父进程</td></tr><tr><td>S</td><td>可中断睡眠</td><td>&lt;</td><td>进程运行在高优先级上，S&lt;优先级较高的进程</td></tr><tr><td>T</td><td>进程被暂停</td><td>N</td><td>进程运行在低优先级上，SN优先级较低的进程</td></tr><tr><td>D</td><td>不可中断进程</td><td>+</td><td>当前进程运行在前台，R+该表示进程在前台运行</td></tr><tr><td>Z</td><td>僵尸进程</td><td>l</td><td>进程是多线程的，Sl表示进程是以线程方式运行</td></tr></tbody></table><p>案例1：</p><p>1）在终端1上运行vim</p><p>[root@lzy ~]# vim test</p><p>2）在终端2上运行ps命令查看状态</p><p>[root@lzy ~]# ps axu|grep test #S表示可中断睡眠模式 +表示前台运行</p><p>root   14240 0.1 0.5 151868 5676 pts/1  S+  10:48  0:00 vim test</p><p>root   14271 0.0 0.0 112660  968 pts/2  R+  10:48  0:00 grep –color=auto test</p><p>3）在终端1上挂起vim命令按下: ctrl+z</p><p>4) 回到终端2再次运行ps命令查看状态</p><p>root@lzy ~]# ps axu|grep test  # T表示停止状态  </p><p>root   14240 0.0 0.5 151868 5676 pts/1  T  10:48  0:00 vim test</p><p>root   14279 0.0 0.0 112660  964 pts/2  R+  10:51  0:00 grep –color=auto test</p><p>案例2</p><p>PS命令查看不可中断状态进程</p><p>使用tar打包文件时，可以通过中断不断查看状态，由S+,R,D+来回切换</p><p>[root@lzy ~]# ps axu|grep tar|grep -v grep</p><p>root   14289 2.6 0.1 124268 1888 pts/2  S+  10:56  0:01 tar zcf etc.tar.gz /etc/ /usr/ /var</p><p>[root@lzy ~]# ps axu|grep tar|grep -v grep</p><p>root   14289 2.7 0.2 124380 2240 pts/2  R+  10:56  0:01 tar zcf etc.tar.gz /etc/ /usr/ /var</p><p> [root@lzy ~]# ps axu|grep tar|grep -v grep</p><p>root   14289 2.9 0.2 124916 2724 pts/2  D+  10:56  0:01 tar zcf etc.tar.gz /etc/ /usr/ /var</p><p>\2.   使用top命令查看当前的进程状态 动态</p><p><img src="/medias/65.png" alt></p><table><thead><tr><th><strong>任务</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>Tasks:73 total</td><td>当前进程的总数</td></tr><tr><td>2 running</td><td>正在运行的进程数</td></tr><tr><td>71 sleeping</td><td>睡眠的进程数</td></tr><tr><td>0 stopped</td><td>停止的进程数</td></tr><tr><td>0 zombie</td><td>僵尸进程数</td></tr><tr><td>%Cpu(s):   49.2 us</td><td>系统用户进程使用CPU百分比</td></tr><tr><td>5.7 sy</td><td>内核进程占用CPU百分比，内核是于硬件进行交互</td></tr><tr><td>ni</td><td>优先调度进程占用CPU的时间</td></tr><tr><td>45.2 id</td><td>空闲CPU的百分比</td></tr><tr><td>0.0 wa</td><td>CPU等待IO完成的时间</td></tr><tr><td>0.0 hi</td><td>硬中断，占的CPU百分比</td></tr><tr><td>0.0 si</td><td>软中断，占的CPU百分比</td></tr><tr><td>0.0 st</td><td>比如虚拟机占用物理CPU的时间</td></tr></tbody></table><p>什么是中断？</p><p>中断就是终止当前在做的事情 去执行另一段程序</p><p>会保留现场，执行的那段程序做完之后会在回来执行刚来尚未完成的部分</p><p><img src="/medias/66.png" alt></p><p>生活场景解释中断</p><p>比如你在ML正在关键时刻，突然传来了敲门声，你的快递到了，于是不情愿的去开门取快递，取完快递回来继续ML</p><p>上面的场景ML是一个过程的话，那么快递和一些其他的突发事件让这个过程在中间发生停顿或故障断开，就是活生生的中断</p><p>这个场景，你是唯一具有处理能力的主体，不管是ML是取快递，同一个时间点上只能干一件事情，但在专心干一件事情时，总有许多紧迫或不紧迫的事情突然出现在面前，都需要去关注，有些还需要停下手头的工作马上去处理,只有处理完之后，方能晖投资完成先前的任务，把ML做完</p><p>在你有生之年都不希望ML过程被打断，于是给快递提前定了时间，几点送到-这就是软中断</p><p>跟人类似，CPU也要面对这样复杂的局面，意外是无处不在的-有可能是用户等的不耐烦，猛敲键盘，有可能网卡突然接收到一个新的数据库包，这些都是需要CPU具体情况具体分析，要么马上处理，要么暂缓响应，无论如何应对，都需要CPU暂停手头的工作，拿出一种对策，只有在响应之后，方能回头完成先前的使命 有了中断CPU才有并行处理能力</p><p>中断了解即可</p><p>软中断和硬中断的区别</p><table><thead><tr><th></th><th>软中断</th><th>硬中断</th></tr></thead><tbody><tr><td>是否有随机性  突发性</td><td>否</td><td>是</td></tr><tr><td>是否有中断响应周期</td><td>无</td><td>是</td></tr><tr><td>中断类型号的提供方法</td><td>固定或由指令提供</td><td>由中断控制器提供</td></tr></tbody></table><p>top</p><p>h   # 查看帮助</p><p>1   # 数字1，显示所欲偶CPU核心的负载</p><p>z   # 以高亮显示数据</p><p>b   # 高亮显示处于R状态的进程</p><p>M  # 按内存使用百分比排序输出</p><p>P   # 按照CPU使用百分比排序输出</p><p>q   # 退出top</p><h3 id="管理进程状态"><a href="#管理进程状态" class="headerlink" title="管理进程状态"></a>管理进程状态</h3><p>当程序运行为进程后，如果希望停止进程，怎么办呢？那么此时我们可以使用linux的kill命令对进程发送关闭新号，当然除了kill 还有killall pkill</p><p>1） 使用kill –l李处当前系统所支持的信号</p><p><img src="/medias/67.png" alt></p><p>虽然Linux信号很多，但是我们仅仅使用最常用的3个信号</p><p>1）  SIGHUP 重新加载配置文件               1</p><p>2）  SIGKILL 强制杀死进程                9</p><p>3）  SIGTERM 终止进程，默认kill使用该信号 15</p><p>[root@lzy ~]# ps axu|grep nginx  </p><p>root   15688 0.0 0.1 87384 1132 ?    Ss  12:19  0:00 nginx: master process /usr/sbin/nginx</p><p>nginx  15689 0.0 0.3 89096 3176 ?    S  12:19  0:00 nginx: worker process</p><p>root   15691 0.0 0.0 112660  968 pts/3  R+  12:19  0:00 grep –color=auto nginx</p><p># 发送重新加载信号 nginx配置文件发生改变，可用此重新加载</p><p>[root@lzy ~]# kill -1 15688</p><p>[root@lzy ~]# ps axu|grep nginx</p><p>nginx  15692 0.0 0.3 89376 3648 ?    S  12:19  0:00 nginx: worker process</p><p>root   15722 0.0 0.0 112660  968 pts/3  R+  12:20  0:00 grep –color=auto nginx</p><p>发送停止信号 kill pid</p><p>[root@lzy ~]# kill 15692</p><p>强制终止服务</p><p>kill -9 15692</p><p>2.Linux系统中killall，pkill命令用于杀死指定名字的进程，我们可以使用kill命令杀死指定进程的PID的进程，killall和pkill直接杀进程而不需要查pid</p><p>[root@lzy ~]# killall nginx</p><p>[root@lzy ~]# pkill nginx</p><p>使用pkill踢出从远程登录到本机的用户，终止pts1上所有进程，用户强制退出</p><p>[root@lzy ~]# pkill -9 -t pts/1</p><h3 id="管理后台进程"><a href="#管理后台进程" class="headerlink" title="管理后台进程"></a>管理后台进程</h3><p>1） 什么是后台进程</p><p>他你刚才进程读会在终端前台运行，一旦关闭终端，进程随着结束，此时希望进程在后台运行不退出，这样关闭终端也不影响进程的正常运行</p><p>2） 如何把程序放在后台</p><p># 把进程放入后台运行 使用 &amp;</p><p>[root@lzy ~]# sleep 3000 &amp;</p><p>[1] 15909</p><p># 把进程挂起放在后台</p><p>[root@lzy ~]# sleep 4000</p><p>^Z</p><p>[3]+ Stopped         sleep 4000 [root@lzy ~]# </p><p># jobs 显示在后台运行的程序</p><p>[root@lzy ~]# jobs </p><p>[1]- Running         sleep 3000 &amp;</p><p>[2]+ Running         sleep 4000 &amp;</p><p># 让作业2在后台运行</p><p>[root@lzy ~]# bg %2</p><p>[2]+ sleep 4000 &amp;</p><p>[root@lzy ~]# jobs </p><p>[1]- Running         sleep 3000 &amp;</p><p>[2]+ Running         sleep 4000 &amp;</p><p>将作业1掉回到前台运行</p><p>[root@lzy ~]# fg %1</p><p>sleep 3000</p><p># 终止后台PID为2的进程</p><p>[root@lzy ~]# kill %2</p><p>[root@lzy ~]# jobs  </p><p>[1]+ Stopped         sleep 3000</p><p>[2]- Terminated       sleep 4000</p><p># &amp; 后台运行</p><p>for i in {1..10};do echo $i;done &amp;  # 内容还是输出到屏幕</p><p>for i in {1..10};do echo $i;done &amp;&gt;/dev/null &amp; # 内容定向到空</p><p>screen的使用 常用</p><p>1） 安装</p><p>yum –y install screen</p><p>2) 使用方法</p><p>  # screen 指定一个任务名称后进入到一个新bash中</p><p>  screen -S wget_jenkins</p><p># 在新bash中执行一条下载命令</p><p>wget <a href="https://pkg.jenkins.io/redhat-stable/jenkins-2.190.1-1.1.noarch.rpm" target="_blank" rel="noopener">https://pkg.jenkins.io/redhat-stable/jenkins-2.190.1-1.1.noarch.rpm</a></p><p># 平滑退出screen 不会终止任务，如果使用exit则退出</p><p>ctrl+a+d  # 平滑退出screen任务</p><p># 查看正在运行的screen有哪些任务</p><p>[root@lzy ~]# screen -list</p><p>There is a screen on:</p><p>​    43698.wget_jenkins   (Detached)</p><p>1 Socket in /var/run/screen/S-root.</p><p># 进入正在执行的screen任务中 或者使用PID即可进入</p><p>[root@lzy ~]# screen -r wget_jenkins</p><h3 id="进程的优先级"><a href="#进程的优先级" class="headerlink" title="进程的优先级"></a>进程的优先级</h3><p>1） 在启动进程时，为不同的进程使用不同的调度策略</p><p>nice 值越高 表示优先级越低，例如+19 该进程容易将CPU使用量让给其他进程</p><p>nice值越低 表示优先级越高，例如-20, 改进程更不倾向于让出CPU</p><p>使用top或ps敏玲查看进程的优先级</p><p># 使用top可以查看nice优先级 NI:实际nice级别，默认是0 动态修正CPU调度。范围（-20~19）。越大，cpu调度越一般，越小，cpu调度越偏向它。一般用于后台进程，调整也是往大了调，用来给前台进程让出CPU资源</p><p>PR: 优先级 显示nice值，PR默认是20，越小，优先级越高。修改nice可以同时修改PR  -20映射到0， +19映射到39 </p><p><img src="/medias/68.png" alt></p><p>使用ps查看进程优先级</p><p><img src="/medias/69.png" alt></p><p> 2）nice指定程序的优先级，语法格式nice -n 优先级数字 进程名称</p><p> # 开启vim并指定程序优先级为-5 并查看进程优先级</p><p><img src="/medias/70.png" alt></p><h1 id="renice命令修改一个正在运行的进程优先级，语法格式-renice-–n-优先级数字-进程-pid"><a href="#renice命令修改一个正在运行的进程优先级，语法格式-renice-–n-优先级数字-进程-pid" class="headerlink" title="renice命令修改一个正在运行的进程优先级，语法格式 renice –n 优先级数字 进程 pid"></a>renice命令修改一个正在运行的进程优先级，语法格式 renice –n 优先级数字 进程 pid</h1><p>1)查看sshd进程当前的优先级状态</p><p>[root@lzy ~]# ps axo pid,command,nice|grep sshd</p><p> 1114 /usr/sbin/sshd -D       0</p><p> 30865 sshd: root@pts/0       0</p><p>2) 调整sshd主进程的优先级</p><p>[root@lzy ~]# renice -n -20 1114</p><p>1114 (process ID) old priority 0, new priority -20</p><p>exit 退出当前bash</p><p>登陆查看调整或的优先级 再次登陆后会由主进程fork子进程 子进程会继承主进程的优先级</p><p>[root@lzy ~]# ps axo pid,command,nice|grep sshd</p><p> 1114 /usr/sbin/sshd -D      -20</p><p> 43747 sshd: root@pts/0      -20</p><p> 43770 grep –color=auto sshd   -20</p><h4 id="1-如何批量kill进程"><a href="#1-如何批量kill进程" class="headerlink" title="1  .如何批量kill进程"></a>1  .如何批量kill进程</h4><p>​    1）pkill nginx          # pkill  服务名字</p><p>​    2）killall nginx       # killall 服务名字</p><h4 id="2-需要安装nginx"><a href="#2-需要安装nginx" class="headerlink" title="2  .需要安装nginx"></a>2  .需要安装nginx</h4><p>​       yum -y install nginx</p><p>​     启动服务</p><p>​       systemctl start nginx</p><p>​        浏览器访问页面 虚拟机IP地址</p><p>2）强制杀死nginx master进程</p><p>​      kill -9 pid</p><p>3）如何批量杀死子进程 awk  </p><p>​       ps axu|grep nginx|grep -v grep|awk ‘{print $2}’|xargs kill -9</p><p>​       kill <code>ps axu|grep nginx|grep -v grep|awk &#39;{print $2}&#39;</code></p><p>发送信号</p><p>​        1. 对于系统中没有指定信号的进程 使用kill方式</p><p>​        2.对于系统中的服务 使用服务的信号 /usr/sbin/nginx -s stop reload </p><p>nginx 配置文件         /etc/nginx/nginx.conf</p><p>增加nginx 子进程个数，vim /etc/nginx/nginx.conf 把worker_processes auto; 改为worker_processes 个数;</p><h4 id="3-python程序如何启动和停止"><a href="#3-python程序如何启动和停止" class="headerlink" title="3  .python程序如何启动和停止"></a>3  .python程序如何启动和停止</h4><p> nohup python3.7 test.py &amp;       # py正确启动方式</p><p> 如何查看py程序的帮助</p><p>​    python3.7 test.py -h</p><p>​    使用帮助:</p><p>​            –redis  IP</p><p>​            –port  6379</p><p>​            –file  /tmp/test.txt</p><p> 如何py程序较长 写入脚本中 test.sh</p><p>​    #!/bin/bash</p><p>​    nohup python3.7 test.py –redis 10.0.0.202 –port 6379 –file /tmp/test.txt &amp;</p><p>​    如何运行?</p><p>​    sh test_start.sh</p><p>​    如何停止?</p><p>​    #!/bin/sh</p><p>​    ps axu|grep test.py|grep - v grep|awk ‘{print $2}’|xargs kill</p><p>​    sh test_stop.sh</p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
